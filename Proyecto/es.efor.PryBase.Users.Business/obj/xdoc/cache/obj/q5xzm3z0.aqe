id: es.efor.PryBase.Users.Business
language: CSharp
name:
  Default: es.efor.PryBase.Users.Business
qualifiedName:
  Default: es.efor.PryBase.Users.Business
type: Assembly
modifiers: {}
items:
- id: es.efor.PryBase.Users.Model
  commentId: N:es.efor.PryBase.Users.Model
  language: CSharp
  name:
    CSharp: es.efor.PryBase.Users.Model
    VB: es.efor.PryBase.Users.Model
  nameWithType:
    CSharp: es.efor.PryBase.Users.Model
    VB: es.efor.PryBase.Users.Model
  qualifiedName:
    CSharp: es.efor.PryBase.Users.Model
    VB: es.efor.PryBase.Users.Model
  type: Namespace
  assemblies:
  - es.efor.PryBase.Users.Business
  modifiers: {}
  items:
  - id: es.efor.PryBase.Users.Model.MapperProfileUsers
    commentId: T:es.efor.PryBase.Users.Model.MapperProfileUsers
    language: CSharp
    name:
      CSharp: MapperProfileUsers
      VB: MapperProfileUsers
    nameWithType:
      CSharp: MapperProfileUsers
      VB: MapperProfileUsers
    qualifiedName:
      CSharp: es.efor.PryBase.Users.Model.MapperProfileUsers
      VB: es.efor.PryBase.Users.Model.MapperProfileUsers
    type: Class
    assemblies:
    - es.efor.PryBase.Users.Business
    namespace: es.efor.PryBase.Users.Model
    source:
      remote:
        path: es.efor.PryBase.Users.Business/AutoMapperRegistrations.cs
        branch: master
        repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
      id: MapperProfileUsers
      path: ../es.efor.PryBase.Users.Business/AutoMapperRegistrations.cs
      startLine: 7
    syntax:
      content:
        CSharp: 'public sealed class MapperProfileUsers : Profile, IProfileExpression, IProfileConfiguration'
        VB: >-
          Public NotInheritable Class MapperProfileUsers

              Inherits Profile

              Implements IProfileExpression, IProfileConfiguration
    inheritance:
    - System.Object
    - AutoMapper.Profile
    implements:
    - AutoMapper.IProfileExpression
    - AutoMapper.Configuration.IProfileConfiguration
    inheritedMembers:
    - AutoMapper.Profile.DisableConstructorMapping
    - AutoMapper.Profile.ForAllMaps(System.Action{AutoMapper.TypeMap,AutoMapper.IMappingExpression})
    - AutoMapper.Profile.ForAllPropertyMaps(System.Func{AutoMapper.PropertyMap,System.Boolean},System.Action{AutoMapper.PropertyMap,AutoMapper.IMemberConfigurationExpression})
    - AutoMapper.Profile.CreateMap``2
    - AutoMapper.Profile.CreateMap``2(AutoMapper.MemberList)
    - AutoMapper.Profile.CreateMap(System.Type,System.Type)
    - AutoMapper.Profile.CreateMap(System.Type,System.Type,AutoMapper.MemberList)
    - AutoMapper.Profile.ClearPrefixes
    - AutoMapper.Profile.RecognizeAlias(System.String,System.String)
    - AutoMapper.Profile.ReplaceMemberName(System.String,System.String)
    - AutoMapper.Profile.RecognizePrefixes(System.String[])
    - AutoMapper.Profile.RecognizePostfixes(System.String[])
    - AutoMapper.Profile.RecognizeDestinationPrefixes(System.String[])
    - AutoMapper.Profile.RecognizeDestinationPostfixes(System.String[])
    - AutoMapper.Profile.AddGlobalIgnore(System.String)
    - AutoMapper.Profile.AddMemberConfiguration
    - AutoMapper.Profile.IncludeSourceExtensionMethods(System.Type)
    - AutoMapper.Profile.DefaultMemberConfig
    - AutoMapper.Profile.ConstructorMappingEnabled
    - AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#AllPropertyMapActions
    - AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#AllTypeMapActions
    - AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#GlobalIgnores
    - AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#MemberConfigurations
    - AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#SourceExtensionMethods
    - AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#TypeMapConfigs
    - AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#OpenTypeMapConfigs
    - AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#ValueTransformers
    - AutoMapper.Profile.ProfileName
    - AutoMapper.Profile.AllowNullDestinationValues
    - AutoMapper.Profile.AllowNullCollections
    - AutoMapper.Profile.EnableNullPropagationForQueryMapping
    - AutoMapper.Profile.ShouldMapProperty
    - AutoMapper.Profile.ShouldMapField
    - AutoMapper.Profile.ShouldMapMethod
    - AutoMapper.Profile.ShouldUseConstructor
    - AutoMapper.Profile.SourceMemberNamingConvention
    - AutoMapper.Profile.DestinationMemberNamingConvention
    - AutoMapper.Profile.ValueTransformers
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    extensionMethods:
    - System.Object.es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(Newtonsoft.Json.JsonSerializerSettings)
    - System.Object.es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(Newtonsoft.Json.ReferenceLoopHandling)
    modifiers:
      CSharp:
      - public
      - sealed
      - class
      VB:
      - Public
      - NotInheritable
      - Class
    items:
    - id: es.efor.PryBase.Users.Model.MapperProfileUsers.#ctor
      commentId: M:es.efor.PryBase.Users.Model.MapperProfileUsers.#ctor
      language: CSharp
      name:
        CSharp: MapperProfileUsers()
        VB: MapperProfileUsers()
      nameWithType:
        CSharp: MapperProfileUsers.MapperProfileUsers()
        VB: MapperProfileUsers.MapperProfileUsers()
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.MapperProfileUsers.MapperProfileUsers()
        VB: es.efor.PryBase.Users.Model.MapperProfileUsers.MapperProfileUsers()
      type: Constructor
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model
      source:
        remote:
          path: es.efor.PryBase.Users.Business/AutoMapperRegistrations.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: .ctor
        path: ../es.efor.PryBase.Users.Business/AutoMapperRegistrations.cs
        startLine: 9
      syntax:
        content:
          CSharp: public MapperProfileUsers()
          VB: Public Sub New
      overload: es.efor.PryBase.Users.Model.MapperProfileUsers.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: es.efor.PryBase.Users.Model.Services
  commentId: N:es.efor.PryBase.Users.Model.Services
  language: CSharp
  name:
    CSharp: es.efor.PryBase.Users.Model.Services
    VB: es.efor.PryBase.Users.Model.Services
  nameWithType:
    CSharp: es.efor.PryBase.Users.Model.Services
    VB: es.efor.PryBase.Users.Model.Services
  qualifiedName:
    CSharp: es.efor.PryBase.Users.Model.Services
    VB: es.efor.PryBase.Users.Model.Services
  type: Namespace
  assemblies:
  - es.efor.PryBase.Users.Business
  modifiers: {}
  items:
  - id: es.efor.PryBase.Users.Model.Services.IUserService
    commentId: T:es.efor.PryBase.Users.Model.Services.IUserService
    language: CSharp
    name:
      CSharp: IUserService
      VB: IUserService
    nameWithType:
      CSharp: IUserService
      VB: IUserService
    qualifiedName:
      CSharp: es.efor.PryBase.Users.Model.Services.IUserService
      VB: es.efor.PryBase.Users.Model.Services.IUserService
    type: Interface
    assemblies:
    - es.efor.PryBase.Users.Business
    namespace: es.efor.PryBase.Users.Model.Services
    source:
      remote:
        path: es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
        branch: master
        repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
      id: IUserService
      path: ../es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
      startLine: 7
    syntax:
      content:
        CSharp: public interface IUserService
        VB: Public Interface IUserService
    extensionMethods:
    - System.Object.es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(Newtonsoft.Json.JsonSerializerSettings)
    - System.Object.es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(Newtonsoft.Json.ReferenceLoopHandling)
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAdUser(System.String)
      commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.GetAdUser(System.String)
      language: CSharp
      name:
        CSharp: GetAdUser(String)
        VB: GetAdUser(String)
      nameWithType:
        CSharp: IUserService.GetAdUser(String)
        VB: IUserService.GetAdUser(String)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.IUserService.GetAdUser(System.String)
        VB: es.efor.PryBase.Users.Model.Services.IUserService.GetAdUser(System.String)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetAdUser
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
        startLine: 14
      summary: "\nReturns user of Active Directory\n"
      example: []
      syntax:
        content:
          CSharp: Task<ADUserDTO> GetAdUser(string samAccountName)
          VB: Function GetAdUser(samAccountName As String) As Task(Of ADUserDTO)
        parameters:
        - id: samAccountName
          type: System.String
          description: ''
        return:
          type: System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.UserDTOs.ADUserDTO}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.IUserService.GetAdUser*
      modifiers:
        CSharp: []
        VB: []
    - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAllUsers
      commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.GetAllUsers
      language: CSharp
      name:
        CSharp: GetAllUsers()
        VB: GetAllUsers()
      nameWithType:
        CSharp: IUserService.GetAllUsers()
        VB: IUserService.GetAllUsers()
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.IUserService.GetAllUsers()
        VB: es.efor.PryBase.Users.Model.Services.IUserService.GetAllUsers()
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetAllUsers
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
        startLine: 20
      summary: "\nReturns a list of registered users\n"
      example: []
      syntax:
        content:
          CSharp: Task<List<UserDTO>> GetAllUsers()
          VB: Function GetAllUsers As Task(Of List(Of UserDTO))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO}}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.IUserService.GetAllUsers*
      modifiers:
        CSharp: []
        VB: []
    - id: es.efor.PryBase.Users.Model.Services.IUserService.GetUserByName(System.String)
      commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.GetUserByName(System.String)
      language: CSharp
      name:
        CSharp: GetUserByName(String)
        VB: GetUserByName(String)
      nameWithType:
        CSharp: IUserService.GetUserByName(String)
        VB: IUserService.GetUserByName(String)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.IUserService.GetUserByName(System.String)
        VB: es.efor.PryBase.Users.Model.Services.IUserService.GetUserByName(System.String)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetUserByName
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
        startLine: 27
      summary: "\nReturns userDTO for the username specified\n"
      example: []
      syntax:
        content:
          CSharp: Task<UserDTO> GetUserByName(string user)
          VB: Function GetUserByName(user As String) As Task(Of UserDTO)
        parameters:
        - id: user
          type: System.String
          description: Username to lookup
        return:
          type: System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.IUserService.GetUserByName*
      modifiers:
        CSharp: []
        VB: []
    - id: es.efor.PryBase.Users.Model.Services.IUserService.GetUserById(System.Guid)
      commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.GetUserById(System.Guid)
      language: CSharp
      name:
        CSharp: GetUserById(Guid)
        VB: GetUserById(Guid)
      nameWithType:
        CSharp: IUserService.GetUserById(Guid)
        VB: IUserService.GetUserById(Guid)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.IUserService.GetUserById(System.Guid)
        VB: es.efor.PryBase.Users.Model.Services.IUserService.GetUserById(System.Guid)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetUserById
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
        startLine: 34
      summary: "\nReturns userDTO for the user with the specified id\n"
      example: []
      syntax:
        content:
          CSharp: Task<UserDTO> GetUserById(Guid id)
          VB: Function GetUserById(id As Guid) As Task(Of UserDTO)
        parameters:
        - id: id
          type: System.Guid
          description: User ID to lookup
        return:
          type: System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.IUserService.GetUserById*
      modifiers:
        CSharp: []
        VB: []
    - id: es.efor.PryBase.Users.Model.Services.IUserService.GetUsersByDepartment(System.Int32)
      commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.GetUsersByDepartment(System.Int32)
      language: CSharp
      name:
        CSharp: GetUsersByDepartment(Int32)
        VB: GetUsersByDepartment(Int32)
      nameWithType:
        CSharp: IUserService.GetUsersByDepartment(Int32)
        VB: IUserService.GetUsersByDepartment(Int32)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.IUserService.GetUsersByDepartment(System.Int32)
        VB: es.efor.PryBase.Users.Model.Services.IUserService.GetUsersByDepartment(System.Int32)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetUsersByDepartment
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
        startLine: 41
      summary: "\nReturns number of users by department Id\n"
      example: []
      syntax:
        content:
          CSharp: Task<int> GetUsersByDepartment(int departmentId)
          VB: Function GetUsersByDepartment(departmentId As Integer) As Task(Of Integer)
        parameters:
        - id: departmentId
          type: System.Int32
          description: Department Id
        return:
          type: System.Threading.Tasks.Task{System.Int32}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.IUserService.GetUsersByDepartment*
      modifiers:
        CSharp: []
        VB: []
    - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAllAD(System.String)
      commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.GetAllAD(System.String)
      language: CSharp
      name:
        CSharp: GetAllAD(String)
        VB: GetAllAD(String)
      nameWithType:
        CSharp: IUserService.GetAllAD(String)
        VB: IUserService.GetAllAD(String)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.IUserService.GetAllAD(System.String)
        VB: es.efor.PryBase.Users.Model.Services.IUserService.GetAllAD(System.String)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetAllAD
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
        startLine: 47
      summary: "\nGet all Active Directory users\n"
      example: []
      syntax:
        content:
          CSharp: Task<List<ADUserDTO>> GetAllAD(string ADGroup)
          VB: Function GetAllAD(ADGroup As String) As Task(Of List(Of ADUserDTO))
        parameters:
        - id: ADGroup
          type: System.String
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.UserDTOs.ADUserDTO}}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.IUserService.GetAllAD*
      modifiers:
        CSharp: []
        VB: []
    - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAllDepartments
      commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.GetAllDepartments
      language: CSharp
      name:
        CSharp: GetAllDepartments()
        VB: GetAllDepartments()
      nameWithType:
        CSharp: IUserService.GetAllDepartments()
        VB: IUserService.GetAllDepartments()
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.IUserService.GetAllDepartments()
        VB: es.efor.PryBase.Users.Model.Services.IUserService.GetAllDepartments()
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetAllDepartments
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
        startLine: 53
      summary: "\nReturns all departments\n"
      example: []
      syntax:
        content:
          CSharp: Task<List<UserDepartmentDTO>> GetAllDepartments()
          VB: Function GetAllDepartments As Task(Of List(Of UserDepartmentDTO))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO}}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.IUserService.GetAllDepartments*
      modifiers:
        CSharp: []
        VB: []
    - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAllLevels
      commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.GetAllLevels
      language: CSharp
      name:
        CSharp: GetAllLevels()
        VB: GetAllLevels()
      nameWithType:
        CSharp: IUserService.GetAllLevels()
        VB: IUserService.GetAllLevels()
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.IUserService.GetAllLevels()
        VB: es.efor.PryBase.Users.Model.Services.IUserService.GetAllLevels()
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetAllLevels
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
        startLine: 59
      summary: "\nReturns all levels\n"
      example: []
      syntax:
        content:
          CSharp: Task<List<UserLevelDTO>> GetAllLevels()
          VB: Function GetAllLevels As Task(Of List(Of UserLevelDTO))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserLevelDTO}}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.IUserService.GetAllLevels*
      modifiers:
        CSharp: []
        VB: []
    - id: es.efor.PryBase.Users.Model.Services.IUserService.SetUser(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO)
      commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.SetUser(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO)
      language: CSharp
      name:
        CSharp: SetUser(UserDTO)
        VB: SetUser(UserDTO)
      nameWithType:
        CSharp: IUserService.SetUser(UserDTO)
        VB: IUserService.SetUser(UserDTO)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.IUserService.SetUser(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO)
        VB: es.efor.PryBase.Users.Model.Services.IUserService.SetUser(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: SetUser
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
        startLine: 66
      summary: "\nSaves the user to DB. If the user already exist, update it\n"
      example: []
      syntax:
        content:
          CSharp: Task<bool> SetUser(UserDTO user)
          VB: Function SetUser(user As UserDTO) As Task(Of Boolean)
        parameters:
        - id: user
          type: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO
          description: User to save
        return:
          type: System.Threading.Tasks.Task{System.Boolean}
          description: Status of the task
      overload: es.efor.PryBase.Users.Model.Services.IUserService.SetUser*
      modifiers:
        CSharp: []
        VB: []
    - id: es.efor.PryBase.Users.Model.Services.IUserService.GetDepartmentById(System.Int32)
      commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.GetDepartmentById(System.Int32)
      language: CSharp
      name:
        CSharp: GetDepartmentById(Int32)
        VB: GetDepartmentById(Int32)
      nameWithType:
        CSharp: IUserService.GetDepartmentById(Int32)
        VB: IUserService.GetDepartmentById(Int32)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.IUserService.GetDepartmentById(System.Int32)
        VB: es.efor.PryBase.Users.Model.Services.IUserService.GetDepartmentById(System.Int32)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetDepartmentById
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
        startLine: 73
      summary: "\nReturns UserDepartmentDTO for the department with the specified id\n"
      example: []
      syntax:
        content:
          CSharp: Task<UserDepartmentDTO> GetDepartmentById(int id)
          VB: Function GetDepartmentById(id As Integer) As Task(Of UserDepartmentDTO)
        parameters:
        - id: id
          type: System.Int32
          description: Department ID to lookup
        return:
          type: System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.IUserService.GetDepartmentById*
      modifiers:
        CSharp: []
        VB: []
    - id: es.efor.PryBase.Users.Model.Services.IUserService.SetDepartment(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO)
      commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.SetDepartment(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO)
      language: CSharp
      name:
        CSharp: SetDepartment(UserDepartmentDTO)
        VB: SetDepartment(UserDepartmentDTO)
      nameWithType:
        CSharp: IUserService.SetDepartment(UserDepartmentDTO)
        VB: IUserService.SetDepartment(UserDepartmentDTO)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.IUserService.SetDepartment(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO)
        VB: es.efor.PryBase.Users.Model.Services.IUserService.SetDepartment(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: SetDepartment
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
        startLine: 80
      summary: "\nSaves the department to DB. If the department already exist, update it\n"
      example: []
      syntax:
        content:
          CSharp: Task<bool> SetDepartment(UserDepartmentDTO department)
          VB: Function SetDepartment(department As UserDepartmentDTO) As Task(Of Boolean)
        parameters:
        - id: department
          type: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO
          description: Department to save
        return:
          type: System.Threading.Tasks.Task{System.Boolean}
          description: Status of the task
      overload: es.efor.PryBase.Users.Model.Services.IUserService.SetDepartment*
      modifiers:
        CSharp: []
        VB: []
    - id: es.efor.PryBase.Users.Model.Services.IUserService.GetLevelById(System.Int32)
      commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.GetLevelById(System.Int32)
      language: CSharp
      name:
        CSharp: GetLevelById(Int32)
        VB: GetLevelById(Int32)
      nameWithType:
        CSharp: IUserService.GetLevelById(Int32)
        VB: IUserService.GetLevelById(Int32)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.IUserService.GetLevelById(System.Int32)
        VB: es.efor.PryBase.Users.Model.Services.IUserService.GetLevelById(System.Int32)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetLevelById
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
        startLine: 87
      summary: "\nReturns UserLevelDTO for the level with the specified id\n"
      example: []
      syntax:
        content:
          CSharp: Task<UserLevelDTO> GetLevelById(int id)
          VB: Function GetLevelById(id As Integer) As Task(Of UserLevelDTO)
        parameters:
        - id: id
          type: System.Int32
          description: Level ID to lookup
        return:
          type: System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserLevelDTO}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.IUserService.GetLevelById*
      modifiers:
        CSharp: []
        VB: []
    - id: es.efor.PryBase.Users.Model.Services.IUserService.DeleteUser(System.Guid,System.String)
      commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.DeleteUser(System.Guid,System.String)
      language: CSharp
      name:
        CSharp: DeleteUser(Guid, String)
        VB: DeleteUser(Guid, String)
      nameWithType:
        CSharp: IUserService.DeleteUser(Guid, String)
        VB: IUserService.DeleteUser(Guid, String)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.IUserService.DeleteUser(System.Guid, System.String)
        VB: es.efor.PryBase.Users.Model.Services.IUserService.DeleteUser(System.Guid, System.String)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: DeleteUser
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
        startLine: 95
      summary: "\nLogic delete the user from DB. \n"
      example: []
      syntax:
        content:
          CSharp: Task<bool> DeleteUser(Guid id, string username)
          VB: Function DeleteUser(id As Guid, username As String) As Task(Of Boolean)
        parameters:
        - id: id
          type: System.Guid
          description: User ID to delete
        - id: username
          type: System.String
          description: Username that requests the delete
        return:
          type: System.Threading.Tasks.Task{System.Boolean}
          description: Status of the task
      overload: es.efor.PryBase.Users.Model.Services.IUserService.DeleteUser*
      modifiers:
        CSharp: []
        VB: []
    - id: es.efor.PryBase.Users.Model.Services.IUserService.DeleteDepartment(System.Int32,System.String)
      commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.DeleteDepartment(System.Int32,System.String)
      language: CSharp
      name:
        CSharp: DeleteDepartment(Int32, String)
        VB: DeleteDepartment(Int32, String)
      nameWithType:
        CSharp: IUserService.DeleteDepartment(Int32, String)
        VB: IUserService.DeleteDepartment(Int32, String)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.IUserService.DeleteDepartment(System.Int32, System.String)
        VB: es.efor.PryBase.Users.Model.Services.IUserService.DeleteDepartment(System.Int32, System.String)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: DeleteDepartment
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/IUserService.cs
        startLine: 103
      summary: "\nLogic delete the department from DB. \n"
      example: []
      syntax:
        content:
          CSharp: Task<bool> DeleteDepartment(int id, string username)
          VB: Function DeleteDepartment(id As Integer, username As String) As Task(Of Boolean)
        parameters:
        - id: id
          type: System.Int32
          description: Department ID to delete
        - id: username
          type: System.String
          description: Username that requests the delete
        return:
          type: System.Threading.Tasks.Task{System.Boolean}
          description: Status of the task
      overload: es.efor.PryBase.Users.Model.Services.IUserService.DeleteDepartment*
      modifiers:
        CSharp: []
        VB: []
- id: es.efor.PryBase.Users.Model.Services.PermissionsServices
  commentId: N:es.efor.PryBase.Users.Model.Services.PermissionsServices
  language: CSharp
  name:
    CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices
    VB: es.efor.PryBase.Users.Model.Services.PermissionsServices
  nameWithType:
    CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices
    VB: es.efor.PryBase.Users.Model.Services.PermissionsServices
  qualifiedName:
    CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices
    VB: es.efor.PryBase.Users.Model.Services.PermissionsServices
  type: Namespace
  assemblies:
  - es.efor.PryBase.Users.Business
  modifiers: {}
  items:
  - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService
    commentId: T:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService
    language: CSharp
    name:
      CSharp: IPermissionService
      VB: IPermissionService
    nameWithType:
      CSharp: IPermissionService
      VB: IPermissionService
    qualifiedName:
      CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService
      VB: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService
    type: Interface
    assemblies:
    - es.efor.PryBase.Users.Business
    namespace: es.efor.PryBase.Users.Model.Services.PermissionsServices
    source:
      remote:
        path: es.efor.PryBase.Users.Business/Services/PermissionsServices/IPermissionService.cs
        branch: master
        repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
      id: IPermissionService
      path: ../es.efor.PryBase.Users.Business/Services/PermissionsServices/IPermissionService.cs
      startLine: 9
    syntax:
      content:
        CSharp: public interface IPermissionService
        VB: Public Interface IPermissionService
    extensionMethods:
    - System.Object.es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(Newtonsoft.Json.JsonSerializerSettings)
    - System.Object.es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(Newtonsoft.Json.ReferenceLoopHandling)
    modifiers:
      CSharp:
      - public
      - interface
      VB:
      - Public
      - Interface
    items:
    - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetMenuByUser(System.String)
      commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetMenuByUser(System.String)
      language: CSharp
      name:
        CSharp: GetMenuByUser(String)
        VB: GetMenuByUser(String)
      nameWithType:
        CSharp: IPermissionService.GetMenuByUser(String)
        VB: IPermissionService.GetMenuByUser(String)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetMenuByUser(System.String)
        VB: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetMenuByUser(System.String)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.PermissionsServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/PermissionsServices/IPermissionService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetMenuByUser
        path: ../es.efor.PryBase.Users.Business/Services/PermissionsServices/IPermissionService.cs
        startLine: 16
      summary: "\nReturns the menu nodes for the user\n"
      example: []
      syntax:
        content:
          CSharp: Task<MenuDTO> GetMenuByUser(string user)
          VB: Function GetMenuByUser(user As String) As Task(Of MenuDTO)
        parameters:
        - id: user
          type: System.String
          description: Selected user
        return:
          type: System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.MenuDTO}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetMenuByUser*
      modifiers:
        CSharp: []
        VB: []
    - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllModules
      commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllModules
      language: CSharp
      name:
        CSharp: GetAllModules()
        VB: GetAllModules()
      nameWithType:
        CSharp: IPermissionService.GetAllModules()
        VB: IPermissionService.GetAllModules()
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllModules()
        VB: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllModules()
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.PermissionsServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/PermissionsServices/IPermissionService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetAllModules
        path: ../es.efor.PryBase.Users.Business/Services/PermissionsServices/IPermissionService.cs
        startLine: 22
      summary: "\nReturns all modules\n"
      example: []
      syntax:
        content:
          CSharp: Task<List<ModuleDTO>> GetAllModules()
          VB: Function GetAllModules As Task(Of List(Of ModuleDTO))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.ModuleDTO}}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllModules*
      modifiers:
        CSharp: []
        VB: []
    - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllFunctionalities
      commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllFunctionalities
      language: CSharp
      name:
        CSharp: GetAllFunctionalities()
        VB: GetAllFunctionalities()
      nameWithType:
        CSharp: IPermissionService.GetAllFunctionalities()
        VB: IPermissionService.GetAllFunctionalities()
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllFunctionalities()
        VB: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllFunctionalities()
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.PermissionsServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/PermissionsServices/IPermissionService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetAllFunctionalities
        path: ../es.efor.PryBase.Users.Business/Services/PermissionsServices/IPermissionService.cs
        startLine: 28
      summary: "\nReturns all functionalities\n"
      example: []
      syntax:
        content:
          CSharp: Task<List<FunctionalityDTO>> GetAllFunctionalities()
          VB: Function GetAllFunctionalities As Task(Of List(Of FunctionalityDTO))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.FunctionalityDTO}}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllFunctionalities*
      modifiers:
        CSharp: []
        VB: []
    - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllDetails
      commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllDetails
      language: CSharp
      name:
        CSharp: GetAllDetails()
        VB: GetAllDetails()
      nameWithType:
        CSharp: IPermissionService.GetAllDetails()
        VB: IPermissionService.GetAllDetails()
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllDetails()
        VB: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllDetails()
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.PermissionsServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/PermissionsServices/IPermissionService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetAllDetails
        path: ../es.efor.PryBase.Users.Business/Services/PermissionsServices/IPermissionService.cs
        startLine: 34
      summary: "\nReturns all details\n"
      example: []
      syntax:
        content:
          CSharp: Task<List<DetailDTO>> GetAllDetails()
          VB: Function GetAllDetails As Task(Of List(Of DetailDTO))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.DetailDTO}}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllDetails*
      modifiers:
        CSharp: []
        VB: []
    - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissions(System.String[],System.Int32)
      commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissions(System.String[],System.Int32)
      language: CSharp
      name:
        CSharp: GetPermissions(String[], Int32)
        VB: GetPermissions(String(), Int32)
      nameWithType:
        CSharp: IPermissionService.GetPermissions(String[], Int32)
        VB: IPermissionService.GetPermissions(String(), Int32)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissions(System.String[], System.Int32)
        VB: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissions(System.String(), System.Int32)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.PermissionsServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/PermissionsServices/IPermissionService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetPermissions
        path: ../es.efor.PryBase.Users.Business/Services/PermissionsServices/IPermissionService.cs
        startLine: 42
      summary: "\nReturns all the permission for the specified departments and level\n"
      example: []
      syntax:
        content:
          CSharp: Task<List<PermissionDTO>> GetPermissions(string[] departments, int level)
          VB: Function GetPermissions(departments As String(), level As Integer) As Task(Of List(Of PermissionDTO))
        parameters:
        - id: departments
          type: System.String[]
          description: ''
        - id: level
          type: System.Int32
          description: ''
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO}}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissions*
      modifiers:
        CSharp: []
        VB: []
    - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionByFilter(System.Int32,System.Int32,System.Int32,System.Int32)
      commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionByFilter(System.Int32,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: GetPermissionByFilter(Int32, Int32, Int32, Int32)
        VB: GetPermissionByFilter(Int32, Int32, Int32, Int32)
      nameWithType:
        CSharp: IPermissionService.GetPermissionByFilter(Int32, Int32, Int32, Int32)
        VB: IPermissionService.GetPermissionByFilter(Int32, Int32, Int32, Int32)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionByFilter(System.Int32, System.Int32, System.Int32, System.Int32)
        VB: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionByFilter(System.Int32, System.Int32, System.Int32, System.Int32)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.PermissionsServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/PermissionsServices/IPermissionService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetPermissionByFilter
        path: ../es.efor.PryBase.Users.Business/Services/PermissionsServices/IPermissionService.cs
        startLine: 52
      summary: "\nReturns the permission for the specified filter\n"
      example: []
      syntax:
        content:
          CSharp: Task<PermissionDTO> GetPermissionByFilter(int department, int level, int functionality, int detail)
          VB: Function GetPermissionByFilter(department As Integer, level As Integer, functionality As Integer, detail As Integer) As Task(Of PermissionDTO)
        parameters:
        - id: department
          type: System.Int32
          description: ''
        - id: level
          type: System.Int32
          description: ''
        - id: functionality
          type: System.Int32
          description: ''
        - id: detail
          type: System.Int32
          description: ''
        return:
          type: System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionByFilter*
      modifiers:
        CSharp: []
        VB: []
    - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionsByDepartment(System.Int32)
      commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionsByDepartment(System.Int32)
      language: CSharp
      name:
        CSharp: GetPermissionsByDepartment(Int32)
        VB: GetPermissionsByDepartment(Int32)
      nameWithType:
        CSharp: IPermissionService.GetPermissionsByDepartment(Int32)
        VB: IPermissionService.GetPermissionsByDepartment(Int32)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionsByDepartment(System.Int32)
        VB: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionsByDepartment(System.Int32)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.PermissionsServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/PermissionsServices/IPermissionService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetPermissionsByDepartment
        path: ../es.efor.PryBase.Users.Business/Services/PermissionsServices/IPermissionService.cs
        startLine: 59
      summary: "\nReturns number of permissions by department Id\n"
      example: []
      syntax:
        content:
          CSharp: Task<int> GetPermissionsByDepartment(int departmentId)
          VB: Function GetPermissionsByDepartment(departmentId As Integer) As Task(Of Integer)
        parameters:
        - id: departmentId
          type: System.Int32
          description: Department Id
        return:
          type: System.Threading.Tasks.Task{System.Int32}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionsByDepartment*
      modifiers:
        CSharp: []
        VB: []
    - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.SetPermissions(System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO})
      commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.SetPermissions(System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO})
      language: CSharp
      name:
        CSharp: SetPermissions(List<PermissionDTO>)
        VB: SetPermissions(List(Of PermissionDTO))
      nameWithType:
        CSharp: IPermissionService.SetPermissions(List<PermissionDTO>)
        VB: IPermissionService.SetPermissions(List(Of PermissionDTO))
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.SetPermissions(System.Collections.Generic.List<es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO>)
        VB: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.SetPermissions(System.Collections.Generic.List(Of es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO))
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.PermissionsServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/PermissionsServices/IPermissionService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: SetPermissions
        path: ../es.efor.PryBase.Users.Business/Services/PermissionsServices/IPermissionService.cs
        startLine: 66
      summary: "\nSaves the lines for a set of permissions to DB.\n"
      example: []
      syntax:
        content:
          CSharp: Task<bool> SetPermissions(List<PermissionDTO> permission)
          VB: Function SetPermissions(permission As List(Of PermissionDTO)) As Task(Of Boolean)
        parameters:
        - id: permission
          type: System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO}
          description: Department to save
        return:
          type: System.Threading.Tasks.Task{System.Boolean}
          description: Status of the task
      overload: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.SetPermissions*
      modifiers:
        CSharp: []
        VB: []
  - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService
    commentId: T:es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService
    language: CSharp
    name:
      CSharp: PermissionService
      VB: PermissionService
    nameWithType:
      CSharp: PermissionService
      VB: PermissionService
    qualifiedName:
      CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService
      VB: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService
    type: Class
    assemblies:
    - es.efor.PryBase.Users.Business
    namespace: es.efor.PryBase.Users.Model.Services.PermissionsServices
    source:
      remote:
        path: es.efor.PryBase.Users.Business/Services/PermissionsServices/PermissionService.cs
        branch: master
        repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
      id: PermissionService
      path: ../es.efor.PryBase.Users.Business/Services/PermissionsServices/PermissionService.cs
      startLine: 13
    syntax:
      content:
        CSharp: 'public class PermissionService : IPermissionService'
        VB: >-
          Public Class PermissionService

              Implements IPermissionService
    inheritance:
    - System.Object
    implements:
    - es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    extensionMethods:
    - System.Object.es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(Newtonsoft.Json.JsonSerializerSettings)
    - System.Object.es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(Newtonsoft.Json.ReferenceLoopHandling)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.#ctor(es.efor.PryBase.Data.Context.NexusContext,AutoMapper.IMapper,es.efor.PryBase.Users.Model.Services.IUserService,Microsoft.Extensions.Logging.ILogger{es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService})
      commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.#ctor(es.efor.PryBase.Data.Context.NexusContext,AutoMapper.IMapper,es.efor.PryBase.Users.Model.Services.IUserService,Microsoft.Extensions.Logging.ILogger{es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService})
      language: CSharp
      name:
        CSharp: PermissionService(NexusContext, IMapper, IUserService, ILogger<PermissionService>)
        VB: PermissionService(NexusContext, IMapper, IUserService, ILogger(Of PermissionService))
      nameWithType:
        CSharp: PermissionService.PermissionService(NexusContext, IMapper, IUserService, ILogger<PermissionService>)
        VB: PermissionService.PermissionService(NexusContext, IMapper, IUserService, ILogger(Of PermissionService))
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.PermissionService(es.efor.PryBase.Data.Context.NexusContext, AutoMapper.IMapper, es.efor.PryBase.Users.Model.Services.IUserService, Microsoft.Extensions.Logging.ILogger<es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService>)
        VB: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.PermissionService(es.efor.PryBase.Data.Context.NexusContext, AutoMapper.IMapper, es.efor.PryBase.Users.Model.Services.IUserService, Microsoft.Extensions.Logging.ILogger(Of es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService))
      type: Constructor
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.PermissionsServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/PermissionsServices/PermissionService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: .ctor
        path: ../es.efor.PryBase.Users.Business/Services/PermissionsServices/PermissionService.cs
        startLine: 23
      syntax:
        content:
          CSharp: public PermissionService(NexusContext NexusContext, IMapper mapper, IUserService usersService, ILogger<PermissionService> logger)
          VB: Public Sub New(NexusContext As NexusContext, mapper As IMapper, usersService As IUserService, logger As ILogger(Of PermissionService))
        parameters:
        - id: NexusContext
          type: es.efor.PryBase.Data.Context.NexusContext
        - id: mapper
          type: AutoMapper.IMapper
        - id: usersService
          type: es.efor.PryBase.Users.Model.Services.IUserService
        - id: logger
          type: Microsoft.Extensions.Logging.ILogger{es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService}
      overload: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetMenuByUser(System.String)
      commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetMenuByUser(System.String)
      language: CSharp
      name:
        CSharp: GetMenuByUser(String)
        VB: GetMenuByUser(String)
      nameWithType:
        CSharp: PermissionService.GetMenuByUser(String)
        VB: PermissionService.GetMenuByUser(String)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetMenuByUser(System.String)
        VB: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetMenuByUser(System.String)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.PermissionsServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/PermissionsServices/PermissionService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetMenuByUser
        path: ../es.efor.PryBase.Users.Business/Services/PermissionsServices/PermissionService.cs
        startLine: 40
      summary: "\nReturns the menu nodes for the user\n"
      example: []
      syntax:
        content:
          CSharp: public Task<MenuDTO> GetMenuByUser(string user)
          VB: Public Function GetMenuByUser(user As String) As Task(Of MenuDTO)
        parameters:
        - id: user
          type: System.String
          description: Selected user
        return:
          type: System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.MenuDTO}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetMenuByUser*
      implements:
      - es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetMenuByUser(System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllModules
      commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllModules
      language: CSharp
      name:
        CSharp: GetAllModules()
        VB: GetAllModules()
      nameWithType:
        CSharp: PermissionService.GetAllModules()
        VB: PermissionService.GetAllModules()
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllModules()
        VB: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllModules()
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.PermissionsServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/PermissionsServices/PermissionService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetAllModules
        path: ../es.efor.PryBase.Users.Business/Services/PermissionsServices/PermissionService.cs
        startLine: 95
      summary: "\nReturns all modules\n"
      example: []
      syntax:
        content:
          CSharp: public Task<List<ModuleDTO>> GetAllModules()
          VB: Public Function GetAllModules As Task(Of List(Of ModuleDTO))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.ModuleDTO}}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllModules*
      implements:
      - es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllModules
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllFunctionalities
      commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllFunctionalities
      language: CSharp
      name:
        CSharp: GetAllFunctionalities()
        VB: GetAllFunctionalities()
      nameWithType:
        CSharp: PermissionService.GetAllFunctionalities()
        VB: PermissionService.GetAllFunctionalities()
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllFunctionalities()
        VB: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllFunctionalities()
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.PermissionsServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/PermissionsServices/PermissionService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetAllFunctionalities
        path: ../es.efor.PryBase.Users.Business/Services/PermissionsServices/PermissionService.cs
        startLine: 105
      summary: "\nReturns all functionalities\n"
      example: []
      syntax:
        content:
          CSharp: public Task<List<FunctionalityDTO>> GetAllFunctionalities()
          VB: Public Function GetAllFunctionalities As Task(Of List(Of FunctionalityDTO))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.FunctionalityDTO}}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllFunctionalities*
      implements:
      - es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllFunctionalities
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllDetails
      commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllDetails
      language: CSharp
      name:
        CSharp: GetAllDetails()
        VB: GetAllDetails()
      nameWithType:
        CSharp: PermissionService.GetAllDetails()
        VB: PermissionService.GetAllDetails()
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllDetails()
        VB: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllDetails()
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.PermissionsServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/PermissionsServices/PermissionService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetAllDetails
        path: ../es.efor.PryBase.Users.Business/Services/PermissionsServices/PermissionService.cs
        startLine: 115
      summary: "\nReturns all details\n"
      example: []
      syntax:
        content:
          CSharp: public Task<List<DetailDTO>> GetAllDetails()
          VB: Public Function GetAllDetails As Task(Of List(Of DetailDTO))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.DetailDTO}}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllDetails*
      implements:
      - es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllDetails
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissions(System.String[],System.Int32)
      commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissions(System.String[],System.Int32)
      language: CSharp
      name:
        CSharp: GetPermissions(String[], Int32)
        VB: GetPermissions(String(), Int32)
      nameWithType:
        CSharp: PermissionService.GetPermissions(String[], Int32)
        VB: PermissionService.GetPermissions(String(), Int32)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissions(System.String[], System.Int32)
        VB: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissions(System.String(), System.Int32)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.PermissionsServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/PermissionsServices/PermissionService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetPermissions
        path: ../es.efor.PryBase.Users.Business/Services/PermissionsServices/PermissionService.cs
        startLine: 127
      summary: "\nReturns all permission for the specified department and level\n"
      example: []
      syntax:
        content:
          CSharp: public Task<List<PermissionDTO>> GetPermissions(string[] departments, int level)
          VB: Public Function GetPermissions(departments As String(), level As Integer) As Task(Of List(Of PermissionDTO))
        parameters:
        - id: departments
          type: System.String[]
          description: ''
        - id: level
          type: System.Int32
          description: ''
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO}}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissions*
      implements:
      - es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissions(System.String[],System.Int32)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionByFilter(System.Int32,System.Int32,System.Int32,System.Int32)
      commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionByFilter(System.Int32,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: GetPermissionByFilter(Int32, Int32, Int32, Int32)
        VB: GetPermissionByFilter(Int32, Int32, Int32, Int32)
      nameWithType:
        CSharp: PermissionService.GetPermissionByFilter(Int32, Int32, Int32, Int32)
        VB: PermissionService.GetPermissionByFilter(Int32, Int32, Int32, Int32)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionByFilter(System.Int32, System.Int32, System.Int32, System.Int32)
        VB: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionByFilter(System.Int32, System.Int32, System.Int32, System.Int32)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.PermissionsServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/PermissionsServices/PermissionService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetPermissionByFilter
        path: ../es.efor.PryBase.Users.Business/Services/PermissionsServices/PermissionService.cs
        startLine: 164
      summary: "\nReturns the permission for the specified filter\n"
      example: []
      syntax:
        content:
          CSharp: public Task<PermissionDTO> GetPermissionByFilter(int department, int level, int functionality, int detail)
          VB: Public Function GetPermissionByFilter(department As Integer, level As Integer, functionality As Integer, detail As Integer) As Task(Of PermissionDTO)
        parameters:
        - id: department
          type: System.Int32
          description: ''
        - id: level
          type: System.Int32
          description: ''
        - id: functionality
          type: System.Int32
          description: ''
        - id: detail
          type: System.Int32
          description: ''
        return:
          type: System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionByFilter*
      implements:
      - es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionByFilter(System.Int32,System.Int32,System.Int32,System.Int32)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionsByDepartment(System.Int32)
      commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionsByDepartment(System.Int32)
      language: CSharp
      name:
        CSharp: GetPermissionsByDepartment(Int32)
        VB: GetPermissionsByDepartment(Int32)
      nameWithType:
        CSharp: PermissionService.GetPermissionsByDepartment(Int32)
        VB: PermissionService.GetPermissionsByDepartment(Int32)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionsByDepartment(System.Int32)
        VB: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionsByDepartment(System.Int32)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.PermissionsServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/PermissionsServices/PermissionService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetPermissionsByDepartment
        path: ../es.efor.PryBase.Users.Business/Services/PermissionsServices/PermissionService.cs
        startLine: 191
      summary: "\nReturns number of permissions by department Id\n"
      example: []
      syntax:
        content:
          CSharp: public Task<int> GetPermissionsByDepartment(int departmentId)
          VB: Public Function GetPermissionsByDepartment(departmentId As Integer) As Task(Of Integer)
        parameters:
        - id: departmentId
          type: System.Int32
          description: Department Id
        return:
          type: System.Threading.Tasks.Task{System.Int32}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionsByDepartment*
      implements:
      - es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionsByDepartment(System.Int32)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.SetPermissions(System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO})
      commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.SetPermissions(System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO})
      language: CSharp
      name:
        CSharp: SetPermissions(List<PermissionDTO>)
        VB: SetPermissions(List(Of PermissionDTO))
      nameWithType:
        CSharp: PermissionService.SetPermissions(List<PermissionDTO>)
        VB: PermissionService.SetPermissions(List(Of PermissionDTO))
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.SetPermissions(System.Collections.Generic.List<es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO>)
        VB: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.SetPermissions(System.Collections.Generic.List(Of es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO))
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.PermissionsServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/PermissionsServices/PermissionService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: SetPermissions
        path: ../es.efor.PryBase.Users.Business/Services/PermissionsServices/PermissionService.cs
        startLine: 203
      summary: "\nSaves the lines for a set of permissions to DB.\n"
      example: []
      syntax:
        content:
          CSharp: public Task<bool> SetPermissions(List<PermissionDTO> permissions)
          VB: Public Function SetPermissions(permissions As List(Of PermissionDTO)) As Task(Of Boolean)
        parameters:
        - id: permissions
          type: System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO}
          description: Department to save
        return:
          type: System.Threading.Tasks.Task{System.Boolean}
          description: Status of the task
      overload: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.SetPermissions*
      implements:
      - es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.SetPermissions(System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO})
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: es.efor.PryBase.Users.Model.Services.UsersServices
  commentId: N:es.efor.PryBase.Users.Model.Services.UsersServices
  language: CSharp
  name:
    CSharp: es.efor.PryBase.Users.Model.Services.UsersServices
    VB: es.efor.PryBase.Users.Model.Services.UsersServices
  nameWithType:
    CSharp: es.efor.PryBase.Users.Model.Services.UsersServices
    VB: es.efor.PryBase.Users.Model.Services.UsersServices
  qualifiedName:
    CSharp: es.efor.PryBase.Users.Model.Services.UsersServices
    VB: es.efor.PryBase.Users.Model.Services.UsersServices
  type: Namespace
  assemblies:
  - es.efor.PryBase.Users.Business
  modifiers: {}
  items:
  - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService
    commentId: T:es.efor.PryBase.Users.Model.Services.UsersServices.UserService
    language: CSharp
    name:
      CSharp: UserService
      VB: UserService
    nameWithType:
      CSharp: UserService
      VB: UserService
    qualifiedName:
      CSharp: es.efor.PryBase.Users.Model.Services.UsersServices.UserService
      VB: es.efor.PryBase.Users.Model.Services.UsersServices.UserService
    type: Class
    assemblies:
    - es.efor.PryBase.Users.Business
    namespace: es.efor.PryBase.Users.Model.Services.UsersServices
    source:
      remote:
        path: es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
        branch: master
        repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
      id: UserService
      path: ../es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
      startLine: 14
    syntax:
      content:
        CSharp: 'public class UserService : IUserService'
        VB: >-
          Public Class UserService

              Implements IUserService
    inheritance:
    - System.Object
    implements:
    - es.efor.PryBase.Users.Model.Services.IUserService
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    extensionMethods:
    - System.Object.es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(Newtonsoft.Json.JsonSerializerSettings)
    - System.Object.es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(Newtonsoft.Json.ReferenceLoopHandling)
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.#ctor(es.efor.PryBase.Data.Context.NexusContext,AutoMapper.IMapper,Microsoft.Extensions.Logging.ILogger{es.efor.PryBase.Users.Model.Services.UsersServices.UserService})
      commentId: M:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.#ctor(es.efor.PryBase.Data.Context.NexusContext,AutoMapper.IMapper,Microsoft.Extensions.Logging.ILogger{es.efor.PryBase.Users.Model.Services.UsersServices.UserService})
      language: CSharp
      name:
        CSharp: UserService(NexusContext, IMapper, ILogger<UserService>)
        VB: UserService(NexusContext, IMapper, ILogger(Of UserService))
      nameWithType:
        CSharp: UserService.UserService(NexusContext, IMapper, ILogger<UserService>)
        VB: UserService.UserService(NexusContext, IMapper, ILogger(Of UserService))
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.UserService(es.efor.PryBase.Data.Context.NexusContext, AutoMapper.IMapper, Microsoft.Extensions.Logging.ILogger<es.efor.PryBase.Users.Model.Services.UsersServices.UserService>)
        VB: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.UserService(es.efor.PryBase.Data.Context.NexusContext, AutoMapper.IMapper, Microsoft.Extensions.Logging.ILogger(Of es.efor.PryBase.Users.Model.Services.UsersServices.UserService))
      type: Constructor
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.UsersServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: .ctor
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
        startLine: 23
      syntax:
        content:
          CSharp: public UserService(NexusContext NexusContext, IMapper mapper, ILogger<UserService> logger)
          VB: Public Sub New(NexusContext As NexusContext, mapper As IMapper, logger As ILogger(Of UserService))
        parameters:
        - id: NexusContext
          type: es.efor.PryBase.Data.Context.NexusContext
        - id: mapper
          type: AutoMapper.IMapper
        - id: logger
          type: Microsoft.Extensions.Logging.ILogger{es.efor.PryBase.Users.Model.Services.UsersServices.UserService}
      overload: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAdUser(System.String)
      commentId: M:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAdUser(System.String)
      language: CSharp
      name:
        CSharp: GetAdUser(String)
        VB: GetAdUser(String)
      nameWithType:
        CSharp: UserService.GetAdUser(String)
        VB: UserService.GetAdUser(String)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAdUser(System.String)
        VB: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAdUser(System.String)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.UsersServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetAdUser
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
        startLine: 37
      summary: "\nReturns user of Active Directory\n"
      example: []
      syntax:
        content:
          CSharp: public Task<ADUserDTO> GetAdUser(string samAccountName)
          VB: Public Function GetAdUser(samAccountName As String) As Task(Of ADUserDTO)
        parameters:
        - id: samAccountName
          type: System.String
          description: ''
        return:
          type: System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.UserDTOs.ADUserDTO}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAdUser*
      implements:
      - es.efor.PryBase.Users.Model.Services.IUserService.GetAdUser(System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllUsers
      commentId: M:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllUsers
      language: CSharp
      name:
        CSharp: GetAllUsers()
        VB: GetAllUsers()
      nameWithType:
        CSharp: UserService.GetAllUsers()
        VB: UserService.GetAllUsers()
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllUsers()
        VB: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllUsers()
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.UsersServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetAllUsers
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
        startLine: 63
      summary: "\nReturns a list of registered users\n"
      example: []
      syntax:
        content:
          CSharp: public Task<List<UserDTO>> GetAllUsers()
          VB: Public Function GetAllUsers As Task(Of List(Of UserDTO))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO}}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllUsers*
      implements:
      - es.efor.PryBase.Users.Model.Services.IUserService.GetAllUsers
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserByName(System.String)
      commentId: M:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserByName(System.String)
      language: CSharp
      name:
        CSharp: GetUserByName(String)
        VB: GetUserByName(String)
      nameWithType:
        CSharp: UserService.GetUserByName(String)
        VB: UserService.GetUserByName(String)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserByName(System.String)
        VB: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserByName(System.String)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.UsersServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetUserByName
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
        startLine: 80
      summary: "\nReturns userDTO for the username specified\n"
      example: []
      syntax:
        content:
          CSharp: public Task<UserDTO> GetUserByName(string user)
          VB: Public Function GetUserByName(user As String) As Task(Of UserDTO)
        parameters:
        - id: user
          type: System.String
          description: Username to lookup
        return:
          type: System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserByName*
      implements:
      - es.efor.PryBase.Users.Model.Services.IUserService.GetUserByName(System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserById(System.Guid)
      commentId: M:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserById(System.Guid)
      language: CSharp
      name:
        CSharp: GetUserById(Guid)
        VB: GetUserById(Guid)
      nameWithType:
        CSharp: UserService.GetUserById(Guid)
        VB: UserService.GetUserById(Guid)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserById(System.Guid)
        VB: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserById(System.Guid)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.UsersServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetUserById
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
        startLine: 95
      summary: "\nReturns userDTO for the user with the specified id\n"
      example: []
      syntax:
        content:
          CSharp: public Task<UserDTO> GetUserById(Guid id)
          VB: Public Function GetUserById(id As Guid) As Task(Of UserDTO)
        parameters:
        - id: id
          type: System.Guid
          description: User ID to lookup
        return:
          type: System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserById*
      implements:
      - es.efor.PryBase.Users.Model.Services.IUserService.GetUserById(System.Guid)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUsersByDepartment(System.Int32)
      commentId: M:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUsersByDepartment(System.Int32)
      language: CSharp
      name:
        CSharp: GetUsersByDepartment(Int32)
        VB: GetUsersByDepartment(Int32)
      nameWithType:
        CSharp: UserService.GetUsersByDepartment(Int32)
        VB: UserService.GetUsersByDepartment(Int32)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUsersByDepartment(System.Int32)
        VB: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUsersByDepartment(System.Int32)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.UsersServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetUsersByDepartment
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
        startLine: 110
      summary: "\nReturns number of users by department Id\n"
      example: []
      syntax:
        content:
          CSharp: public Task<int> GetUsersByDepartment(int departmentId)
          VB: Public Function GetUsersByDepartment(departmentId As Integer) As Task(Of Integer)
        parameters:
        - id: departmentId
          type: System.Int32
          description: Department Id
        return:
          type: System.Threading.Tasks.Task{System.Int32}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUsersByDepartment*
      implements:
      - es.efor.PryBase.Users.Model.Services.IUserService.GetUsersByDepartment(System.Int32)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllAD(System.String)
      commentId: M:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllAD(System.String)
      language: CSharp
      name:
        CSharp: GetAllAD(String)
        VB: GetAllAD(String)
      nameWithType:
        CSharp: UserService.GetAllAD(String)
        VB: UserService.GetAllAD(String)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllAD(System.String)
        VB: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllAD(System.String)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.UsersServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetAllAD
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
        startLine: 121
      summary: "\nReturn all users of AD\n"
      example: []
      syntax:
        content:
          CSharp: public Task<List<ADUserDTO>> GetAllAD(string ADGroup)
          VB: Public Function GetAllAD(ADGroup As String) As Task(Of List(Of ADUserDTO))
        parameters:
        - id: ADGroup
          type: System.String
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.UserDTOs.ADUserDTO}}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllAD*
      implements:
      - es.efor.PryBase.Users.Model.Services.IUserService.GetAllAD(System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllDepartments
      commentId: M:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllDepartments
      language: CSharp
      name:
        CSharp: GetAllDepartments()
        VB: GetAllDepartments()
      nameWithType:
        CSharp: UserService.GetAllDepartments()
        VB: UserService.GetAllDepartments()
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllDepartments()
        VB: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllDepartments()
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.UsersServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetAllDepartments
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
        startLine: 130
      summary: "\nReturns all departments\n"
      example: []
      syntax:
        content:
          CSharp: public Task<List<UserDepartmentDTO>> GetAllDepartments()
          VB: Public Function GetAllDepartments As Task(Of List(Of UserDepartmentDTO))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO}}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllDepartments*
      implements:
      - es.efor.PryBase.Users.Model.Services.IUserService.GetAllDepartments
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllLevels
      commentId: M:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllLevels
      language: CSharp
      name:
        CSharp: GetAllLevels()
        VB: GetAllLevels()
      nameWithType:
        CSharp: UserService.GetAllLevels()
        VB: UserService.GetAllLevels()
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllLevels()
        VB: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllLevels()
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.UsersServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetAllLevels
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
        startLine: 140
      summary: "\nReturns all levels\n"
      example: []
      syntax:
        content:
          CSharp: public Task<List<UserLevelDTO>> GetAllLevels()
          VB: Public Function GetAllLevels As Task(Of List(Of UserLevelDTO))
        return:
          type: System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserLevelDTO}}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllLevels*
      implements:
      - es.efor.PryBase.Users.Model.Services.IUserService.GetAllLevels
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetUser(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO)
      commentId: M:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetUser(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO)
      language: CSharp
      name:
        CSharp: SetUser(UserDTO)
        VB: SetUser(UserDTO)
      nameWithType:
        CSharp: UserService.SetUser(UserDTO)
        VB: UserService.SetUser(UserDTO)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetUser(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO)
        VB: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetUser(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.UsersServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: SetUser
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
        startLine: 152
      summary: "\nSaves the user to DB. If the user already exist, update it\nSearch for the user is by Name or ID\n"
      example: []
      syntax:
        content:
          CSharp: public Task<bool> SetUser(UserDTO user)
          VB: Public Function SetUser(user As UserDTO) As Task(Of Boolean)
        parameters:
        - id: user
          type: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO
          description: User to save
        return:
          type: System.Threading.Tasks.Task{System.Boolean}
          description: Status of the task
      overload: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetUser*
      implements:
      - es.efor.PryBase.Users.Model.Services.IUserService.SetUser(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetDepartmentById(System.Int32)
      commentId: M:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetDepartmentById(System.Int32)
      language: CSharp
      name:
        CSharp: GetDepartmentById(Int32)
        VB: GetDepartmentById(Int32)
      nameWithType:
        CSharp: UserService.GetDepartmentById(Int32)
        VB: UserService.GetDepartmentById(Int32)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetDepartmentById(System.Int32)
        VB: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetDepartmentById(System.Int32)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.UsersServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetDepartmentById
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
        startLine: 195
      summary: "\nReturns UserDepartmentDTO for the department with the specified id\n"
      example: []
      syntax:
        content:
          CSharp: public Task<UserDepartmentDTO> GetDepartmentById(int id)
          VB: Public Function GetDepartmentById(id As Integer) As Task(Of UserDepartmentDTO)
        parameters:
        - id: id
          type: System.Int32
          description: Department ID to lookup
        return:
          type: System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetDepartmentById*
      implements:
      - es.efor.PryBase.Users.Model.Services.IUserService.GetDepartmentById(System.Int32)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetDepartment(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO)
      commentId: M:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetDepartment(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO)
      language: CSharp
      name:
        CSharp: SetDepartment(UserDepartmentDTO)
        VB: SetDepartment(UserDepartmentDTO)
      nameWithType:
        CSharp: UserService.SetDepartment(UserDepartmentDTO)
        VB: UserService.SetDepartment(UserDepartmentDTO)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetDepartment(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO)
        VB: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetDepartment(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.UsersServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: SetDepartment
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
        startLine: 206
      summary: "\nSaves the department to DB. If the department already exist, update it\n"
      example: []
      syntax:
        content:
          CSharp: public Task<bool> SetDepartment(UserDepartmentDTO department)
          VB: Public Function SetDepartment(department As UserDepartmentDTO) As Task(Of Boolean)
        parameters:
        - id: department
          type: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO
          description: Department to save
        return:
          type: System.Threading.Tasks.Task{System.Boolean}
          description: Status of the task
      overload: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetDepartment*
      implements:
      - es.efor.PryBase.Users.Model.Services.IUserService.SetDepartment(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetLevelById(System.Int32)
      commentId: M:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetLevelById(System.Int32)
      language: CSharp
      name:
        CSharp: GetLevelById(Int32)
        VB: GetLevelById(Int32)
      nameWithType:
        CSharp: UserService.GetLevelById(Int32)
        VB: UserService.GetLevelById(Int32)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetLevelById(System.Int32)
        VB: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetLevelById(System.Int32)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.UsersServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: GetLevelById
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
        startLine: 239
      summary: "\nReturns UserLevelDTO for the level with the specified id\n"
      example: []
      syntax:
        content:
          CSharp: public Task<UserLevelDTO> GetLevelById(int id)
          VB: Public Function GetLevelById(id As Integer) As Task(Of UserLevelDTO)
        parameters:
        - id: id
          type: System.Int32
          description: Level ID to lookup
        return:
          type: System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserLevelDTO}
          description: ''
      overload: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetLevelById*
      implements:
      - es.efor.PryBase.Users.Model.Services.IUserService.GetLevelById(System.Int32)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteUser(System.Guid,System.String)
      commentId: M:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteUser(System.Guid,System.String)
      language: CSharp
      name:
        CSharp: DeleteUser(Guid, String)
        VB: DeleteUser(Guid, String)
      nameWithType:
        CSharp: UserService.DeleteUser(Guid, String)
        VB: UserService.DeleteUser(Guid, String)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteUser(System.Guid, System.String)
        VB: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteUser(System.Guid, System.String)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.UsersServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: DeleteUser
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
        startLine: 251
      summary: "\nLogic delete the user from DB. \n"
      example: []
      syntax:
        content:
          CSharp: public Task<bool> DeleteUser(Guid id, string username)
          VB: Public Function DeleteUser(id As Guid, username As String) As Task(Of Boolean)
        parameters:
        - id: id
          type: System.Guid
          description: ''
        - id: username
          type: System.String
          description: Username that requests the delete
        return:
          type: System.Threading.Tasks.Task{System.Boolean}
          description: Status of the task
      overload: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteUser*
      implements:
      - es.efor.PryBase.Users.Model.Services.IUserService.DeleteUser(System.Guid,System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteDepartment(System.Int32,System.String)
      commentId: M:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteDepartment(System.Int32,System.String)
      language: CSharp
      name:
        CSharp: DeleteDepartment(Int32, String)
        VB: DeleteDepartment(Int32, String)
      nameWithType:
        CSharp: UserService.DeleteDepartment(Int32, String)
        VB: UserService.DeleteDepartment(Int32, String)
      qualifiedName:
        CSharp: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteDepartment(System.Int32, System.String)
        VB: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteDepartment(System.Int32, System.String)
      type: Method
      assemblies:
      - es.efor.PryBase.Users.Business
      namespace: es.efor.PryBase.Users.Model.Services.UsersServices
      source:
        remote:
          path: es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
          branch: master
          repo: https://dev.azure.com/EforDevelop/PryBase/_git/PryBase_Med
        id: DeleteDepartment
        path: ../es.efor.PryBase.Users.Business/Services/UsersServices/UserService.cs
        startLine: 281
      summary: "\nLogic delete the department from DB. \n"
      example: []
      syntax:
        content:
          CSharp: public Task<bool> DeleteDepartment(int id, string username)
          VB: Public Function DeleteDepartment(id As Integer, username As String) As Task(Of Boolean)
        parameters:
        - id: id
          type: System.Int32
          description: Department ID to delete
        - id: username
          type: System.String
          description: Username that requests the delete
        return:
          type: System.Threading.Tasks.Task{System.Boolean}
          description: Status of the task
      overload: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteDepartment*
      implements:
      - es.efor.PryBase.Users.Model.Services.IUserService.DeleteDepartment(System.Int32,System.String)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
references:
  AutoMapper:
    name:
      CSharp:
      - name: AutoMapper
        nameWithType: AutoMapper
        qualifiedName: AutoMapper
        isExternal: true
      VB:
      - name: AutoMapper
        nameWithType: AutoMapper
        qualifiedName: AutoMapper
    isDefinition: true
    commentId: N:AutoMapper
  AutoMapper.Profile:
    name:
      CSharp:
      - id: AutoMapper.Profile
        name: Profile
        nameWithType: Profile
        qualifiedName: AutoMapper.Profile
        isExternal: true
      VB:
      - id: AutoMapper.Profile
        name: Profile
        nameWithType: Profile
        qualifiedName: AutoMapper.Profile
        isExternal: true
    isDefinition: true
    parent: AutoMapper
    commentId: T:AutoMapper.Profile
  AutoMapper.Profile.DisableConstructorMapping:
    name:
      CSharp:
      - id: AutoMapper.Profile.DisableConstructorMapping
        name: DisableConstructorMapping
        nameWithType: Profile.DisableConstructorMapping
        qualifiedName: AutoMapper.Profile.DisableConstructorMapping
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: AutoMapper.Profile.DisableConstructorMapping
        name: DisableConstructorMapping
        nameWithType: Profile.DisableConstructorMapping
        qualifiedName: AutoMapper.Profile.DisableConstructorMapping
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: M:AutoMapper.Profile.DisableConstructorMapping
  AutoMapper.Profile.ForAllMaps(System.Action{AutoMapper.TypeMap,AutoMapper.IMappingExpression}):
    name:
      CSharp:
      - id: AutoMapper.Profile.ForAllMaps(System.Action{AutoMapper.TypeMap,AutoMapper.IMappingExpression})
        name: ForAllMaps
        nameWithType: Profile.ForAllMaps
        qualifiedName: AutoMapper.Profile.ForAllMaps
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: AutoMapper.TypeMap
        name: TypeMap
        nameWithType: TypeMap
        qualifiedName: AutoMapper.TypeMap
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: AutoMapper.IMappingExpression
        name: IMappingExpression
        nameWithType: IMappingExpression
        qualifiedName: AutoMapper.IMappingExpression
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: AutoMapper.Profile.ForAllMaps(System.Action{AutoMapper.TypeMap,AutoMapper.IMappingExpression})
        name: ForAllMaps
        nameWithType: Profile.ForAllMaps
        qualifiedName: AutoMapper.Profile.ForAllMaps
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: AutoMapper.TypeMap
        name: TypeMap
        nameWithType: TypeMap
        qualifiedName: AutoMapper.TypeMap
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: AutoMapper.IMappingExpression
        name: IMappingExpression
        nameWithType: IMappingExpression
        qualifiedName: AutoMapper.IMappingExpression
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: M:AutoMapper.Profile.ForAllMaps(System.Action{AutoMapper.TypeMap,AutoMapper.IMappingExpression})
  ? AutoMapper.Profile.ForAllPropertyMaps(System.Func{AutoMapper.PropertyMap,System.Boolean},System.Action{AutoMapper.PropertyMap,AutoMapper.IMemberConfigurationExpression})
  : name:
      CSharp:
      - id: AutoMapper.Profile.ForAllPropertyMaps(System.Func{AutoMapper.PropertyMap,System.Boolean},System.Action{AutoMapper.PropertyMap,AutoMapper.IMemberConfigurationExpression})
        name: ForAllPropertyMaps
        nameWithType: Profile.ForAllPropertyMaps
        qualifiedName: AutoMapper.Profile.ForAllPropertyMaps
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: AutoMapper.PropertyMap
        name: PropertyMap
        nameWithType: PropertyMap
        qualifiedName: AutoMapper.PropertyMap
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: AutoMapper.PropertyMap
        name: PropertyMap
        nameWithType: PropertyMap
        qualifiedName: AutoMapper.PropertyMap
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: AutoMapper.IMemberConfigurationExpression
        name: IMemberConfigurationExpression
        nameWithType: IMemberConfigurationExpression
        qualifiedName: AutoMapper.IMemberConfigurationExpression
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: AutoMapper.Profile.ForAllPropertyMaps(System.Func{AutoMapper.PropertyMap,System.Boolean},System.Action{AutoMapper.PropertyMap,AutoMapper.IMemberConfigurationExpression})
        name: ForAllPropertyMaps
        nameWithType: Profile.ForAllPropertyMaps
        qualifiedName: AutoMapper.Profile.ForAllPropertyMaps
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: AutoMapper.PropertyMap
        name: PropertyMap
        nameWithType: PropertyMap
        qualifiedName: AutoMapper.PropertyMap
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: System.Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: AutoMapper.PropertyMap
        name: PropertyMap
        nameWithType: PropertyMap
        qualifiedName: AutoMapper.PropertyMap
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: AutoMapper.IMemberConfigurationExpression
        name: IMemberConfigurationExpression
        nameWithType: IMemberConfigurationExpression
        qualifiedName: AutoMapper.IMemberConfigurationExpression
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: M:AutoMapper.Profile.ForAllPropertyMaps(System.Func{AutoMapper.PropertyMap,System.Boolean},System.Action{AutoMapper.PropertyMap,AutoMapper.IMemberConfigurationExpression})
  AutoMapper.Profile.CreateMap``2:
    name:
      CSharp:
      - id: AutoMapper.Profile.CreateMap``2
        name: CreateMap<TSource, TDestination>
        nameWithType: Profile.CreateMap<TSource, TDestination>
        qualifiedName: AutoMapper.Profile.CreateMap<TSource, TDestination>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: AutoMapper.Profile.CreateMap``2
        name: CreateMap(Of TSource, TDestination)
        nameWithType: Profile.CreateMap(Of TSource, TDestination)
        qualifiedName: AutoMapper.Profile.CreateMap(Of TSource, TDestination)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: M:AutoMapper.Profile.CreateMap``2
  AutoMapper.Profile.CreateMap``2(AutoMapper.MemberList):
    name:
      CSharp:
      - id: AutoMapper.Profile.CreateMap``2(AutoMapper.MemberList)
        name: CreateMap<TSource, TDestination>
        nameWithType: Profile.CreateMap<TSource, TDestination>
        qualifiedName: AutoMapper.Profile.CreateMap<TSource, TDestination>
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: AutoMapper.MemberList
        name: MemberList
        nameWithType: MemberList
        qualifiedName: AutoMapper.MemberList
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: AutoMapper.Profile.CreateMap``2(AutoMapper.MemberList)
        name: CreateMap(Of TSource, TDestination)
        nameWithType: Profile.CreateMap(Of TSource, TDestination)
        qualifiedName: AutoMapper.Profile.CreateMap(Of TSource, TDestination)
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: AutoMapper.MemberList
        name: MemberList
        nameWithType: MemberList
        qualifiedName: AutoMapper.MemberList
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: M:AutoMapper.Profile.CreateMap``2(AutoMapper.MemberList)
  AutoMapper.Profile.CreateMap(System.Type,System.Type):
    name:
      CSharp:
      - id: AutoMapper.Profile.CreateMap(System.Type,System.Type)
        name: CreateMap
        nameWithType: Profile.CreateMap
        qualifiedName: AutoMapper.Profile.CreateMap
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: AutoMapper.Profile.CreateMap(System.Type,System.Type)
        name: CreateMap
        nameWithType: Profile.CreateMap
        qualifiedName: AutoMapper.Profile.CreateMap
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: M:AutoMapper.Profile.CreateMap(System.Type,System.Type)
  AutoMapper.Profile.CreateMap(System.Type,System.Type,AutoMapper.MemberList):
    name:
      CSharp:
      - id: AutoMapper.Profile.CreateMap(System.Type,System.Type,AutoMapper.MemberList)
        name: CreateMap
        nameWithType: Profile.CreateMap
        qualifiedName: AutoMapper.Profile.CreateMap
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: AutoMapper.MemberList
        name: MemberList
        nameWithType: MemberList
        qualifiedName: AutoMapper.MemberList
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: AutoMapper.Profile.CreateMap(System.Type,System.Type,AutoMapper.MemberList)
        name: CreateMap
        nameWithType: Profile.CreateMap
        qualifiedName: AutoMapper.Profile.CreateMap
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: AutoMapper.MemberList
        name: MemberList
        nameWithType: MemberList
        qualifiedName: AutoMapper.MemberList
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: M:AutoMapper.Profile.CreateMap(System.Type,System.Type,AutoMapper.MemberList)
  AutoMapper.Profile.ClearPrefixes:
    name:
      CSharp:
      - id: AutoMapper.Profile.ClearPrefixes
        name: ClearPrefixes
        nameWithType: Profile.ClearPrefixes
        qualifiedName: AutoMapper.Profile.ClearPrefixes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: AutoMapper.Profile.ClearPrefixes
        name: ClearPrefixes
        nameWithType: Profile.ClearPrefixes
        qualifiedName: AutoMapper.Profile.ClearPrefixes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: M:AutoMapper.Profile.ClearPrefixes
  AutoMapper.Profile.RecognizeAlias(System.String,System.String):
    name:
      CSharp:
      - id: AutoMapper.Profile.RecognizeAlias(System.String,System.String)
        name: RecognizeAlias
        nameWithType: Profile.RecognizeAlias
        qualifiedName: AutoMapper.Profile.RecognizeAlias
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: AutoMapper.Profile.RecognizeAlias(System.String,System.String)
        name: RecognizeAlias
        nameWithType: Profile.RecognizeAlias
        qualifiedName: AutoMapper.Profile.RecognizeAlias
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: M:AutoMapper.Profile.RecognizeAlias(System.String,System.String)
  AutoMapper.Profile.ReplaceMemberName(System.String,System.String):
    name:
      CSharp:
      - id: AutoMapper.Profile.ReplaceMemberName(System.String,System.String)
        name: ReplaceMemberName
        nameWithType: Profile.ReplaceMemberName
        qualifiedName: AutoMapper.Profile.ReplaceMemberName
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: AutoMapper.Profile.ReplaceMemberName(System.String,System.String)
        name: ReplaceMemberName
        nameWithType: Profile.ReplaceMemberName
        qualifiedName: AutoMapper.Profile.ReplaceMemberName
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: M:AutoMapper.Profile.ReplaceMemberName(System.String,System.String)
  AutoMapper.Profile.RecognizePrefixes(System.String[]):
    name:
      CSharp:
      - id: AutoMapper.Profile.RecognizePrefixes(System.String[])
        name: RecognizePrefixes
        nameWithType: Profile.RecognizePrefixes
        qualifiedName: AutoMapper.Profile.RecognizePrefixes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: AutoMapper.Profile.RecognizePrefixes(System.String[])
        name: RecognizePrefixes
        nameWithType: Profile.RecognizePrefixes
        qualifiedName: AutoMapper.Profile.RecognizePrefixes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: M:AutoMapper.Profile.RecognizePrefixes(System.String[])
  AutoMapper.Profile.RecognizePostfixes(System.String[]):
    name:
      CSharp:
      - id: AutoMapper.Profile.RecognizePostfixes(System.String[])
        name: RecognizePostfixes
        nameWithType: Profile.RecognizePostfixes
        qualifiedName: AutoMapper.Profile.RecognizePostfixes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: AutoMapper.Profile.RecognizePostfixes(System.String[])
        name: RecognizePostfixes
        nameWithType: Profile.RecognizePostfixes
        qualifiedName: AutoMapper.Profile.RecognizePostfixes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: M:AutoMapper.Profile.RecognizePostfixes(System.String[])
  AutoMapper.Profile.RecognizeDestinationPrefixes(System.String[]):
    name:
      CSharp:
      - id: AutoMapper.Profile.RecognizeDestinationPrefixes(System.String[])
        name: RecognizeDestinationPrefixes
        nameWithType: Profile.RecognizeDestinationPrefixes
        qualifiedName: AutoMapper.Profile.RecognizeDestinationPrefixes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: AutoMapper.Profile.RecognizeDestinationPrefixes(System.String[])
        name: RecognizeDestinationPrefixes
        nameWithType: Profile.RecognizeDestinationPrefixes
        qualifiedName: AutoMapper.Profile.RecognizeDestinationPrefixes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: M:AutoMapper.Profile.RecognizeDestinationPrefixes(System.String[])
  AutoMapper.Profile.RecognizeDestinationPostfixes(System.String[]):
    name:
      CSharp:
      - id: AutoMapper.Profile.RecognizeDestinationPostfixes(System.String[])
        name: RecognizeDestinationPostfixes
        nameWithType: Profile.RecognizeDestinationPostfixes
        qualifiedName: AutoMapper.Profile.RecognizeDestinationPostfixes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: AutoMapper.Profile.RecognizeDestinationPostfixes(System.String[])
        name: RecognizeDestinationPostfixes
        nameWithType: Profile.RecognizeDestinationPostfixes
        qualifiedName: AutoMapper.Profile.RecognizeDestinationPostfixes
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: M:AutoMapper.Profile.RecognizeDestinationPostfixes(System.String[])
  AutoMapper.Profile.AddGlobalIgnore(System.String):
    name:
      CSharp:
      - id: AutoMapper.Profile.AddGlobalIgnore(System.String)
        name: AddGlobalIgnore
        nameWithType: Profile.AddGlobalIgnore
        qualifiedName: AutoMapper.Profile.AddGlobalIgnore
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: AutoMapper.Profile.AddGlobalIgnore(System.String)
        name: AddGlobalIgnore
        nameWithType: Profile.AddGlobalIgnore
        qualifiedName: AutoMapper.Profile.AddGlobalIgnore
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: M:AutoMapper.Profile.AddGlobalIgnore(System.String)
  AutoMapper.Profile.AddMemberConfiguration:
    name:
      CSharp:
      - id: AutoMapper.Profile.AddMemberConfiguration
        name: AddMemberConfiguration
        nameWithType: Profile.AddMemberConfiguration
        qualifiedName: AutoMapper.Profile.AddMemberConfiguration
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: AutoMapper.Profile.AddMemberConfiguration
        name: AddMemberConfiguration
        nameWithType: Profile.AddMemberConfiguration
        qualifiedName: AutoMapper.Profile.AddMemberConfiguration
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: M:AutoMapper.Profile.AddMemberConfiguration
  AutoMapper.Profile.IncludeSourceExtensionMethods(System.Type):
    name:
      CSharp:
      - id: AutoMapper.Profile.IncludeSourceExtensionMethods(System.Type)
        name: IncludeSourceExtensionMethods
        nameWithType: Profile.IncludeSourceExtensionMethods
        qualifiedName: AutoMapper.Profile.IncludeSourceExtensionMethods
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: AutoMapper.Profile.IncludeSourceExtensionMethods(System.Type)
        name: IncludeSourceExtensionMethods
        nameWithType: Profile.IncludeSourceExtensionMethods
        qualifiedName: AutoMapper.Profile.IncludeSourceExtensionMethods
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: M:AutoMapper.Profile.IncludeSourceExtensionMethods(System.Type)
  AutoMapper.Profile.DefaultMemberConfig:
    name:
      CSharp:
      - id: AutoMapper.Profile.DefaultMemberConfig
        name: DefaultMemberConfig
        nameWithType: Profile.DefaultMemberConfig
        qualifiedName: AutoMapper.Profile.DefaultMemberConfig
        isExternal: true
      VB:
      - id: AutoMapper.Profile.DefaultMemberConfig
        name: DefaultMemberConfig
        nameWithType: Profile.DefaultMemberConfig
        qualifiedName: AutoMapper.Profile.DefaultMemberConfig
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.DefaultMemberConfig
  AutoMapper.Profile.ConstructorMappingEnabled:
    name:
      CSharp:
      - id: AutoMapper.Profile.ConstructorMappingEnabled
        name: ConstructorMappingEnabled
        nameWithType: Profile.ConstructorMappingEnabled
        qualifiedName: AutoMapper.Profile.ConstructorMappingEnabled
        isExternal: true
      VB:
      - id: AutoMapper.Profile.ConstructorMappingEnabled
        name: ConstructorMappingEnabled
        nameWithType: Profile.ConstructorMappingEnabled
        qualifiedName: AutoMapper.Profile.ConstructorMappingEnabled
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.ConstructorMappingEnabled
  AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#AllPropertyMapActions:
    name:
      CSharp:
      - id: AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#AllPropertyMapActions
        name: IProfileConfiguration.AllPropertyMapActions
        nameWithType: Profile.IProfileConfiguration.AllPropertyMapActions
        qualifiedName: AutoMapper.Profile.AutoMapper.Configuration.IProfileConfiguration.AllPropertyMapActions
        isExternal: true
      VB:
      - id: AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#AllPropertyMapActions
        name: AutoMapper.Configuration.IProfileConfiguration.AllPropertyMapActions
        nameWithType: Profile.AutoMapper.Configuration.IProfileConfiguration.AllPropertyMapActions
        qualifiedName: AutoMapper.Profile.AutoMapper.Configuration.IProfileConfiguration.AllPropertyMapActions
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#AllPropertyMapActions
  AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#AllTypeMapActions:
    name:
      CSharp:
      - id: AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#AllTypeMapActions
        name: IProfileConfiguration.AllTypeMapActions
        nameWithType: Profile.IProfileConfiguration.AllTypeMapActions
        qualifiedName: AutoMapper.Profile.AutoMapper.Configuration.IProfileConfiguration.AllTypeMapActions
        isExternal: true
      VB:
      - id: AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#AllTypeMapActions
        name: AutoMapper.Configuration.IProfileConfiguration.AllTypeMapActions
        nameWithType: Profile.AutoMapper.Configuration.IProfileConfiguration.AllTypeMapActions
        qualifiedName: AutoMapper.Profile.AutoMapper.Configuration.IProfileConfiguration.AllTypeMapActions
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#AllTypeMapActions
  AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#GlobalIgnores:
    name:
      CSharp:
      - id: AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#GlobalIgnores
        name: IProfileConfiguration.GlobalIgnores
        nameWithType: Profile.IProfileConfiguration.GlobalIgnores
        qualifiedName: AutoMapper.Profile.AutoMapper.Configuration.IProfileConfiguration.GlobalIgnores
        isExternal: true
      VB:
      - id: AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#GlobalIgnores
        name: AutoMapper.Configuration.IProfileConfiguration.GlobalIgnores
        nameWithType: Profile.AutoMapper.Configuration.IProfileConfiguration.GlobalIgnores
        qualifiedName: AutoMapper.Profile.AutoMapper.Configuration.IProfileConfiguration.GlobalIgnores
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#GlobalIgnores
  AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#MemberConfigurations:
    name:
      CSharp:
      - id: AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#MemberConfigurations
        name: IProfileConfiguration.MemberConfigurations
        nameWithType: Profile.IProfileConfiguration.MemberConfigurations
        qualifiedName: AutoMapper.Profile.AutoMapper.Configuration.IProfileConfiguration.MemberConfigurations
        isExternal: true
      VB:
      - id: AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#MemberConfigurations
        name: AutoMapper.Configuration.IProfileConfiguration.MemberConfigurations
        nameWithType: Profile.AutoMapper.Configuration.IProfileConfiguration.MemberConfigurations
        qualifiedName: AutoMapper.Profile.AutoMapper.Configuration.IProfileConfiguration.MemberConfigurations
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#MemberConfigurations
  AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#SourceExtensionMethods:
    name:
      CSharp:
      - id: AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#SourceExtensionMethods
        name: IProfileConfiguration.SourceExtensionMethods
        nameWithType: Profile.IProfileConfiguration.SourceExtensionMethods
        qualifiedName: AutoMapper.Profile.AutoMapper.Configuration.IProfileConfiguration.SourceExtensionMethods
        isExternal: true
      VB:
      - id: AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#SourceExtensionMethods
        name: AutoMapper.Configuration.IProfileConfiguration.SourceExtensionMethods
        nameWithType: Profile.AutoMapper.Configuration.IProfileConfiguration.SourceExtensionMethods
        qualifiedName: AutoMapper.Profile.AutoMapper.Configuration.IProfileConfiguration.SourceExtensionMethods
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#SourceExtensionMethods
  AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#TypeMapConfigs:
    name:
      CSharp:
      - id: AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#TypeMapConfigs
        name: IProfileConfiguration.TypeMapConfigs
        nameWithType: Profile.IProfileConfiguration.TypeMapConfigs
        qualifiedName: AutoMapper.Profile.AutoMapper.Configuration.IProfileConfiguration.TypeMapConfigs
        isExternal: true
      VB:
      - id: AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#TypeMapConfigs
        name: AutoMapper.Configuration.IProfileConfiguration.TypeMapConfigs
        nameWithType: Profile.AutoMapper.Configuration.IProfileConfiguration.TypeMapConfigs
        qualifiedName: AutoMapper.Profile.AutoMapper.Configuration.IProfileConfiguration.TypeMapConfigs
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#TypeMapConfigs
  AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#OpenTypeMapConfigs:
    name:
      CSharp:
      - id: AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#OpenTypeMapConfigs
        name: IProfileConfiguration.OpenTypeMapConfigs
        nameWithType: Profile.IProfileConfiguration.OpenTypeMapConfigs
        qualifiedName: AutoMapper.Profile.AutoMapper.Configuration.IProfileConfiguration.OpenTypeMapConfigs
        isExternal: true
      VB:
      - id: AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#OpenTypeMapConfigs
        name: AutoMapper.Configuration.IProfileConfiguration.OpenTypeMapConfigs
        nameWithType: Profile.AutoMapper.Configuration.IProfileConfiguration.OpenTypeMapConfigs
        qualifiedName: AutoMapper.Profile.AutoMapper.Configuration.IProfileConfiguration.OpenTypeMapConfigs
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#OpenTypeMapConfigs
  AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#ValueTransformers:
    name:
      CSharp:
      - id: AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#ValueTransformers
        name: IProfileConfiguration.ValueTransformers
        nameWithType: Profile.IProfileConfiguration.ValueTransformers
        qualifiedName: AutoMapper.Profile.AutoMapper.Configuration.IProfileConfiguration.ValueTransformers
        isExternal: true
      VB:
      - id: AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#ValueTransformers
        name: AutoMapper.Configuration.IProfileConfiguration.ValueTransformers
        nameWithType: Profile.AutoMapper.Configuration.IProfileConfiguration.ValueTransformers
        qualifiedName: AutoMapper.Profile.AutoMapper.Configuration.IProfileConfiguration.ValueTransformers
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.AutoMapper#Configuration#IProfileConfiguration#ValueTransformers
  AutoMapper.Profile.ProfileName:
    name:
      CSharp:
      - id: AutoMapper.Profile.ProfileName
        name: ProfileName
        nameWithType: Profile.ProfileName
        qualifiedName: AutoMapper.Profile.ProfileName
        isExternal: true
      VB:
      - id: AutoMapper.Profile.ProfileName
        name: ProfileName
        nameWithType: Profile.ProfileName
        qualifiedName: AutoMapper.Profile.ProfileName
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.ProfileName
  AutoMapper.Profile.AllowNullDestinationValues:
    name:
      CSharp:
      - id: AutoMapper.Profile.AllowNullDestinationValues
        name: AllowNullDestinationValues
        nameWithType: Profile.AllowNullDestinationValues
        qualifiedName: AutoMapper.Profile.AllowNullDestinationValues
        isExternal: true
      VB:
      - id: AutoMapper.Profile.AllowNullDestinationValues
        name: AllowNullDestinationValues
        nameWithType: Profile.AllowNullDestinationValues
        qualifiedName: AutoMapper.Profile.AllowNullDestinationValues
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.AllowNullDestinationValues
  AutoMapper.Profile.AllowNullCollections:
    name:
      CSharp:
      - id: AutoMapper.Profile.AllowNullCollections
        name: AllowNullCollections
        nameWithType: Profile.AllowNullCollections
        qualifiedName: AutoMapper.Profile.AllowNullCollections
        isExternal: true
      VB:
      - id: AutoMapper.Profile.AllowNullCollections
        name: AllowNullCollections
        nameWithType: Profile.AllowNullCollections
        qualifiedName: AutoMapper.Profile.AllowNullCollections
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.AllowNullCollections
  AutoMapper.Profile.EnableNullPropagationForQueryMapping:
    name:
      CSharp:
      - id: AutoMapper.Profile.EnableNullPropagationForQueryMapping
        name: EnableNullPropagationForQueryMapping
        nameWithType: Profile.EnableNullPropagationForQueryMapping
        qualifiedName: AutoMapper.Profile.EnableNullPropagationForQueryMapping
        isExternal: true
      VB:
      - id: AutoMapper.Profile.EnableNullPropagationForQueryMapping
        name: EnableNullPropagationForQueryMapping
        nameWithType: Profile.EnableNullPropagationForQueryMapping
        qualifiedName: AutoMapper.Profile.EnableNullPropagationForQueryMapping
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.EnableNullPropagationForQueryMapping
  AutoMapper.Profile.ShouldMapProperty:
    name:
      CSharp:
      - id: AutoMapper.Profile.ShouldMapProperty
        name: ShouldMapProperty
        nameWithType: Profile.ShouldMapProperty
        qualifiedName: AutoMapper.Profile.ShouldMapProperty
        isExternal: true
      VB:
      - id: AutoMapper.Profile.ShouldMapProperty
        name: ShouldMapProperty
        nameWithType: Profile.ShouldMapProperty
        qualifiedName: AutoMapper.Profile.ShouldMapProperty
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.ShouldMapProperty
  AutoMapper.Profile.ShouldMapField:
    name:
      CSharp:
      - id: AutoMapper.Profile.ShouldMapField
        name: ShouldMapField
        nameWithType: Profile.ShouldMapField
        qualifiedName: AutoMapper.Profile.ShouldMapField
        isExternal: true
      VB:
      - id: AutoMapper.Profile.ShouldMapField
        name: ShouldMapField
        nameWithType: Profile.ShouldMapField
        qualifiedName: AutoMapper.Profile.ShouldMapField
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.ShouldMapField
  AutoMapper.Profile.ShouldMapMethod:
    name:
      CSharp:
      - id: AutoMapper.Profile.ShouldMapMethod
        name: ShouldMapMethod
        nameWithType: Profile.ShouldMapMethod
        qualifiedName: AutoMapper.Profile.ShouldMapMethod
        isExternal: true
      VB:
      - id: AutoMapper.Profile.ShouldMapMethod
        name: ShouldMapMethod
        nameWithType: Profile.ShouldMapMethod
        qualifiedName: AutoMapper.Profile.ShouldMapMethod
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.ShouldMapMethod
  AutoMapper.Profile.ShouldUseConstructor:
    name:
      CSharp:
      - id: AutoMapper.Profile.ShouldUseConstructor
        name: ShouldUseConstructor
        nameWithType: Profile.ShouldUseConstructor
        qualifiedName: AutoMapper.Profile.ShouldUseConstructor
        isExternal: true
      VB:
      - id: AutoMapper.Profile.ShouldUseConstructor
        name: ShouldUseConstructor
        nameWithType: Profile.ShouldUseConstructor
        qualifiedName: AutoMapper.Profile.ShouldUseConstructor
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.ShouldUseConstructor
  AutoMapper.Profile.SourceMemberNamingConvention:
    name:
      CSharp:
      - id: AutoMapper.Profile.SourceMemberNamingConvention
        name: SourceMemberNamingConvention
        nameWithType: Profile.SourceMemberNamingConvention
        qualifiedName: AutoMapper.Profile.SourceMemberNamingConvention
        isExternal: true
      VB:
      - id: AutoMapper.Profile.SourceMemberNamingConvention
        name: SourceMemberNamingConvention
        nameWithType: Profile.SourceMemberNamingConvention
        qualifiedName: AutoMapper.Profile.SourceMemberNamingConvention
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.SourceMemberNamingConvention
  AutoMapper.Profile.DestinationMemberNamingConvention:
    name:
      CSharp:
      - id: AutoMapper.Profile.DestinationMemberNamingConvention
        name: DestinationMemberNamingConvention
        nameWithType: Profile.DestinationMemberNamingConvention
        qualifiedName: AutoMapper.Profile.DestinationMemberNamingConvention
        isExternal: true
      VB:
      - id: AutoMapper.Profile.DestinationMemberNamingConvention
        name: DestinationMemberNamingConvention
        nameWithType: Profile.DestinationMemberNamingConvention
        qualifiedName: AutoMapper.Profile.DestinationMemberNamingConvention
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.DestinationMemberNamingConvention
  AutoMapper.Profile.ValueTransformers:
    name:
      CSharp:
      - id: AutoMapper.Profile.ValueTransformers
        name: ValueTransformers
        nameWithType: Profile.ValueTransformers
        qualifiedName: AutoMapper.Profile.ValueTransformers
        isExternal: true
      VB:
      - id: AutoMapper.Profile.ValueTransformers
        name: ValueTransformers
        nameWithType: Profile.ValueTransformers
        qualifiedName: AutoMapper.Profile.ValueTransformers
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Profile
    commentId: P:AutoMapper.Profile.ValueTransformers
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  AutoMapper.IProfileExpression:
    name:
      CSharp:
      - id: AutoMapper.IProfileExpression
        name: IProfileExpression
        nameWithType: IProfileExpression
        qualifiedName: AutoMapper.IProfileExpression
        isExternal: true
      VB:
      - id: AutoMapper.IProfileExpression
        name: IProfileExpression
        nameWithType: IProfileExpression
        qualifiedName: AutoMapper.IProfileExpression
        isExternal: true
    isDefinition: true
    parent: AutoMapper
    commentId: T:AutoMapper.IProfileExpression
  AutoMapper.Configuration:
    name:
      CSharp:
      - name: AutoMapper.Configuration
        nameWithType: AutoMapper.Configuration
        qualifiedName: AutoMapper.Configuration
        isExternal: true
      VB:
      - name: AutoMapper.Configuration
        nameWithType: AutoMapper.Configuration
        qualifiedName: AutoMapper.Configuration
    isDefinition: true
    commentId: N:AutoMapper.Configuration
  AutoMapper.Configuration.IProfileConfiguration:
    name:
      CSharp:
      - id: AutoMapper.Configuration.IProfileConfiguration
        name: IProfileConfiguration
        nameWithType: IProfileConfiguration
        qualifiedName: AutoMapper.Configuration.IProfileConfiguration
        isExternal: true
      VB:
      - id: AutoMapper.Configuration.IProfileConfiguration
        name: IProfileConfiguration
        nameWithType: IProfileConfiguration
        qualifiedName: AutoMapper.Configuration.IProfileConfiguration
        isExternal: true
    isDefinition: true
    parent: AutoMapper.Configuration
    commentId: T:AutoMapper.Configuration.IProfileConfiguration
  es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(System.Object,Newtonsoft.Json.JsonSerializerSettings):
    name:
      CSharp:
      - id: es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(System.Object,Newtonsoft.Json.JsonSerializerSettings)
        name: CopyMap<TDestination>
        nameWithType: ObjectHelper.CopyMap<TDestination>
        qualifiedName: es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap<TDestination>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Newtonsoft.Json.JsonSerializerSettings
        name: JsonSerializerSettings
        nameWithType: JsonSerializerSettings
        qualifiedName: Newtonsoft.Json.JsonSerializerSettings
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(System.Object,Newtonsoft.Json.JsonSerializerSettings)
        name: CopyMap(Of TDestination)
        nameWithType: ObjectHelper.CopyMap(Of TDestination)
        qualifiedName: es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap(Of TDestination)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Newtonsoft.Json.JsonSerializerSettings
        name: JsonSerializerSettings
        nameWithType: JsonSerializerSettings
        qualifiedName: Newtonsoft.Json.JsonSerializerSettings
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(System.Object,Newtonsoft.Json.JsonSerializerSettings)
  es.efor.Utilities.General.Helpers:
    name:
      CSharp:
      - name: es.efor.Utilities.General.Helpers
        nameWithType: es.efor.Utilities.General.Helpers
        qualifiedName: es.efor.Utilities.General.Helpers
      VB:
      - name: es.efor.Utilities.General.Helpers
        nameWithType: es.efor.Utilities.General.Helpers
        qualifiedName: es.efor.Utilities.General.Helpers
    isDefinition: true
    commentId: N:es.efor.Utilities.General.Helpers
  es.efor.Utilities.General.Helpers.ObjectHelper:
    name:
      CSharp:
      - id: es.efor.Utilities.General.Helpers.ObjectHelper
        name: ObjectHelper
        nameWithType: ObjectHelper
        qualifiedName: es.efor.Utilities.General.Helpers.ObjectHelper
      VB:
      - id: es.efor.Utilities.General.Helpers.ObjectHelper
        name: ObjectHelper
        nameWithType: ObjectHelper
        qualifiedName: es.efor.Utilities.General.Helpers.ObjectHelper
    isDefinition: true
    parent: es.efor.Utilities.General.Helpers
    commentId: T:es.efor.Utilities.General.Helpers.ObjectHelper
  System.Object.es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(Newtonsoft.Json.JsonSerializerSettings):
    name:
      CSharp:
      - id: es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(Newtonsoft.Json.JsonSerializerSettings)
        name: CopyMap<TDestination>
        nameWithType: ObjectHelper.CopyMap<TDestination>
        qualifiedName: es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap<TDestination>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Newtonsoft.Json.JsonSerializerSettings
        name: JsonSerializerSettings
        nameWithType: JsonSerializerSettings
        qualifiedName: Newtonsoft.Json.JsonSerializerSettings
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(Newtonsoft.Json.JsonSerializerSettings)
        name: CopyMap(Of TDestination)
        nameWithType: ObjectHelper.CopyMap(Of TDestination)
        qualifiedName: es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap(Of TDestination)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Newtonsoft.Json.JsonSerializerSettings
        name: JsonSerializerSettings
        nameWithType: JsonSerializerSettings
        qualifiedName: Newtonsoft.Json.JsonSerializerSettings
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(System.Object,Newtonsoft.Json.JsonSerializerSettings)
    parent: es.efor.Utilities.General.Helpers.ObjectHelper
    commentId: M:es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(System.Object,Newtonsoft.Json.JsonSerializerSettings)
  es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(System.Object,Newtonsoft.Json.ReferenceLoopHandling):
    name:
      CSharp:
      - id: es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(System.Object,Newtonsoft.Json.ReferenceLoopHandling)
        name: CopyMap<TDestination>
        nameWithType: ObjectHelper.CopyMap<TDestination>
        qualifiedName: es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap<TDestination>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Newtonsoft.Json.ReferenceLoopHandling
        name: ReferenceLoopHandling
        nameWithType: ReferenceLoopHandling
        qualifiedName: Newtonsoft.Json.ReferenceLoopHandling
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(System.Object,Newtonsoft.Json.ReferenceLoopHandling)
        name: CopyMap(Of TDestination)
        nameWithType: ObjectHelper.CopyMap(Of TDestination)
        qualifiedName: es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap(Of TDestination)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Newtonsoft.Json.ReferenceLoopHandling
        name: ReferenceLoopHandling
        nameWithType: ReferenceLoopHandling
        qualifiedName: Newtonsoft.Json.ReferenceLoopHandling
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: M:es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(System.Object,Newtonsoft.Json.ReferenceLoopHandling)
  System.Object.es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(Newtonsoft.Json.ReferenceLoopHandling):
    name:
      CSharp:
      - id: es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(Newtonsoft.Json.ReferenceLoopHandling)
        name: CopyMap<TDestination>
        nameWithType: ObjectHelper.CopyMap<TDestination>
        qualifiedName: es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap<TDestination>
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Newtonsoft.Json.ReferenceLoopHandling
        name: ReferenceLoopHandling
        nameWithType: ReferenceLoopHandling
        qualifiedName: Newtonsoft.Json.ReferenceLoopHandling
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(Newtonsoft.Json.ReferenceLoopHandling)
        name: CopyMap(Of TDestination)
        nameWithType: ObjectHelper.CopyMap(Of TDestination)
        qualifiedName: es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap(Of TDestination)
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: Newtonsoft.Json.ReferenceLoopHandling
        name: ReferenceLoopHandling
        nameWithType: ReferenceLoopHandling
        qualifiedName: Newtonsoft.Json.ReferenceLoopHandling
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(System.Object,Newtonsoft.Json.ReferenceLoopHandling)
    parent: es.efor.Utilities.General.Helpers.ObjectHelper
    commentId: M:es.efor.Utilities.General.Helpers.ObjectHelper.CopyMap``1(System.Object,Newtonsoft.Json.ReferenceLoopHandling)
  es.efor.PryBase.Users.Model.MapperProfileUsers.#ctor*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.MapperProfileUsers.#ctor*
        name: MapperProfileUsers
        nameWithType: MapperProfileUsers.MapperProfileUsers
        qualifiedName: es.efor.PryBase.Users.Model.MapperProfileUsers.MapperProfileUsers
      VB:
      - id: es.efor.PryBase.Users.Model.MapperProfileUsers.#ctor*
        name: MapperProfileUsers
        nameWithType: MapperProfileUsers.MapperProfileUsers
        qualifiedName: es.efor.PryBase.Users.Model.MapperProfileUsers.MapperProfileUsers
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.MapperProfileUsers.#ctor
  es.efor.PryBase.Users.Model.MapperProfileUsers:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.MapperProfileUsers
        name: MapperProfileUsers
        nameWithType: MapperProfileUsers
        qualifiedName: es.efor.PryBase.Users.Model.MapperProfileUsers
      VB:
      - id: es.efor.PryBase.Users.Model.MapperProfileUsers
        name: MapperProfileUsers
        nameWithType: MapperProfileUsers
        qualifiedName: es.efor.PryBase.Users.Model.MapperProfileUsers
    isDefinition: true
    commentId: T:es.efor.PryBase.Users.Model.MapperProfileUsers
  es.efor.PryBase.Users.Model:
    name:
      CSharp:
      - name: es.efor.PryBase.Users.Model
        nameWithType: es.efor.PryBase.Users.Model
        qualifiedName: es.efor.PryBase.Users.Model
      VB:
      - name: es.efor.PryBase.Users.Model
        nameWithType: es.efor.PryBase.Users.Model
        qualifiedName: es.efor.PryBase.Users.Model
    isDefinition: true
    commentId: N:es.efor.PryBase.Users.Model
  System.Threading.Tasks.Task`1:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Threading.Tasks.Task`1
  System.Threading.Tasks:
    name:
      CSharp:
      - name: System.Threading.Tasks
        nameWithType: System.Threading.Tasks
        qualifiedName: System.Threading.Tasks
        isExternal: true
      VB:
      - name: System.Threading.Tasks
        nameWithType: System.Threading.Tasks
        qualifiedName: System.Threading.Tasks
    isDefinition: true
    commentId: N:System.Threading.Tasks
  System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.UserDTOs.ADUserDTO}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.ADUserDTO
        name: ADUserDTO
        nameWithType: ADUserDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.ADUserDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.ADUserDTO
        name: ADUserDTO
        nameWithType: ADUserDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.ADUserDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.UserDTOs.ADUserDTO}
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  es.efor.PryBase.Users.Model.Services.IUserService.GetAdUser*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAdUser*
        name: GetAdUser
        nameWithType: IUserService.GetAdUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetAdUser
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAdUser*
        name: GetAdUser
        nameWithType: IUserService.GetAdUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetAdUser
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.IUserService.GetAdUser
  System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO}}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO
        name: UserDTO
        nameWithType: UserDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO
        name: UserDTO
        nameWithType: UserDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO}}
  es.efor.PryBase.Users.Model.Services.IUserService.GetAllUsers*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAllUsers*
        name: GetAllUsers
        nameWithType: IUserService.GetAllUsers
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetAllUsers
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAllUsers*
        name: GetAllUsers
        nameWithType: IUserService.GetAllUsers
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetAllUsers
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.IUserService.GetAllUsers
  System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO
        name: UserDTO
        nameWithType: UserDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO
        name: UserDTO
        nameWithType: UserDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO}
  es.efor.PryBase.Users.Model.Services.IUserService.GetUserByName*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetUserByName*
        name: GetUserByName
        nameWithType: IUserService.GetUserByName
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetUserByName
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetUserByName*
        name: GetUserByName
        nameWithType: IUserService.GetUserByName
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetUserByName
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.IUserService.GetUserByName
  System.Guid:
    name:
      CSharp:
      - id: System.Guid
        name: Guid
        nameWithType: Guid
        qualifiedName: System.Guid
        isExternal: true
      VB:
      - id: System.Guid
        name: Guid
        nameWithType: Guid
        qualifiedName: System.Guid
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Guid
  es.efor.PryBase.Users.Model.Services.IUserService.GetUserById*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetUserById*
        name: GetUserById
        nameWithType: IUserService.GetUserById
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetUserById
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetUserById*
        name: GetUserById
        nameWithType: IUserService.GetUserById
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetUserById
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.IUserService.GetUserById
  System.Threading.Tasks.Task{System.Int32}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{System.Int32}
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  es.efor.PryBase.Users.Model.Services.IUserService.GetUsersByDepartment*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetUsersByDepartment*
        name: GetUsersByDepartment
        nameWithType: IUserService.GetUsersByDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetUsersByDepartment
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetUsersByDepartment*
        name: GetUsersByDepartment
        nameWithType: IUserService.GetUsersByDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetUsersByDepartment
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.IUserService.GetUsersByDepartment
  System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.UserDTOs.ADUserDTO}}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.ADUserDTO
        name: ADUserDTO
        nameWithType: ADUserDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.ADUserDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.ADUserDTO
        name: ADUserDTO
        nameWithType: ADUserDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.ADUserDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.UserDTOs.ADUserDTO}}
  es.efor.PryBase.Users.Model.Services.IUserService.GetAllAD*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAllAD*
        name: GetAllAD
        nameWithType: IUserService.GetAllAD
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetAllAD
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAllAD*
        name: GetAllAD
        nameWithType: IUserService.GetAllAD
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetAllAD
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.IUserService.GetAllAD
  System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO}}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO
        name: UserDepartmentDTO
        nameWithType: UserDepartmentDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO
        name: UserDepartmentDTO
        nameWithType: UserDepartmentDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO}}
  es.efor.PryBase.Users.Model.Services.IUserService.GetAllDepartments*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAllDepartments*
        name: GetAllDepartments
        nameWithType: IUserService.GetAllDepartments
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetAllDepartments
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAllDepartments*
        name: GetAllDepartments
        nameWithType: IUserService.GetAllDepartments
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetAllDepartments
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.IUserService.GetAllDepartments
  System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserLevelDTO}}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserLevelDTO
        name: UserLevelDTO
        nameWithType: UserLevelDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserLevelDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserLevelDTO
        name: UserLevelDTO
        nameWithType: UserLevelDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserLevelDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserLevelDTO}}
  es.efor.PryBase.Users.Model.Services.IUserService.GetAllLevels*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAllLevels*
        name: GetAllLevels
        nameWithType: IUserService.GetAllLevels
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetAllLevels
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAllLevels*
        name: GetAllLevels
        nameWithType: IUserService.GetAllLevels
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetAllLevels
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.IUserService.GetAllLevels
  System.Threading.Tasks.Task{System.Boolean}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{System.Boolean}
  es.efor.PryBase.Infraestructure.DTO.UserDTOs:
    name:
      CSharp:
      - name: es.efor.PryBase.Infraestructure.DTO.UserDTOs
        nameWithType: es.efor.PryBase.Infraestructure.DTO.UserDTOs
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs
      VB:
      - name: es.efor.PryBase.Infraestructure.DTO.UserDTOs
        nameWithType: es.efor.PryBase.Infraestructure.DTO.UserDTOs
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs
    isDefinition: true
    commentId: N:es.efor.PryBase.Infraestructure.DTO.UserDTOs
  es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO:
    name:
      CSharp:
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO
        name: UserDTO
        nameWithType: UserDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO
      VB:
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO
        name: UserDTO
        nameWithType: UserDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO
    isDefinition: true
    parent: es.efor.PryBase.Infraestructure.DTO.UserDTOs
    commentId: T:es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO
  es.efor.PryBase.Users.Model.Services.IUserService.SetUser*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.SetUser*
        name: SetUser
        nameWithType: IUserService.SetUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.SetUser
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.SetUser*
        name: SetUser
        nameWithType: IUserService.SetUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.SetUser
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.IUserService.SetUser
  System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO
        name: UserDepartmentDTO
        nameWithType: UserDepartmentDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO
        name: UserDepartmentDTO
        nameWithType: UserDepartmentDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO}
  es.efor.PryBase.Users.Model.Services.IUserService.GetDepartmentById*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetDepartmentById*
        name: GetDepartmentById
        nameWithType: IUserService.GetDepartmentById
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetDepartmentById
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetDepartmentById*
        name: GetDepartmentById
        nameWithType: IUserService.GetDepartmentById
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetDepartmentById
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.IUserService.GetDepartmentById
  es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO:
    name:
      CSharp:
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO
        name: UserDepartmentDTO
        nameWithType: UserDepartmentDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO
      VB:
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO
        name: UserDepartmentDTO
        nameWithType: UserDepartmentDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO
    isDefinition: true
    parent: es.efor.PryBase.Infraestructure.DTO.UserDTOs
    commentId: T:es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO
  es.efor.PryBase.Users.Model.Services.IUserService.SetDepartment*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.SetDepartment*
        name: SetDepartment
        nameWithType: IUserService.SetDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.SetDepartment
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.SetDepartment*
        name: SetDepartment
        nameWithType: IUserService.SetDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.SetDepartment
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.IUserService.SetDepartment
  System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserLevelDTO}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserLevelDTO
        name: UserLevelDTO
        nameWithType: UserLevelDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserLevelDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserLevelDTO
        name: UserLevelDTO
        nameWithType: UserLevelDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserLevelDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserLevelDTO}
  es.efor.PryBase.Users.Model.Services.IUserService.GetLevelById*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetLevelById*
        name: GetLevelById
        nameWithType: IUserService.GetLevelById
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetLevelById
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetLevelById*
        name: GetLevelById
        nameWithType: IUserService.GetLevelById
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetLevelById
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.IUserService.GetLevelById
  es.efor.PryBase.Users.Model.Services.IUserService.DeleteUser*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.DeleteUser*
        name: DeleteUser
        nameWithType: IUserService.DeleteUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.DeleteUser
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.DeleteUser*
        name: DeleteUser
        nameWithType: IUserService.DeleteUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.DeleteUser
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.IUserService.DeleteUser
  es.efor.PryBase.Users.Model.Services.IUserService.DeleteDepartment*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.DeleteDepartment*
        name: DeleteDepartment
        nameWithType: IUserService.DeleteDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.DeleteDepartment
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.DeleteDepartment*
        name: DeleteDepartment
        nameWithType: IUserService.DeleteDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.DeleteDepartment
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.IUserService.DeleteDepartment
  es.efor.PryBase.Users.Model.Services.IUserService:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService
        name: IUserService
        nameWithType: IUserService
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService
        name: IUserService
        nameWithType: IUserService
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services
    commentId: T:es.efor.PryBase.Users.Model.Services.IUserService
  es.efor.PryBase.Users.Model.Services:
    name:
      CSharp:
      - name: es.efor.PryBase.Users.Model.Services
        nameWithType: es.efor.PryBase.Users.Model.Services
        qualifiedName: es.efor.PryBase.Users.Model.Services
      VB:
      - name: es.efor.PryBase.Users.Model.Services
        nameWithType: es.efor.PryBase.Users.Model.Services
        qualifiedName: es.efor.PryBase.Users.Model.Services
    isDefinition: true
    commentId: N:es.efor.PryBase.Users.Model.Services
  System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.MenuDTO}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.MenuDTO
        name: MenuDTO
        nameWithType: MenuDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.MenuDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.MenuDTO
        name: MenuDTO
        nameWithType: MenuDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.MenuDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.MenuDTO}
  es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetMenuByUser*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetMenuByUser*
        name: GetMenuByUser
        nameWithType: IPermissionService.GetMenuByUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetMenuByUser
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetMenuByUser*
        name: GetMenuByUser
        nameWithType: IPermissionService.GetMenuByUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetMenuByUser
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetMenuByUser
  System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.ModuleDTO}}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.ModuleDTO
        name: ModuleDTO
        nameWithType: ModuleDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.ModuleDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.ModuleDTO
        name: ModuleDTO
        nameWithType: ModuleDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.ModuleDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.ModuleDTO}}
  es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllModules*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllModules*
        name: GetAllModules
        nameWithType: IPermissionService.GetAllModules
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllModules
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllModules*
        name: GetAllModules
        nameWithType: IPermissionService.GetAllModules
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllModules
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllModules
  ? System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.FunctionalityDTO}}
  : name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.FunctionalityDTO
        name: FunctionalityDTO
        nameWithType: FunctionalityDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.FunctionalityDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.FunctionalityDTO
        name: FunctionalityDTO
        nameWithType: FunctionalityDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.FunctionalityDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.FunctionalityDTO}}
  es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllFunctionalities*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllFunctionalities*
        name: GetAllFunctionalities
        nameWithType: IPermissionService.GetAllFunctionalities
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllFunctionalities
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllFunctionalities*
        name: GetAllFunctionalities
        nameWithType: IPermissionService.GetAllFunctionalities
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllFunctionalities
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllFunctionalities
  System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.DetailDTO}}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.DetailDTO
        name: DetailDTO
        nameWithType: DetailDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.DetailDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.DetailDTO
        name: DetailDTO
        nameWithType: DetailDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.DetailDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.DetailDTO}}
  es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllDetails*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllDetails*
        name: GetAllDetails
        nameWithType: IPermissionService.GetAllDetails
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllDetails
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllDetails*
        name: GetAllDetails
        nameWithType: IPermissionService.GetAllDetails
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllDetails
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllDetails
  System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO}}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO
        name: PermissionDTO
        nameWithType: PermissionDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO
        name: PermissionDTO
        nameWithType: PermissionDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO}}
  System.String[]:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissions*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissions*
        name: GetPermissions
        nameWithType: IPermissionService.GetPermissions
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissions
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissions*
        name: GetPermissions
        nameWithType: IPermissionService.GetPermissions
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissions
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissions
  System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO}:
    name:
      CSharp:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO
        name: PermissionDTO
        nameWithType: PermissionDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Threading.Tasks.Task`1
        name: Task
        nameWithType: Task
        qualifiedName: System.Threading.Tasks.Task
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO
        name: PermissionDTO
        nameWithType: PermissionDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Threading.Tasks.Task`1
    parent: System.Threading.Tasks
    commentId: T:System.Threading.Tasks.Task{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO}
  es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionByFilter*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionByFilter*
        name: GetPermissionByFilter
        nameWithType: IPermissionService.GetPermissionByFilter
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionByFilter
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionByFilter*
        name: GetPermissionByFilter
        nameWithType: IPermissionService.GetPermissionByFilter
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionByFilter
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionByFilter
  es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionsByDepartment*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionsByDepartment*
        name: GetPermissionsByDepartment
        nameWithType: IPermissionService.GetPermissionsByDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionsByDepartment
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionsByDepartment*
        name: GetPermissionsByDepartment
        nameWithType: IPermissionService.GetPermissionsByDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionsByDepartment
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionsByDepartment
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO
        name: PermissionDTO
        nameWithType: PermissionDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO
        name: PermissionDTO
        nameWithType: PermissionDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO}
  es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.SetPermissions*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.SetPermissions*
        name: SetPermissions
        nameWithType: IPermissionService.SetPermissions
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.SetPermissions
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.SetPermissions*
        name: SetPermissions
        nameWithType: IPermissionService.SetPermissions
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.SetPermissions
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.SetPermissions
  es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService
        name: IPermissionService
        nameWithType: IPermissionService
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService
        name: IPermissionService
        nameWithType: IPermissionService
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.PermissionsServices
    commentId: T:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService
  es.efor.PryBase.Users.Model.Services.PermissionsServices:
    name:
      CSharp:
      - name: es.efor.PryBase.Users.Model.Services.PermissionsServices
        nameWithType: es.efor.PryBase.Users.Model.Services.PermissionsServices
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices
      VB:
      - name: es.efor.PryBase.Users.Model.Services.PermissionsServices
        nameWithType: es.efor.PryBase.Users.Model.Services.PermissionsServices
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices
    isDefinition: true
    commentId: N:es.efor.PryBase.Users.Model.Services.PermissionsServices
  es.efor.PryBase.Data.Context:
    name:
      CSharp:
      - name: es.efor.PryBase.Data.Context
        nameWithType: es.efor.PryBase.Data.Context
        qualifiedName: es.efor.PryBase.Data.Context
      VB:
      - name: es.efor.PryBase.Data.Context
        nameWithType: es.efor.PryBase.Data.Context
        qualifiedName: es.efor.PryBase.Data.Context
    isDefinition: true
    commentId: N:es.efor.PryBase.Data.Context
  es.efor.PryBase.Data.Context.NexusContext:
    name:
      CSharp:
      - id: es.efor.PryBase.Data.Context.NexusContext
        name: NexusContext
        nameWithType: NexusContext
        qualifiedName: es.efor.PryBase.Data.Context.NexusContext
      VB:
      - id: es.efor.PryBase.Data.Context.NexusContext
        name: NexusContext
        nameWithType: NexusContext
        qualifiedName: es.efor.PryBase.Data.Context.NexusContext
    isDefinition: true
    parent: es.efor.PryBase.Data.Context
    commentId: T:es.efor.PryBase.Data.Context.NexusContext
  AutoMapper.IMapper:
    name:
      CSharp:
      - id: AutoMapper.IMapper
        name: IMapper
        nameWithType: IMapper
        qualifiedName: AutoMapper.IMapper
        isExternal: true
      VB:
      - id: AutoMapper.IMapper
        name: IMapper
        nameWithType: IMapper
        qualifiedName: AutoMapper.IMapper
        isExternal: true
    isDefinition: true
    parent: AutoMapper
    commentId: T:AutoMapper.IMapper
  Microsoft.Extensions.Logging.ILogger`1:
    name:
      CSharp:
      - id: Microsoft.Extensions.Logging.ILogger`1
        name: ILogger
        nameWithType: ILogger
        qualifiedName: Microsoft.Extensions.Logging.ILogger
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: TCategoryName
        nameWithType: TCategoryName
        qualifiedName: TCategoryName
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Microsoft.Extensions.Logging.ILogger`1
        name: ILogger
        nameWithType: ILogger
        qualifiedName: Microsoft.Extensions.Logging.ILogger
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: TCategoryName
        nameWithType: TCategoryName
        qualifiedName: TCategoryName
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:Microsoft.Extensions.Logging.ILogger`1
  Microsoft.Extensions.Logging:
    name:
      CSharp:
      - name: Microsoft.Extensions.Logging
        nameWithType: Microsoft.Extensions.Logging
        qualifiedName: Microsoft.Extensions.Logging
        isExternal: true
      VB:
      - name: Microsoft.Extensions.Logging
        nameWithType: Microsoft.Extensions.Logging
        qualifiedName: Microsoft.Extensions.Logging
    isDefinition: true
    commentId: N:Microsoft.Extensions.Logging
  Microsoft.Extensions.Logging.ILogger{es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService}:
    name:
      CSharp:
      - id: Microsoft.Extensions.Logging.ILogger`1
        name: ILogger
        nameWithType: ILogger
        qualifiedName: Microsoft.Extensions.Logging.ILogger
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService
        name: PermissionService
        nameWithType: PermissionService
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Microsoft.Extensions.Logging.ILogger`1
        name: ILogger
        nameWithType: ILogger
        qualifiedName: Microsoft.Extensions.Logging.ILogger
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService
        name: PermissionService
        nameWithType: PermissionService
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Microsoft.Extensions.Logging.ILogger`1
    parent: Microsoft.Extensions.Logging
    commentId: T:Microsoft.Extensions.Logging.ILogger{es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService}
  es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.#ctor*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.#ctor*
        name: PermissionService
        nameWithType: PermissionService.PermissionService
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.PermissionService
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.#ctor*
        name: PermissionService
        nameWithType: PermissionService.PermissionService
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.PermissionService
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.#ctor
  es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetMenuByUser*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetMenuByUser*
        name: GetMenuByUser
        nameWithType: PermissionService.GetMenuByUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetMenuByUser
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetMenuByUser*
        name: GetMenuByUser
        nameWithType: PermissionService.GetMenuByUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetMenuByUser
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetMenuByUser
  es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetMenuByUser(System.String):
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetMenuByUser(System.String)
        name: GetMenuByUser
        nameWithType: IPermissionService.GetMenuByUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetMenuByUser
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetMenuByUser(System.String)
        name: GetMenuByUser
        nameWithType: IPermissionService.GetMenuByUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetMenuByUser
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService
    commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetMenuByUser(System.String)
  es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllModules*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllModules*
        name: GetAllModules
        nameWithType: PermissionService.GetAllModules
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllModules
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllModules*
        name: GetAllModules
        nameWithType: PermissionService.GetAllModules
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllModules
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllModules
  es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllModules:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllModules
        name: GetAllModules
        nameWithType: IPermissionService.GetAllModules
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllModules
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllModules
        name: GetAllModules
        nameWithType: IPermissionService.GetAllModules
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllModules
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService
    commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllModules
  es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllFunctionalities*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllFunctionalities*
        name: GetAllFunctionalities
        nameWithType: PermissionService.GetAllFunctionalities
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllFunctionalities
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllFunctionalities*
        name: GetAllFunctionalities
        nameWithType: PermissionService.GetAllFunctionalities
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllFunctionalities
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllFunctionalities
  es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllFunctionalities:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllFunctionalities
        name: GetAllFunctionalities
        nameWithType: IPermissionService.GetAllFunctionalities
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllFunctionalities
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllFunctionalities
        name: GetAllFunctionalities
        nameWithType: IPermissionService.GetAllFunctionalities
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllFunctionalities
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService
    commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllFunctionalities
  es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllDetails*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllDetails*
        name: GetAllDetails
        nameWithType: PermissionService.GetAllDetails
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllDetails
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllDetails*
        name: GetAllDetails
        nameWithType: PermissionService.GetAllDetails
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllDetails
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetAllDetails
  es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllDetails:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllDetails
        name: GetAllDetails
        nameWithType: IPermissionService.GetAllDetails
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllDetails
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllDetails
        name: GetAllDetails
        nameWithType: IPermissionService.GetAllDetails
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllDetails
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService
    commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetAllDetails
  es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissions*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissions*
        name: GetPermissions
        nameWithType: PermissionService.GetPermissions
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissions
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissions*
        name: GetPermissions
        nameWithType: PermissionService.GetPermissions
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissions
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissions
  es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissions(System.String[],System.Int32):
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissions(System.String[],System.Int32)
        name: GetPermissions
        nameWithType: IPermissionService.GetPermissions
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissions
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissions(System.String[],System.Int32)
        name: GetPermissions
        nameWithType: IPermissionService.GetPermissions
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissions
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService
    commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissions(System.String[],System.Int32)
  es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionByFilter*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionByFilter*
        name: GetPermissionByFilter
        nameWithType: PermissionService.GetPermissionByFilter
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionByFilter
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionByFilter*
        name: GetPermissionByFilter
        nameWithType: PermissionService.GetPermissionByFilter
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionByFilter
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionByFilter
  ? es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionByFilter(System.Int32,System.Int32,System.Int32,System.Int32)
  : name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionByFilter(System.Int32,System.Int32,System.Int32,System.Int32)
        name: GetPermissionByFilter
        nameWithType: IPermissionService.GetPermissionByFilter
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionByFilter
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionByFilter(System.Int32,System.Int32,System.Int32,System.Int32)
        name: GetPermissionByFilter
        nameWithType: IPermissionService.GetPermissionByFilter
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionByFilter
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService
    commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionByFilter(System.Int32,System.Int32,System.Int32,System.Int32)
  es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionsByDepartment*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionsByDepartment*
        name: GetPermissionsByDepartment
        nameWithType: PermissionService.GetPermissionsByDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionsByDepartment
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionsByDepartment*
        name: GetPermissionsByDepartment
        nameWithType: PermissionService.GetPermissionsByDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionsByDepartment
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.GetPermissionsByDepartment
  es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionsByDepartment(System.Int32):
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionsByDepartment(System.Int32)
        name: GetPermissionsByDepartment
        nameWithType: IPermissionService.GetPermissionsByDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionsByDepartment
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionsByDepartment(System.Int32)
        name: GetPermissionsByDepartment
        nameWithType: IPermissionService.GetPermissionsByDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionsByDepartment
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService
    commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.GetPermissionsByDepartment(System.Int32)
  es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.SetPermissions*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.SetPermissions*
        name: SetPermissions
        nameWithType: PermissionService.SetPermissions
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.SetPermissions
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.SetPermissions*
        name: SetPermissions
        nameWithType: PermissionService.SetPermissions
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.SetPermissions
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService.SetPermissions
  ? es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.SetPermissions(System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO})
  : name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.SetPermissions(System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO})
        name: SetPermissions
        nameWithType: IPermissionService.SetPermissions
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.SetPermissions
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO
        name: PermissionDTO
        nameWithType: PermissionDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.SetPermissions(System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO})
        name: SetPermissions
        nameWithType: IPermissionService.SetPermissions
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.SetPermissions
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO
        name: PermissionDTO
        nameWithType: PermissionDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService
    commentId: M:es.efor.PryBase.Users.Model.Services.PermissionsServices.IPermissionService.SetPermissions(System.Collections.Generic.List{es.efor.PryBase.Infraestructure.DTO.PermissionsDTOs.PermissionDTO})
  es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService
        name: PermissionService
        nameWithType: PermissionService
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService
      VB:
      - id: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService
        name: PermissionService
        nameWithType: PermissionService
        qualifiedName: es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService
    isDefinition: true
    commentId: T:es.efor.PryBase.Users.Model.Services.PermissionsServices.PermissionService
  Microsoft.Extensions.Logging.ILogger{es.efor.PryBase.Users.Model.Services.UsersServices.UserService}:
    name:
      CSharp:
      - id: Microsoft.Extensions.Logging.ILogger`1
        name: ILogger
        nameWithType: ILogger
        qualifiedName: Microsoft.Extensions.Logging.ILogger
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService
        name: UserService
        nameWithType: UserService
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Microsoft.Extensions.Logging.ILogger`1
        name: ILogger
        nameWithType: ILogger
        qualifiedName: Microsoft.Extensions.Logging.ILogger
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService
        name: UserService
        nameWithType: UserService
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Microsoft.Extensions.Logging.ILogger`1
    parent: Microsoft.Extensions.Logging
    commentId: T:Microsoft.Extensions.Logging.ILogger{es.efor.PryBase.Users.Model.Services.UsersServices.UserService}
  es.efor.PryBase.Users.Model.Services.UsersServices.UserService.#ctor*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.#ctor*
        name: UserService
        nameWithType: UserService.UserService
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.UserService
      VB:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.#ctor*
        name: UserService
        nameWithType: UserService.UserService
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.UserService
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.#ctor
  es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAdUser*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAdUser*
        name: GetAdUser
        nameWithType: UserService.GetAdUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAdUser
      VB:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAdUser*
        name: GetAdUser
        nameWithType: UserService.GetAdUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAdUser
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAdUser
  es.efor.PryBase.Users.Model.Services.IUserService.GetAdUser(System.String):
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAdUser(System.String)
        name: GetAdUser
        nameWithType: IUserService.GetAdUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetAdUser
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAdUser(System.String)
        name: GetAdUser
        nameWithType: IUserService.GetAdUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetAdUser
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.IUserService
    commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.GetAdUser(System.String)
  es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllUsers*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllUsers*
        name: GetAllUsers
        nameWithType: UserService.GetAllUsers
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllUsers
      VB:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllUsers*
        name: GetAllUsers
        nameWithType: UserService.GetAllUsers
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllUsers
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllUsers
  es.efor.PryBase.Users.Model.Services.IUserService.GetAllUsers:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAllUsers
        name: GetAllUsers
        nameWithType: IUserService.GetAllUsers
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetAllUsers
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAllUsers
        name: GetAllUsers
        nameWithType: IUserService.GetAllUsers
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetAllUsers
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.IUserService
    commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.GetAllUsers
  es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserByName*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserByName*
        name: GetUserByName
        nameWithType: UserService.GetUserByName
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserByName
      VB:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserByName*
        name: GetUserByName
        nameWithType: UserService.GetUserByName
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserByName
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserByName
  es.efor.PryBase.Users.Model.Services.IUserService.GetUserByName(System.String):
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetUserByName(System.String)
        name: GetUserByName
        nameWithType: IUserService.GetUserByName
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetUserByName
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetUserByName(System.String)
        name: GetUserByName
        nameWithType: IUserService.GetUserByName
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetUserByName
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.IUserService
    commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.GetUserByName(System.String)
  es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserById*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserById*
        name: GetUserById
        nameWithType: UserService.GetUserById
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserById
      VB:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserById*
        name: GetUserById
        nameWithType: UserService.GetUserById
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserById
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUserById
  es.efor.PryBase.Users.Model.Services.IUserService.GetUserById(System.Guid):
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetUserById(System.Guid)
        name: GetUserById
        nameWithType: IUserService.GetUserById
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetUserById
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Guid
        name: Guid
        nameWithType: Guid
        qualifiedName: System.Guid
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetUserById(System.Guid)
        name: GetUserById
        nameWithType: IUserService.GetUserById
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetUserById
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Guid
        name: Guid
        nameWithType: Guid
        qualifiedName: System.Guid
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.IUserService
    commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.GetUserById(System.Guid)
  es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUsersByDepartment*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUsersByDepartment*
        name: GetUsersByDepartment
        nameWithType: UserService.GetUsersByDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUsersByDepartment
      VB:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUsersByDepartment*
        name: GetUsersByDepartment
        nameWithType: UserService.GetUsersByDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUsersByDepartment
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetUsersByDepartment
  es.efor.PryBase.Users.Model.Services.IUserService.GetUsersByDepartment(System.Int32):
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetUsersByDepartment(System.Int32)
        name: GetUsersByDepartment
        nameWithType: IUserService.GetUsersByDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetUsersByDepartment
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetUsersByDepartment(System.Int32)
        name: GetUsersByDepartment
        nameWithType: IUserService.GetUsersByDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetUsersByDepartment
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.IUserService
    commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.GetUsersByDepartment(System.Int32)
  es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllAD*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllAD*
        name: GetAllAD
        nameWithType: UserService.GetAllAD
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllAD
      VB:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllAD*
        name: GetAllAD
        nameWithType: UserService.GetAllAD
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllAD
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllAD
  es.efor.PryBase.Users.Model.Services.IUserService.GetAllAD(System.String):
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAllAD(System.String)
        name: GetAllAD
        nameWithType: IUserService.GetAllAD
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetAllAD
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAllAD(System.String)
        name: GetAllAD
        nameWithType: IUserService.GetAllAD
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetAllAD
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.IUserService
    commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.GetAllAD(System.String)
  es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllDepartments*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllDepartments*
        name: GetAllDepartments
        nameWithType: UserService.GetAllDepartments
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllDepartments
      VB:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllDepartments*
        name: GetAllDepartments
        nameWithType: UserService.GetAllDepartments
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllDepartments
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllDepartments
  es.efor.PryBase.Users.Model.Services.IUserService.GetAllDepartments:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAllDepartments
        name: GetAllDepartments
        nameWithType: IUserService.GetAllDepartments
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetAllDepartments
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAllDepartments
        name: GetAllDepartments
        nameWithType: IUserService.GetAllDepartments
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetAllDepartments
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.IUserService
    commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.GetAllDepartments
  es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllLevels*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllLevels*
        name: GetAllLevels
        nameWithType: UserService.GetAllLevels
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllLevels
      VB:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllLevels*
        name: GetAllLevels
        nameWithType: UserService.GetAllLevels
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllLevels
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetAllLevels
  es.efor.PryBase.Users.Model.Services.IUserService.GetAllLevels:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAllLevels
        name: GetAllLevels
        nameWithType: IUserService.GetAllLevels
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetAllLevels
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetAllLevels
        name: GetAllLevels
        nameWithType: IUserService.GetAllLevels
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetAllLevels
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.IUserService
    commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.GetAllLevels
  es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetUser*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetUser*
        name: SetUser
        nameWithType: UserService.SetUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetUser
      VB:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetUser*
        name: SetUser
        nameWithType: UserService.SetUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetUser
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetUser
  es.efor.PryBase.Users.Model.Services.IUserService.SetUser(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO):
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.SetUser(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO)
        name: SetUser
        nameWithType: IUserService.SetUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.SetUser
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO
        name: UserDTO
        nameWithType: UserDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.SetUser(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO)
        name: SetUser
        nameWithType: IUserService.SetUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.SetUser
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO
        name: UserDTO
        nameWithType: UserDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.IUserService
    commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.SetUser(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDTO)
  es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetDepartmentById*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetDepartmentById*
        name: GetDepartmentById
        nameWithType: UserService.GetDepartmentById
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetDepartmentById
      VB:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetDepartmentById*
        name: GetDepartmentById
        nameWithType: UserService.GetDepartmentById
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetDepartmentById
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetDepartmentById
  es.efor.PryBase.Users.Model.Services.IUserService.GetDepartmentById(System.Int32):
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetDepartmentById(System.Int32)
        name: GetDepartmentById
        nameWithType: IUserService.GetDepartmentById
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetDepartmentById
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetDepartmentById(System.Int32)
        name: GetDepartmentById
        nameWithType: IUserService.GetDepartmentById
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetDepartmentById
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.IUserService
    commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.GetDepartmentById(System.Int32)
  es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetDepartment*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetDepartment*
        name: SetDepartment
        nameWithType: UserService.SetDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetDepartment
      VB:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetDepartment*
        name: SetDepartment
        nameWithType: UserService.SetDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetDepartment
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.SetDepartment
  es.efor.PryBase.Users.Model.Services.IUserService.SetDepartment(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO):
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.SetDepartment(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO)
        name: SetDepartment
        nameWithType: IUserService.SetDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.SetDepartment
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO
        name: UserDepartmentDTO
        nameWithType: UserDepartmentDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.SetDepartment(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO)
        name: SetDepartment
        nameWithType: IUserService.SetDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.SetDepartment
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO
        name: UserDepartmentDTO
        nameWithType: UserDepartmentDTO
        qualifiedName: es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.IUserService
    commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.SetDepartment(es.efor.PryBase.Infraestructure.DTO.UserDTOs.UserDepartmentDTO)
  es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetLevelById*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetLevelById*
        name: GetLevelById
        nameWithType: UserService.GetLevelById
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetLevelById
      VB:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetLevelById*
        name: GetLevelById
        nameWithType: UserService.GetLevelById
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetLevelById
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.GetLevelById
  es.efor.PryBase.Users.Model.Services.IUserService.GetLevelById(System.Int32):
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetLevelById(System.Int32)
        name: GetLevelById
        nameWithType: IUserService.GetLevelById
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetLevelById
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.GetLevelById(System.Int32)
        name: GetLevelById
        nameWithType: IUserService.GetLevelById
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.GetLevelById
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.IUserService
    commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.GetLevelById(System.Int32)
  es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteUser*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteUser*
        name: DeleteUser
        nameWithType: UserService.DeleteUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteUser
      VB:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteUser*
        name: DeleteUser
        nameWithType: UserService.DeleteUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteUser
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteUser
  es.efor.PryBase.Users.Model.Services.IUserService.DeleteUser(System.Guid,System.String):
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.DeleteUser(System.Guid,System.String)
        name: DeleteUser
        nameWithType: IUserService.DeleteUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.DeleteUser
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Guid
        name: Guid
        nameWithType: Guid
        qualifiedName: System.Guid
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.DeleteUser(System.Guid,System.String)
        name: DeleteUser
        nameWithType: IUserService.DeleteUser
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.DeleteUser
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Guid
        name: Guid
        nameWithType: Guid
        qualifiedName: System.Guid
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.IUserService
    commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.DeleteUser(System.Guid,System.String)
  es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteDepartment*:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteDepartment*
        name: DeleteDepartment
        nameWithType: UserService.DeleteDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteDepartment
      VB:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteDepartment*
        name: DeleteDepartment
        nameWithType: UserService.DeleteDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteDepartment
    isDefinition: true
    commentId: Overload:es.efor.PryBase.Users.Model.Services.UsersServices.UserService.DeleteDepartment
  es.efor.PryBase.Users.Model.Services.IUserService.DeleteDepartment(System.Int32,System.String):
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.DeleteDepartment(System.Int32,System.String)
        name: DeleteDepartment
        nameWithType: IUserService.DeleteDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.DeleteDepartment
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: es.efor.PryBase.Users.Model.Services.IUserService.DeleteDepartment(System.Int32,System.String)
        name: DeleteDepartment
        nameWithType: IUserService.DeleteDepartment
        qualifiedName: es.efor.PryBase.Users.Model.Services.IUserService.DeleteDepartment
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: es.efor.PryBase.Users.Model.Services.IUserService
    commentId: M:es.efor.PryBase.Users.Model.Services.IUserService.DeleteDepartment(System.Int32,System.String)
  es.efor.PryBase.Users.Model.Services.UsersServices.UserService:
    name:
      CSharp:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService
        name: UserService
        nameWithType: UserService
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService
      VB:
      - id: es.efor.PryBase.Users.Model.Services.UsersServices.UserService
        name: UserService
        nameWithType: UserService
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices.UserService
    isDefinition: true
    commentId: T:es.efor.PryBase.Users.Model.Services.UsersServices.UserService
  es.efor.PryBase.Users.Model.Services.UsersServices:
    name:
      CSharp:
      - name: es.efor.PryBase.Users.Model.Services.UsersServices
        nameWithType: es.efor.PryBase.Users.Model.Services.UsersServices
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices
      VB:
      - name: es.efor.PryBase.Users.Model.Services.UsersServices
        nameWithType: es.efor.PryBase.Users.Model.Services.UsersServices
        qualifiedName: es.efor.PryBase.Users.Model.Services.UsersServices
    isDefinition: true
    commentId: N:es.efor.PryBase.Users.Model.Services.UsersServices
