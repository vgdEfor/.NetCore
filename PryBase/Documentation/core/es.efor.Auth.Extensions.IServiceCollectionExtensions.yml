### YamlMime:ManagedReference
items:
- uid: es.efor.Auth.Extensions.IServiceCollectionExtensions
  commentId: T:es.efor.Auth.Extensions.IServiceCollectionExtensions
  id: IServiceCollectionExtensions
  parent: es.efor.Auth.Extensions
  children:
  - es.efor.Auth.Extensions.IServiceCollectionExtensions.AddAppAuthorizationPolicies(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}},System.Collections.Generic.IEnumerable{System.String},System.String)
  - es.efor.Auth.Extensions.IServiceCollectionExtensions.AddEforIdentityAuthentication``7(Microsoft.Extensions.DependencyInjection.IServiceCollection,es.efor.Auth.Models.Configs.IdentityConfiguration,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}},System.Collections.Generic.IEnumerable{System.String})
  - es.efor.Auth.Extensions.IServiceCollectionExtensions.AddEforSimpleAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,es.efor.Auth.Models.Configs.IdentityConfiguration,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}},System.Collections.Generic.IEnumerable{System.String})
  langs:
  - csharp
  - vb
  name: IServiceCollectionExtensions
  nameWithType: IServiceCollectionExtensions
  fullName: es.efor.Auth.Extensions.IServiceCollectionExtensions
  type: Class
  source:
    remote:
      path: es.efor.Auth/Extensions/IServiceCollectionExtensions.cs
      branch: master
      repo: https://dev.azure.com/EforDevelop/Musaat/_git/Musaat_Med
    id: IServiceCollectionExtensions
    path: ../es.efor.Auth/Extensions/IServiceCollectionExtensions.cs
    startLine: 21
  assemblies:
  - es.efor.Auth
  namespace: es.efor.Auth.Extensions
  syntax:
    content: public static class IServiceCollectionExtensions
    content.vb: Public Module IServiceCollectionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: es.efor.Auth.Extensions.IServiceCollectionExtensions.AddEforSimpleAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,es.efor.Auth.Models.Configs.IdentityConfiguration,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}},System.Collections.Generic.IEnumerable{System.String})
  commentId: M:es.efor.Auth.Extensions.IServiceCollectionExtensions.AddEforSimpleAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,es.efor.Auth.Models.Configs.IdentityConfiguration,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}},System.Collections.Generic.IEnumerable{System.String})
  id: AddEforSimpleAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,es.efor.Auth.Models.Configs.IdentityConfiguration,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}},System.Collections.Generic.IEnumerable{System.String})
  isExtensionMethod: true
  parent: es.efor.Auth.Extensions.IServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddEforSimpleAuthentication(IServiceCollection, IdentityConfiguration, String, String, Dictionary<String, IEnumerable<Claim>>, IEnumerable<String>)
  nameWithType: IServiceCollectionExtensions.AddEforSimpleAuthentication(IServiceCollection, IdentityConfiguration, String, String, Dictionary<String, IEnumerable<Claim>>, IEnumerable<String>)
  fullName: es.efor.Auth.Extensions.IServiceCollectionExtensions.AddEforSimpleAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection, es.efor.Auth.Models.Configs.IdentityConfiguration, System.String, System.String, System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>>, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: es.efor.Auth/Extensions/IServiceCollectionExtensions.cs
      branch: master
      repo: https://dev.azure.com/EforDevelop/Musaat/_git/Musaat_Med
    id: AddEforSimpleAuthentication
    path: ../es.efor.Auth/Extensions/IServiceCollectionExtensions.cs
    startLine: 49
  assemblies:
  - es.efor.Auth
  namespace: es.efor.Auth.Extensions
  summary: "\nConfigures Microsoft&apos;s ASPNetCore&apos;s basic services\nto support authentication without any store context\nsuch as databases. This method setup is useful when\nyou want to setup your own stores or don&apos;t require them\nbecasue the authentication is managed by an external\nservice.\n"
  example: []
  syntax:
    content: public static IServiceCollection AddEforSimpleAuthentication(this IServiceCollection services, IdentityConfiguration configuration, string defaultAuthenticateScheme = null, string defaultChallengeScheme = null, Dictionary<string, IEnumerable<Claim>> policyAndClaims = null, IEnumerable<string> policyMenuSections = null)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configuration
      type: es.efor.Auth.Models.Configs.IdentityConfiguration
      description: "\nThe authentication configuration.\nCannot be left null.\n"
    - id: defaultAuthenticateScheme
      type: System.String
      description: "\nMust be specified **ONLY** when using multiple\nauthentication setups in <code data-dev-comment-type=\"paramref\" class=\"paramref\">configuration</code>.\nMust be null if only one setup is being used (instead,\nthe Schema must be specified in the <code data-dev-comment-type=\"paramref\" class=\"paramref\">configuration</code>\n"
    - id: defaultChallengeScheme
      type: System.String
      description: "\nMust be specified **ONLY** when using multiple\nauthentication setups in <code data-dev-comment-type=\"paramref\" class=\"paramref\">configuration</code>.\nMust be null if only one setup is being used (instead,\nthe Schema must be specified in the <code data-dev-comment-type=\"paramref\" class=\"paramref\">configuration</code>\n"
    - id: policyAndClaims
      type: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}}
    - id: policyMenuSections
      type: System.Collections.Generic.IEnumerable{System.String}
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddEforSimpleAuthentication(services As IServiceCollection, configuration As IdentityConfiguration, defaultAuthenticateScheme As String = Nothing, defaultChallengeScheme As String = Nothing, policyAndClaims As Dictionary(Of String, IEnumerable(Of Claim)) = Nothing, policyMenuSections As IEnumerable(Of String) = Nothing) As IServiceCollection
  overload: es.efor.Auth.Extensions.IServiceCollectionExtensions.AddEforSimpleAuthentication*
  nameWithType.vb: IServiceCollectionExtensions.AddEforSimpleAuthentication(IServiceCollection, IdentityConfiguration, String, String, Dictionary(Of String, IEnumerable(Of Claim)), IEnumerable(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: es.efor.Auth.Extensions.IServiceCollectionExtensions.AddEforSimpleAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection, es.efor.Auth.Models.Configs.IdentityConfiguration, System.String, System.String, System.Collections.Generic.Dictionary(Of System.String, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)), System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: AddEforSimpleAuthentication(IServiceCollection, IdentityConfiguration, String, String, Dictionary(Of String, IEnumerable(Of Claim)), IEnumerable(Of String))
- uid: es.efor.Auth.Extensions.IServiceCollectionExtensions.AddEforIdentityAuthentication``7(Microsoft.Extensions.DependencyInjection.IServiceCollection,es.efor.Auth.Models.Configs.IdentityConfiguration,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}},System.Collections.Generic.IEnumerable{System.String})
  commentId: M:es.efor.Auth.Extensions.IServiceCollectionExtensions.AddEforIdentityAuthentication``7(Microsoft.Extensions.DependencyInjection.IServiceCollection,es.efor.Auth.Models.Configs.IdentityConfiguration,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}},System.Collections.Generic.IEnumerable{System.String})
  id: AddEforIdentityAuthentication``7(Microsoft.Extensions.DependencyInjection.IServiceCollection,es.efor.Auth.Models.Configs.IdentityConfiguration,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}},System.Collections.Generic.IEnumerable{System.String})
  isExtensionMethod: true
  parent: es.efor.Auth.Extensions.IServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddEforIdentityAuthentication<TIdentityContext, TKey, TUser, TRole, TSignInManager, TUserManager, TRoleManager>(IServiceCollection, IdentityConfiguration, String, String, Dictionary<String, IEnumerable<Claim>>, IEnumerable<String>)
  nameWithType: IServiceCollectionExtensions.AddEforIdentityAuthentication<TIdentityContext, TKey, TUser, TRole, TSignInManager, TUserManager, TRoleManager>(IServiceCollection, IdentityConfiguration, String, String, Dictionary<String, IEnumerable<Claim>>, IEnumerable<String>)
  fullName: es.efor.Auth.Extensions.IServiceCollectionExtensions.AddEforIdentityAuthentication<TIdentityContext, TKey, TUser, TRole, TSignInManager, TUserManager, TRoleManager>(Microsoft.Extensions.DependencyInjection.IServiceCollection, es.efor.Auth.Models.Configs.IdentityConfiguration, System.String, System.String, System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>>, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: es.efor.Auth/Extensions/IServiceCollectionExtensions.cs
      branch: master
      repo: https://dev.azure.com/EforDevelop/Musaat/_git/Musaat_Med
    id: AddEforIdentityAuthentication
    path: ../es.efor.Auth/Extensions/IServiceCollectionExtensions.cs
    startLine: 89
  assemblies:
  - es.efor.Auth
  namespace: es.efor.Auth.Extensions
  summary: "\n** DON&apos;T FORGET TO MODIFY YOUR CONTEXT:**\n<p>1. Set your <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">TIdentityContext</code> class as a child of <xref href=\"Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext%603\" data-throw-if-not-resolved=\"false\"></xref></p>\n<p>2. If you&apos;re implementing the context&apos;s OnModelCreating by yourself, you ** MUST ** call super.OnModelCreating.</p>\n"
  example: []
  syntax:
    content: >-
      public static IServiceCollection AddEforIdentityAuthentication<TIdentityContext, TKey, TUser, TRole, TSignInManager, TUserManager, TRoleManager>(this IServiceCollection services, IdentityConfiguration configuration, string defaultAuthenticateScheme = null, string defaultChallengeScheme = null, Dictionary<string, IEnumerable<Claim>> policyAndClaims = null, IEnumerable<string> policyMenuSections = null)

          where TIdentityContext : IdentityDbContext<TUser, TRole, TKey> where TKey : IEquatable<TKey> where TUser : User<TKey>, new()

          where TRole : Role<TKey>, new()

          where TSignInManager : IdentitySignInManager<TKey, TUser> where TUserManager : IdentityUserManager<TKey, TUser> where TRoleManager : IdentityRoleManager<TKey, TRole>
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The services to extend
    - id: configuration
      type: es.efor.Auth.Models.Configs.IdentityConfiguration
    - id: defaultAuthenticateScheme
      type: System.String
    - id: defaultChallengeScheme
      type: System.String
    - id: policyAndClaims
      type: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}}
    - id: policyMenuSections
      type: System.Collections.Generic.IEnumerable{System.String}
    typeParameters:
    - id: TIdentityContext
      description: The database context to use with Identity. Must inherit <xref href="Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext%603" data-throw-if-not-resolved="false"></xref>
    - id: TKey
      description: The primary key type for Identity entities (<xref href="Microsoft.AspNetCore.Identity.IdentityUser%601.Id" data-throw-if-not-resolved="false"></xref>)
    - id: TUser
      description: The entity that holds the User data. Must inherit from <xref href="Microsoft.AspNetCore.Identity.IdentityUser%601" data-throw-if-not-resolved="false"></xref>
    - id: TRole
      description: The entity that holds the Role data. Must inherit from <xref href="Microsoft.AspNetCore.Identity.IdentityRole%601" data-throw-if-not-resolved="false"></xref>
    - id: TSignInManager
      description: The manager that carries the operations regarding the user SignIn. Must inherit from <xref href="Microsoft.AspNetCore.Identity.SignInManager%601" data-throw-if-not-resolved="false"></xref>
    - id: TUserManager
      description: The manager that carries the operations regarding the user Insert, Update and Delete operations. Must inherit from <xref href="Microsoft.AspNetCore.Identity.UserManager%601" data-throw-if-not-resolved="false"></xref>
    - id: TRoleManager
      description: The manager that carries the operations regarding the role Insert, Update and Delete operations. Must inherit from <xref href="Microsoft.AspNetCore.Identity.RoleManager%601" data-throw-if-not-resolved="false"></xref>
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddEforIdentityAuthentication(Of TIdentityContext As IdentityDbContext(Of TUser, TRole, TKey), TKey As IEquatable(Of TKey), TUser As {User(Of TKey), New}, TRole As {Role(Of TKey), New}, TSignInManager As IdentitySignInManager(Of TKey, TUser), TUserManager As IdentityUserManager(Of TKey, TUser), TRoleManager As IdentityRoleManager(Of TKey, TRole))(services As IServiceCollection, configuration As IdentityConfiguration, defaultAuthenticateScheme As String = Nothing, defaultChallengeScheme As String = Nothing, policyAndClaims As Dictionary(Of String, IEnumerable(Of Claim)) = Nothing, policyMenuSections As IEnumerable(Of String) = Nothing) As IServiceCollection
  overload: es.efor.Auth.Extensions.IServiceCollectionExtensions.AddEforIdentityAuthentication*
  nameWithType.vb: IServiceCollectionExtensions.AddEforIdentityAuthentication(Of TIdentityContext, TKey, TUser, TRole, TSignInManager, TUserManager, TRoleManager)(IServiceCollection, IdentityConfiguration, String, String, Dictionary(Of String, IEnumerable(Of Claim)), IEnumerable(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: es.efor.Auth.Extensions.IServiceCollectionExtensions.AddEforIdentityAuthentication(Of TIdentityContext, TKey, TUser, TRole, TSignInManager, TUserManager, TRoleManager)(Microsoft.Extensions.DependencyInjection.IServiceCollection, es.efor.Auth.Models.Configs.IdentityConfiguration, System.String, System.String, System.Collections.Generic.Dictionary(Of System.String, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)), System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: AddEforIdentityAuthentication(Of TIdentityContext, TKey, TUser, TRole, TSignInManager, TUserManager, TRoleManager)(IServiceCollection, IdentityConfiguration, String, String, Dictionary(Of String, IEnumerable(Of Claim)), IEnumerable(Of String))
- uid: es.efor.Auth.Extensions.IServiceCollectionExtensions.AddAppAuthorizationPolicies(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}},System.Collections.Generic.IEnumerable{System.String},System.String)
  commentId: M:es.efor.Auth.Extensions.IServiceCollectionExtensions.AddAppAuthorizationPolicies(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}},System.Collections.Generic.IEnumerable{System.String},System.String)
  id: AddAppAuthorizationPolicies(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}},System.Collections.Generic.IEnumerable{System.String},System.String)
  isExtensionMethod: true
  parent: es.efor.Auth.Extensions.IServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddAppAuthorizationPolicies(IServiceCollection, Dictionary<String, IEnumerable<Claim>>, IEnumerable<String>, String)
  nameWithType: IServiceCollectionExtensions.AddAppAuthorizationPolicies(IServiceCollection, Dictionary<String, IEnumerable<Claim>>, IEnumerable<String>, String)
  fullName: es.efor.Auth.Extensions.IServiceCollectionExtensions.AddAppAuthorizationPolicies(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>>, System.Collections.Generic.IEnumerable<System.String>, System.String)
  type: Method
  source:
    remote:
      path: es.efor.Auth/Extensions/IServiceCollectionExtensions.cs
      branch: master
      repo: https://dev.azure.com/EforDevelop/Musaat/_git/Musaat_Med
    id: AddAppAuthorizationPolicies
    path: ../es.efor.Auth/Extensions/IServiceCollectionExtensions.cs
    startLine: 140
  assemblies:
  - es.efor.Auth
  namespace: es.efor.Auth.Extensions
  summary: "\nAdds policies so that the application&apos;s controllers can work with them.\n"
  example: []
  syntax:
    content: public static IServiceCollection AddAppAuthorizationPolicies(this IServiceCollection services, Dictionary<string, IEnumerable<Claim>> policyAndClaims, IEnumerable<string> policyMenuSections = null, string policyMenuSectionPrefix = "app-claim-section-")
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: policyAndClaims
      type: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}}
      description: "\nSince a policy is a collection of claims, the KEY of the Dictionary must be\nthe name of the Policy (the one you will want to use in the Authorize attribute)\nand the value will be a collection of <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> the use must fulfill\nin other to validate the Policy.\n"
    - id: policyMenuSections
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "\nIf you are using an UI menu to distribute claims (see Policy docs for more info),\nyou may want to specify what the menu sections are. This will allow you to setup\nAuthorization rules regarding specific sections, but it&apos;s not required.\n"
    - id: policyMenuSectionPrefix
      type: System.String
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddAppAuthorizationPolicies(services As IServiceCollection, policyAndClaims As Dictionary(Of String, IEnumerable(Of Claim)), policyMenuSections As IEnumerable(Of String) = Nothing, policyMenuSectionPrefix As String = "app-claim-section-") As IServiceCollection
  overload: es.efor.Auth.Extensions.IServiceCollectionExtensions.AddAppAuthorizationPolicies*
  nameWithType.vb: IServiceCollectionExtensions.AddAppAuthorizationPolicies(IServiceCollection, Dictionary(Of String, IEnumerable(Of Claim)), IEnumerable(Of String), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: es.efor.Auth.Extensions.IServiceCollectionExtensions.AddAppAuthorizationPolicies(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Collections.Generic.Dictionary(Of System.String, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)), System.Collections.Generic.IEnumerable(Of System.String), System.String)
  name.vb: AddAppAuthorizationPolicies(IServiceCollection, Dictionary(Of String, IEnumerable(Of Claim)), IEnumerable(Of String), String)
references:
- uid: es.efor.Auth.Extensions
  commentId: N:es.efor.Auth.Extensions
  name: es.efor.Auth.Extensions
  nameWithType: es.efor.Auth.Extensions
  fullName: es.efor.Auth.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: es.efor.Auth.Extensions.IServiceCollectionExtensions.AddEforSimpleAuthentication*
  commentId: Overload:es.efor.Auth.Extensions.IServiceCollectionExtensions.AddEforSimpleAuthentication
  name: AddEforSimpleAuthentication
  nameWithType: IServiceCollectionExtensions.AddEforSimpleAuthentication
  fullName: es.efor.Auth.Extensions.IServiceCollectionExtensions.AddEforSimpleAuthentication
- uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceCollection
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
- uid: es.efor.Auth.Models.Configs.IdentityConfiguration
  commentId: T:es.efor.Auth.Models.Configs.IdentityConfiguration
  parent: es.efor.Auth.Models.Configs
  name: IdentityConfiguration
  nameWithType: IdentityConfiguration
  fullName: es.efor.Auth.Models.Configs.IdentityConfiguration
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, IEnumerable<Claim>>
  nameWithType: Dictionary<String, IEnumerable<Claim>>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>>
  nameWithType.vb: Dictionary(Of String, IEnumerable(Of Claim))
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim))
  name.vb: Dictionary(Of String, IEnumerable(Of Claim))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: es.efor.Auth.Models.Configs
  commentId: N:es.efor.Auth.Models.Configs
  name: es.efor.Auth.Models.Configs
  nameWithType: es.efor.Auth.Models.Configs
  fullName: es.efor.Auth.Models.Configs
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext`3
  commentId: T:Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext`3
  isExternal: true
  name: IdentityDbContext<TUser, TRole, TKey>
  nameWithType: IdentityDbContext<TUser, TRole, TKey>
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext<TUser, TRole, TKey>
  nameWithType.vb: IdentityDbContext(Of TUser, TRole, TKey)
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext(Of TUser, TRole, TKey)
  name.vb: IdentityDbContext(Of TUser, TRole, TKey)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext`3
    name: IdentityDbContext
    nameWithType: IdentityDbContext
    fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext`3
    name: IdentityDbContext
    nameWithType: IdentityDbContext
    fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IdentityUser`1.Id
  commentId: P:Microsoft.AspNetCore.Identity.IdentityUser`1.Id
  isExternal: true
  name: Id
  nameWithType: IdentityUser<TKey>.Id
  fullName: Microsoft.AspNetCore.Identity.IdentityUser<TKey>.Id
  nameWithType.vb: IdentityUser(Of TKey).Id
  fullName.vb: Microsoft.AspNetCore.Identity.IdentityUser(Of TKey).Id
- uid: Microsoft.AspNetCore.Identity.IdentityUser`1
  commentId: T:Microsoft.AspNetCore.Identity.IdentityUser`1
  isExternal: true
  name: IdentityUser<TKey>
  nameWithType: IdentityUser<TKey>
  fullName: Microsoft.AspNetCore.Identity.IdentityUser<TKey>
  nameWithType.vb: IdentityUser(Of TKey)
  fullName.vb: Microsoft.AspNetCore.Identity.IdentityUser(Of TKey)
  name.vb: IdentityUser(Of TKey)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IdentityUser`1
    name: IdentityUser
    nameWithType: IdentityUser
    fullName: Microsoft.AspNetCore.Identity.IdentityUser
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IdentityUser`1
    name: IdentityUser
    nameWithType: IdentityUser
    fullName: Microsoft.AspNetCore.Identity.IdentityUser
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IdentityRole`1
  commentId: T:Microsoft.AspNetCore.Identity.IdentityRole`1
  isExternal: true
  name: IdentityRole<TKey>
  nameWithType: IdentityRole<TKey>
  fullName: Microsoft.AspNetCore.Identity.IdentityRole<TKey>
  nameWithType.vb: IdentityRole(Of TKey)
  fullName.vb: Microsoft.AspNetCore.Identity.IdentityRole(Of TKey)
  name.vb: IdentityRole(Of TKey)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IdentityRole`1
    name: IdentityRole
    nameWithType: IdentityRole
    fullName: Microsoft.AspNetCore.Identity.IdentityRole
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IdentityRole`1
    name: IdentityRole
    nameWithType: IdentityRole
    fullName: Microsoft.AspNetCore.Identity.IdentityRole
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.SignInManager`1
  commentId: T:Microsoft.AspNetCore.Identity.SignInManager`1
  isExternal: true
  name: SignInManager<TUser>
  nameWithType: SignInManager<TUser>
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>
  nameWithType.vb: SignInManager(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser)
  name.vb: SignInManager(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: Microsoft.AspNetCore.Identity.SignInManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: Microsoft.AspNetCore.Identity.SignInManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.UserManager`1
  commentId: T:Microsoft.AspNetCore.Identity.UserManager`1
  isExternal: true
  name: UserManager<TUser>
  nameWithType: UserManager<TUser>
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>
  nameWithType.vb: UserManager(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser)
  name.vb: UserManager(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1
  commentId: T:Microsoft.AspNetCore.Identity.RoleManager`1
  isExternal: true
  name: RoleManager<TRole>
  nameWithType: RoleManager<TRole>
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>
  nameWithType.vb: RoleManager(Of TRole)
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole)
  name.vb: RoleManager(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: es.efor.Auth.Extensions.IServiceCollectionExtensions.AddEforIdentityAuthentication*
  commentId: Overload:es.efor.Auth.Extensions.IServiceCollectionExtensions.AddEforIdentityAuthentication
  name: AddEforIdentityAuthentication
  nameWithType: IServiceCollectionExtensions.AddEforIdentityAuthentication
  fullName: es.efor.Auth.Extensions.IServiceCollectionExtensions.AddEforIdentityAuthentication
- uid: System.Security.Claims.Claim
  commentId: T:System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: true
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: es.efor.Auth.Extensions.IServiceCollectionExtensions.AddAppAuthorizationPolicies*
  commentId: Overload:es.efor.Auth.Extensions.IServiceCollectionExtensions.AddAppAuthorizationPolicies
  name: AddAppAuthorizationPolicies
  nameWithType: IServiceCollectionExtensions.AddAppAuthorizationPolicies
  fullName: es.efor.Auth.Extensions.IServiceCollectionExtensions.AddAppAuthorizationPolicies
- uid: System.Security.Claims
  commentId: N:System.Security.Claims
  isExternal: true
  name: System.Security.Claims
  nameWithType: System.Security.Claims
  fullName: System.Security.Claims
