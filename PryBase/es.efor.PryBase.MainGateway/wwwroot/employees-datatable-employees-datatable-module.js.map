{"version":3,"sources":["./src/app/pages/main/empleados/employees/employees-datatable/employees-datatable.module.ts","./src/app/pages/main/empleados/employees/employees-datatable/employees-datatable.component.ts","./src/app/pages/main/empleados/employees/employees-datatable/employees-datatable.component.html"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACgB;AACF;AACuB;AACX;AACb;AACE;;;;AAExD,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,0FAA2B;KACjD;CACF,CAAC;AAiBK,MAAM,wBAAwB;;uGAAxB,wBAAwB;0KAAxB,wBAAwB,mBAJxB;QACT,wDAAQ;KACT,YAVQ;YACP,4DAAY;YACZ,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC7B,4DAAiB;YACjB,mEAAe,CAAC,QAAQ,EAAE;YAC1B,qEAAc;YACd,6DAAkB;SACnB;mIAKU,wBAAwB,mBAdpB,0FAA2B,aAGxC,4DAAY,gEAEZ,4DAAiB,uEAEjB,qEAAc;QACd,6DAAkB,aAPV,0FAA2B;6FAa1B,wBAAwB;cAfpC,sDAAQ;eAAC;gBACR,YAAY,EAAE,CAAC,0FAA2B,CAAC;gBAC3C,OAAO,EAAE,CAAC,0FAA2B,CAAC;gBACtC,OAAO,EAAE;oBACP,4DAAY;oBACZ,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;oBAC7B,4DAAiB;oBACjB,mEAAe,CAAC,QAAQ,EAAE;oBAC1B,qEAAc;oBACd,6DAAkB;iBACnB;gBACD,SAAS,EAAE;oBACT,wDAAQ;iBACT;aACF;;;;;;;;;;;;;;;;;;;;;;;;;AC5BiD;AAEmJ;AAIzJ;;;;;;;AAOrC,MAAM,2BAA2B;IAYtC,YACS,KAAe,EACf,WAA6B,EAC7B,WAA6B;QAF7B,UAAK,GAAL,KAAK,CAAU;QACf,gBAAW,GAAX,WAAW,CAAkB;QAC7B,gBAAW,GAAX,WAAW,CAAkB;QAbtC,cAAS,GAA6B,EAAE,CAAC;QAIzC,iBAAY,GAAY,IAAI,CAAC;QAC7B,eAAU,GAAY,IAAI,CAAC;QAUzB,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IACD,QAAQ;IACR,CAAC;IAEO,cAAc;QAEpB,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAE1B,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,IAAI,CAAC,uBAAuB,GAAG,CAAC,WAAW,EAAE,OAAO,EAAE,EAAE;YACtD,OAAO,IAAI,CAAC,WAAW,CAAC,8BAA8B,CAAC,EAAE,IAAI,EAAE,OAAc,EAAE,EAAE,EAAE,WAAW,CAAC,EAAS,EAAE,EAAE,EAAE,WAAW,CAAC,EAAS,EAAE,CAAC;iBACnI,IAAI,CAAC,4DAAK,EAAE,CAAC;iBACb,IAAI,CAAC,0DAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,wDAAa,EAAY,CAAC,OAAO,CAAC;gBACrD,KAAK,EAAE,CAAC,CAAC,KAAK;gBACd,SAAS,EAAE,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC;gBACjC,QAAQ,EAAE,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC;gBAChC,KAAK,EAAE,CAAC,CAAC,KAAK;aACf,CAAC,CACD,CAAC,CAAC,SAAS,EAAE,CAAC;QACnB,CAAC,CAAC;IACJ,CAAC;IACO,aAAa;QACnB,IAAI,CAAC,SAAS,GAAG;YACf,IAAI,uDAAY,EAAE,CAAC,OAAO,CAAC;gBACzB,YAAY,EAAE,aAAa;gBAC3B,OAAO,EAAE;oBACP,IAAI,+DAAoB,EAAoB,CAAC,OAAO,CAAC;wBACnD,GAAG,EAAE,mCAAmC;wBACxC,SAAS,EAAE,OAAO;wBAClB,WAAW,EAAE,KAAK;wBAClB,QAAQ,EAAE,KAAK;wBACf,QAAQ,EAAE,kCAAkC;qBAC7C,CAAC;iBACH;aACF,CAAC;YACF,IAAI,uDAAY,EAAE,CAAC,OAAO,CAAC;gBACzB,UAAU,EAAE,QAAQ;gBACpB,KAAK,EAAE,MAAM;gBACb,MAAM,EAAE,IAAI;aACb,CAAC,EAAE,IAAI,uDAAY,EAAE,CAAC,OAAO,CAAC;gBAC7B,UAAU,EAAE,UAAU;gBACtB,KAAK,EAAE,SAAS;gBAChB,MAAM,EAAE,IAAI;aACb,CAAC,EAAE,IAAI,uDAAY,EAAE,CAAC,OAAO,CAAC;gBAC7B,UAAU,EAAE,qBAAqB;gBACjC,KAAK,EAAE,QAAQ;gBACf,gBAAgB,EAAE,UAAU;gBAC5B,MAAM,EAAE,IAAI;gBACZ,UAAU,EAAE,IAAI,uDAAY,EAAE,CAAC,OAAO,CAAC;oBACrC,MAAM,EAAE,2DAAgB,CAAC,IAAI;oBAC7B,IAAI,EAAE,kEAAuB,CAAC,IAAI;iBACnC,CAAC;gBACF,sBAAsB,EAAE,CAAC,IAAI,EAAE,EAAE;oBAC/B,IAAI,IAAI,IAAI,IAAI,EAAE;wBAAE,OAAO,EAAE,CAAC;qBAAE;oBAChC,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;oBAC5F,OAAO,WAAW,CAAC;gBACrB,CAAC;aACF,CAAC,EAAE,IAAI,uDAAY,EAAE,CAAC,OAAO,CAAC;gBAC7B,UAAU,EAAE,mBAAmB;gBAC/B,KAAK,EAAE,QAAQ;gBACf,gBAAgB,EAAE,UAAU;gBAC5B,MAAM,EAAE,IAAI;gBACZ,UAAU,EAAE,IAAI,uDAAY,EAAE,CAAC,OAAO,CAAC;oBACrC,MAAM,EAAE,2DAAgB,CAAC,IAAI;oBAC7B,IAAI,EAAE,kEAAuB,CAAC,IAAI;iBACnC,CAAC;gBACF,sBAAsB,EAAE,CAAC,IAAI,EAAE,EAAE;oBAC/B,IAAI,IAAI,IAAI,IAAI,EAAE;wBAAE,OAAO,EAAE,CAAC;qBAAE;oBAChC,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;oBAC5F,OAAO,WAAW,CAAC;gBACrB,CAAC;aACF,CAAC;YACF,IAAI,uDAAY,EAAE,CAAC,OAAO,CAAC;gBACzB,UAAU,EAAE,UAAU;gBACtB,KAAK,EAAE,cAAc;gBACrB,sBAAsB,EAAE,CAAC,IAAI,EAAE,EAAE;oBAC/B,IAAI,IAAI,IAAI,CAAC,EAAE;wBACb,OAAO,MAAM,CAAC;qBACf;yBAAM,IAAI,IAAI,IAAI,CAAC,EAAE;wBACpB,OAAO,SAAS,CAAC;qBAClB;yBAAM,IAAI,IAAI,IAAI,CAAC,EAAE;wBACpB,OAAO,YAAY,CAAC;qBACrB;yBAAM,IAAI,IAAI,IAAI,CAAC,EAAE;wBACpB,OAAO,eAAe,CAAC;qBACxB;yBAAM;wBACL,OAAO,WAAW,CAAC;qBACpB;gBAEH,CAAC;gBACD,MAAM,EAAE,IAAI;gBACZ,UAAU,EAAE,IAAI,uDAAY,EAAE,CAAC,OAAO,CAAC;oBACrC,MAAM,EAAE,2DAAgB,CAAC,GAAG;oBAC5B,IAAI,EAAE,kEAAuB,CAAC,YAAY;oBAC1C,QAAQ,EAAE,IAAI,CAAC,cAAc;iBAC9B,CAAC;aACH,CAAC;SACH,CAAC;IACJ,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,cAAc,GAAG,GAAS,EAAE,CAAC;YAChC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,gCAAgC,CAAC,EAAE,CAAC;iBACxE,IAAI,CAAC,4DAAK,EAAE,CAAC;iBACb,SAAS,EAAE,CAAC;YACf,OAAO,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,gEAAqB,EAAU,CAAC,OAAO,CAAC;gBACvE,KAAK,EAAE,MAAM,CAAC,IAAI;gBAClB,KAAK,EAAE,MAAM,CAAC,KAAK;aACpB,CAAC,CAAC,CAAC;QACN,CAAC,EAAC;IACJ,CAAC;;sGAhIU,2BAA2B;2GAA3B,2BAA2B;QCbxC,wEAA+B;QAAA,uDAA2C;;QAAA,4DAAK;QAE/E,gFAIuB;QAGvB,+EAAgF;QAArC,2LAAoC;QAAC,mFAAwB;QAAA,4DAAS;QAAA,gEAEjH;QAAA,4EAEA;QAAA,sEAAI;QAAA,iHAAgD;QAAA,4DAAK;QAErD,iFAImB;QAEvB,4DAAM;QAEN,iEACA;QAAA,gFAAiF;QAAjC,wLAAgC;QAAC,qFAAoB;QAAA,4DAAS;QAE9G,6EACA;QAAA,iEACA;QAAA,sEAAI;QAAA,8EAAa;QAAA,4DAAK;QACtB,qEAAG;QAAA,4HAA2D;QAAA,4DAAI;QAClE,uEACA;QAAA,wEACQ;QAAA,gPAKR;QAAA,4DAAO;QACP;QAAA,4DAAM;QACN,qEACA;QAAA,8IACA;QAAA,4DAAI;QACJ,uEACA;QAAA,wEACQ;QAAA,iHACR;QAAA,4DAAO;QACP;QAAA,4DAAM;QACN,qEAAG;QAAA,gPAA0K;QAAA,4DAAI;QACjL,uEACA;QAAA,wEACI;QAAA,mOAKJ;QAAA,4DAAO;QACP;QAAA,4DAAM;QACN,qEAAG;QAAA,kMAA4H;QAAA,4DAAI;QACnI,uEACA;QAAA,wEACI;QAAA,sHACJ;QAAA,4DAAO;QACP;QAAA,4DAAM;QACN,qEAAG;QAAA,oJAAmF;QAAA,4DAAI;QAC1F,uEACA;QAAA,wEACI;QAAA,0fAYJ;QAAA,4DAAO;QACP;QAAA,4DAAM;QACN,qEAAG;QAAA,8JAA6F;QAAA,4DAAI;QACpG,qEAAG;QAAA,yIAA6E;QAAA,4DAAI;QACpF,uEACA;QAAA,wEACQ;QAAA,2FACR;QAAA,4DAAO;QACP;QAAA,4DAAM;QACN,qEAAG;QAAA,mMAA6H;QAAA,4DAAI;QACpI,qEACA;QAAA,wHAAqD;QAAA,iEACrD;QAAA,sIAAmE;QAAA,iEACnE;QAAA,wKAAqG;QAAA,iEACrG;QAAA,kRAA+M;QAAA,iEAC/M;QAAA,oKAAiG;QAAA,iEACjG;QAAA,uKAA+F;QAAA,iEAC/F;QAAA,0RAAsN;QAAA,iEACtN;QAAA,4DAAI;QACJ,uEACA;QAAA,wEACQ;QAAA,2JAGR;QAAA,4DAAO;QACP;QAAA,4DAAM;QACN,qEACA;QAAA,2TAA8P;QAAA,wEAA6E;QAAA,qEAAI;QAAA,4DAAI;QAAA,6DAAC;QAAA,iEACpV;QAAA,8IAA2E;QAAA,iEAC3E;QAAA,4MAAoJ;QAAA,iEACpJ;QAAA,4DAAI;QACJ,sEACI;QAAA,sEAAI;QAAA,gHAAoD;QAAA,4DAAK;QAC7D,sEAAI;QAAA,wHAAuD;QAAA,4DAAK;QAChE,sEAAI;QAAA,4fAA2b;QAAA,4DAAK;QACpc,sEAAI;QAAA,6LAAiI;QAAA,4DAAK;QAC1I,uEAAI;QAAA,kJAAsF;QAAA,4DAAK;QAC/F,uEAAI;QAAA,kOAAgK;QAAA,4DAAK;QACzK,uEAAI;QAAA,oQAA8M;QAAA,4DAAK;QACvN,uEAAI;QAAA,+IAAkF;QAAA,4DAAK;QAC/F,4DAAK;QAEL,sEACA;QAAA,oJACA;QAAA,4DAAI;QACJ,wEACA;QAAA,yEACI;QAAA,6MAIJ;QAAA,4DAAO;QACP;QAAA,4DAAM;QAEN,sEACA;QAAA,6IAA0E;QAAA,kEAC1E;QAAA,uIAAmE;QAAA,kEACnE;QAAA,sMAAkI;QAAA,kEAClI;QAAA,0KAA4G;QAAA,kEAC5G;QAAA,wKAAoG;QAAA,kEACpG;QAAA,uIAAmE;QAAA,kEAAI;QAAA,kEAEvE;QAAA,8QAC4K;QAAA,kEAC5K;QAAA,sFAAuB;QAAA,kEACvB;QAAA,8GAA+C;QAAA,kEAC/C;QAAA,gHAAiD;QAAA,kEACjD;QAAA,gHAAuD;QAAA,kEACvD;QAAA,uFAAwB;QAAA,kEACxB;QAAA,4DAAI;QACJ,uEAAI;QAAA,gGAAmC;QAAA,4DAAK;QAC5C,sEAAI;QAAA,iIAAyD;QAAA,4DAAI;QACjE,wEACA;QAAA,yEACQ;QAAA,mgBAYR;QAAA,4DAAO;QACP;QAAA,4DAAM;QACN,sEAAG;QAAA,oKAAwF;QAAA,4DAAI;QAC/F,wEACA;QAAA,yEACQ;QAAA,gNAKR;QAAA,4DAAO;QACP;QAAA,4DAAM;QACN,sEAAG;QAAA,mXAEiF;QAAA,4DAAI;QACxF,wEACA;QAAA,yEACQ;QAAA,uVAMR;QAAA,4DAAO;QACP;QAAA,4DAAM;QACN,sEACI;QAAA,yKAA2G;QAAA,kEAC3G;QAAA,wKAAgG;QAAA,kEAChG;QAAA,sHACJ;QAAA,4DAAI;QACJ,wEACI;QAAA,0ZASJ;QAAA,4DAAM;QACN,kEACA;QAAA,sEACG;QAAA,+KAA4G;QAAA,kEAC5G;QAAA,sLAAwH;QAAA,kEACxH;QAAA,sHACH;QAAA,4DAAI;QACJ,wEACI;QAAA,4YAUJ;QAAA,4DAAM;QAEN,4DAAM;;QAhOyB,0DAA2C;QAA3C,8JAA2C;QAGtE,0DAAqB;QAArB,kFAAqB;QAQV,0DAAyB;QAAzB,sFAAyB;QAKpC,0DAAqB;QAArB,kFAAqB;QAUL,0DAAuB;QAAvB,oFAAuB;;6FDb9B,2BAA2B;cALvC,uDAAS;eAAC;gBACT,QAAQ,EAAE,yBAAyB;gBACnC,WAAW,EAAE,sCAAsC;gBACnD,SAAS,EAAE,CAAC,sCAAsC,CAAC;aACpD","file":"employees-datatable-employees-datatable-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule, DatePipe } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { EmployeesDatatableComponent } from './employees-datatable.component';\r\nimport { BsDatatableModule, BsFormSelectModule } from 'ax-toolbox';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: EmployeesDatatableComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [EmployeesDatatableComponent],\r\n  exports: [EmployeesDatatableComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    BsDatatableModule,\r\n    TranslateModule.forChild(),\r\n    CollapseModule,\r\n    BsFormSelectModule\r\n  ],\r\n  providers: [\r\n    DatePipe\r\n  ]\r\n})\r\nexport class EmployeesDatatableModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Employee } from 'src/app/shared/api/models';\r\nimport { AxBsDatatableFilterType, BsFormSelectGetterFn, DtActionColumnButton, DtApiResponse, DtColumnItem, DtDataGetterFn, DtFilterItem, FilterFormatType, LabelAndValueExtended } from 'ax-toolbox';\r\nimport { DatePipe } from '@angular/common';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { EmployeesService } from 'src/app/shared/api/services';\r\nimport { first, map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-employees-datatable',\r\n  templateUrl: './employees-datatable.component.html',\r\n  styleUrls: ['./employees-datatable.component.scss']\r\n})\r\nexport class EmployeesDatatableComponent implements OnInit {\r\n\r\n  dtColumns: DtColumnItem<Employee>[] = [];\r\n\r\n  filterDataTableGetterFn: DtDataGetterFn<Employee>;\r\n\r\n  mostrarTabla: boolean = true;\r\n  mostrarDoc: boolean = true;\r\n\r\n  filtroPosition: BsFormSelectGetterFn<number>;\r\n\r\n\r\n  constructor(\r\n    public dPipe: DatePipe,\r\n    public translateSV: TranslateService,\r\n    public employeesSV: EmployeesService\r\n  ) {\r\n    this.initDatatables();\r\n  }\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  private initDatatables() {\r\n\r\n    this.initFilterPosition();\r\n\r\n    this.initDtColumns();\r\n\r\n    this.filterDataTableGetterFn = (queryParams, filters) => {\r\n      return this.employeesSV.apiEmployeesDatatablePost$Json({ body: filters as any, pi: queryParams.pi as any, ps: queryParams.ps as any })\r\n        .pipe(first())\r\n        .pipe(map((d) => new DtApiResponse<Employee>().setData({\r\n          items: d.items,\r\n          pageIndex: Number(queryParams.pi),\r\n          pageSize: Number(queryParams.ps),\r\n          total: d.total\r\n        })\r\n        )).toPromise();\r\n    };\r\n  }\r\n  private initDtColumns() {\r\n    this.dtColumns = [\r\n      new DtColumnItem().setData({\r\n        thTHeadClass: 'cell-narrow',\r\n        buttons: [\r\n          new DtActionColumnButton<Employee, string>().setData({\r\n            url: '/empleados/employees/details/{id}',\r\n            urlTarget: '_self',\r\n            iconPreffix: 'fas',\r\n            iconName: 'eye',\r\n            btnClass: 'btn btn-outline-secondary btn-sm',\r\n          }),\r\n        ],\r\n      }),\r\n      new DtColumnItem().setData({\r\n        columnName: 'Nombre',\r\n        field: 'name',\r\n        filter: true,\r\n      }), new DtColumnItem().setData({\r\n        columnName: 'Apellido',\r\n        field: 'surname',\r\n        filter: true,\r\n      }), new DtColumnItem().setData({\r\n        columnName: 'Fecha de nacimiento',\r\n        field: 'dbirth',\r\n        fieldDisplayType: 'datetime',\r\n        filter: true,\r\n        filterItem: new DtFilterItem().setData({\r\n          format: FilterFormatType.Date,\r\n          type: AxBsDatatableFilterType.date\r\n        }),\r\n        fieldDisplayMiddleware: (data) => {\r\n          if (data == null) { return ''; }\r\n          const transformed = this.dPipe.transform(data, this.translateSV.instant('FORMAT.DATETIME'));\r\n          return transformed;\r\n        },\r\n      }), new DtColumnItem().setData({\r\n        columnName: 'Fecha de comienzo',\r\n        field: 'dstart',\r\n        fieldDisplayType: 'datetime',\r\n        filter: true,\r\n        filterItem: new DtFilterItem().setData({\r\n          format: FilterFormatType.Date,\r\n          type: AxBsDatatableFilterType.date\r\n        }),\r\n        fieldDisplayMiddleware: (data) => {\r\n          if (data == null) { return ''; }\r\n          const transformed = this.dPipe.transform(data, this.translateSV.instant('FORMAT.DATETIME'));\r\n          return transformed;\r\n        },\r\n      }),\r\n      new DtColumnItem().setData({\r\n        columnName: 'Posición',\r\n        field: 'positionType',\r\n        fieldDisplayMiddleware: (data) => {\r\n          if (data == 0) {\r\n            return \"Jefe\";\r\n          } else if (data == 1) {\r\n            return \"Gerente\";\r\n          } else if (data == 2) {\r\n            return \"Supervisor\";\r\n          } else if (data == 3) {\r\n            return \"Desarrollador\";\r\n          } else {\r\n            return \"Testeador\";\r\n          }\r\n\r\n        },\r\n        filter: true,\r\n        filterItem: new DtFilterItem().setData({\r\n          format: FilterFormatType.Int,\r\n          type: AxBsDatatableFilterType.autocomplete,\r\n          getterFn: this.filtroPosition\r\n        })\r\n      }),\r\n    ];\r\n  }\r\n\r\n  initFilterPosition() {\r\n    this.filtroPosition = async () => {\r\n      const fromApi = await this.employeesSV.apiEmployeesPositionlistGet$Json({})\r\n        .pipe(first())\r\n        .toPromise();\r\n      return fromApi.map(dvalue => new LabelAndValueExtended<number>().setData({\r\n        label: dvalue.data,\r\n        value: dvalue.value\r\n      }));\r\n    };\r\n  }\r\n\r\n}\r\n","<h2 class=\"section-title my-4\">{{'PAGE.EMPLOYEES.LIST.TITLE' | translate}}</h2>\r\n\r\n<ax-bs-datatable\r\n    [columns]=\"dtColumns\"\r\n    [actionButtonShowRefresh]=\"false\"\r\n    urlData=\"api/employees/datatable\"\r\n    ></ax-bs-datatable>\r\n    <!--[dataGetterFn]=\"filterDataTableGetterFn\"-->\r\n\r\n<button #botonTablaAlt class=\"btn-primary\" (click)=\"mostrarTabla=!mostrarTabla\">Mostar tabla alternativa</button><br>\r\n\r\n<div #tablaAlt [collapse]=\"mostrarTabla\" [isAnimated]=\"true\">\r\n\r\n<h4>Método de cargado de tabla alternativo: GetterFn</h4>\r\n\r\n    <ax-bs-datatable\r\n    [columns]=\"dtColumns\"\r\n    [actionButtonShowRefresh]=\"false\"\r\n    [dataGetterFn]=\"filterDataTableGetterFn\"\r\n    ></ax-bs-datatable>\r\n\r\n</div>\r\n\r\n<br>\r\n<button #botonDocumentacion class=\"btn-primary\" (click)=\"mostrarDoc=!mostrarDoc\">Mostar documentación</button>\r\n\r\n<div #documentacion [collapse]=\"mostrarDoc\" [isAnimated]=\"true\">\r\n<hr>\r\n<h4>DOCUMENTACIÓN</h4>\r\n<p>Para crear la siguiente tabla usaremos el siguiente código:</p>\r\n<pre>\r\n<code>\r\n        &lt;ax-bs-datatable\r\n        [columns]&#61;\"dtColumns\"\r\n        [actionButtonShowRefresh]&#61;\"false\"\r\n        urlData&#61;\"api/employees/datatable\"\r\n        &gt;&lt;/ax-bs-datatable&gt;\r\n</code>\r\n</pre>\r\n<p>\r\ndtColumns será la variable que guarde las columnas en nuestro componente.\r\n</p>\r\n<pre>\r\n<code>\r\n        dtColumns: DtColumnItem&lt;Employee&gt;[] = [];\r\n</code>\r\n</pre>\r\n<p>urlData se encargará de acceder a la ruta marcada para extraer los datos de la lista en el servidor. Podemos usar un método alternativo con getterFn para cargar la tabla:</p>\r\n<pre>\r\n<code>\r\n    &lt;ax-bs-datatable\r\n    [columns]&#61;\"dtColumns\"\r\n    [actionButtonShowRefresh]&#61;\"false\"\r\n    [dataGetterFn]&#61;\"filterDataTableGetterFn\"\r\n    &gt;&lt;/ax-bs-datatable&gt;\r\n</code>\r\n</pre>\r\n<p>dataGetterFn sustituirá a urlData. filterDataTableGetterFn será la variable que se encargue de cargar los datos de la tabla:</p>\r\n<pre>\r\n<code>\r\n    filterDataTableGetterFn: DtDataGetterFn&lt;Employee&gt;;\r\n</code>\r\n</pre>\r\n<p>Para cargar los datos en la variable usaremos el siguiente código en el componente:</p>\r\n<pre>\r\n<code>\r\n    this.filterDataTableGetterFn = (queryParams, filters) =&gt; &#123;\r\n    return this.employeesSV.apiEmployeesDatatablePost$Json(&#123;body:filters as any,pi:queryParams.pi as any,ps:queryParams.ps as any&#125;)\r\n    .pipe(first())\r\n    .pipe(map((d) =&gt; new DtApiResponse&lt;Employee&gt;().setData(&#123;\r\n      items:d.items,\r\n      pageIndex:Number(queryParams.pi),\r\n      pageSize:Number(queryParams.ps),\r\n      total:d.total\r\n    &#125;)\r\n    )).toPromise();\r\n  &#125;;\r\n  &#125;;\r\n</code>\r\n</pre>\r\n<p>De está forma accederemos a la api y maparemos los datos con el formato que acepta datatable.</p>\r\n<p>Para establecer las columnas de la tabla modificaremos la variable dtColumns:</p>\r\n<pre>\r\n<code>\r\n        this.dtColumns = []\r\n</code>\r\n</pre>\r\n<p>Dentro de los corchetes añadiremos los disitintos DTColumnItem. A cada DtColumnItem podemos añadirle las siguientes opciones:</p>\r\n<p>\r\n- columnName (string) - Nombre que tendrá la columna.<br>\r\n- field (string) - Variable del componente que mostrará la columna.<br>\r\n- fieldDisplayWrapperClass (string) - Clase que se asignará al div contenido en cada td de la columna<br>\r\n- fieldDisplayType (FieldDisplayType) - Indica el tipo de campo que mostrará la columna. Los valores posibles a indicar son: 'text', 'html', 'url', 'boolean', 'date', 'datetime', 'time', 'currency', 'array'.<br>\r\n- fieldDisplayPreffix (string) - Añade un texto delante de cada valor en cada fila de la columna.<br>\r\n- fieldDisplaySuffix (string) - Añade un texto detrás de cada valor en cada fila de la columna.<br>\r\n- fieldDisplayMiddleware (FieldDisplayMiddleware&lt;TRow, TCellValue&gt;) - Nos permite formatear los datos de la celda de la forma deseada. Por ejemplo, para añadir el prefijo \"AX-\" delante de cada dato usaríamos:<br>\r\n</p>\r\n<pre>\r\n<code>\r\n        fieldDisplayMiddleware: (data) => &#123; \r\n            return ('AX-' + data);\r\n        &#125;\r\n</code>\r\n</pre>\r\n<p> \r\n- fieldDisplayFormatDate (string), fieldDisplayFormatTime (string) y fieldDisplayFormatDateTime (string) - Indica el formato de fecha y hora en el caso de que sea un campo de fecha y/o hora. Puedes ver los distintos formartos que se pueden aplicar desde <a href=\"https://momentjs.com/docs/#/parsing/string-format/\" target=\"_black\">aquí</a>.<br>\r\n- filter (boolean) - Indica si se podrá filtrar por la columna de la tabla.<br>\r\n- filterItem (DtFilterItem&lt;unknown&gt;) - Personaliza el campo de filtrado de la columna. Podemos asignarle los siguientes valores al filterItem:<br>\r\n</p>\r\n<ul>\r\n    <li>field (string) - Variable a modificar por el filtro.</li>\r\n    <li>value (TValue) - Valor que tendrá el filtro por defecto</li>\r\n    <li>op (FilterOpType) - Tipo de operador que usará el filtro. Las opciones son: Eq (Equal), Ne (Not equal), EqualOrNotEqual (equal and not equal), Lt (less than), Le (Less or equal), Gt (Greater), Ge (Greater or equal), Bw (Begins with), Bn (Does not begin with), In (Is in), Ni (Is not in), Ew (Ends with), En (Does not end with), Cn (Contains), Nc (Does not contain), Nu (Is null), Nn(Is not null), NoTextOperators, TextOperators, NullOperators.</li>\r\n    <li>format (FilterFormatType) - Indica el formato del filtro. Las opciones son: Literal, String, DateTime, Guid, Date = 2, Bool, Int.</li>\r\n    <li>options (LabelAndValueExtended&lt;TValue, any&gt;[]) - Añade opciones extra al filtro.</li>\r\n    <li>type (AxBsDatatableFilterType) - Tipo de input que usará el filtro. Las opciones son: text, textarea, date, number, dataselect, autocomplete = 5, daterange = 6.</li>\r\n    <li>getterFn (BsAutocompleteGetterFn&lt;TFilterValue&gt; | BsFormSelectGetterFn&lt;TFilterValue&gt;) - Variable getterFn que servirá para generar los datos del filtro si este es un dataselect o un autocomplete.</li>\r\n    <li>filterText (string) - Texto por defecto para el filtro si es de tipo autocomplete.</li>\r\n</ul>\r\n        \r\n<p>\r\nPor ejemplo, podemos establecer un datepicker para el filtro de la siguiente forma:\r\n</p>\r\n<pre>\r\n<code>\r\n    filterItem:  new DtFilterItem().setData(&#123;\r\n        format:FilterFormatType.Date,\r\n        type:AxBsDatatableFilterType.date,\r\n        &#125;)\r\n</code>\r\n</pre>\r\n\r\n<p>  \r\n- sort: (boolean) - Indica si se podrá ordenar por la columna de la tabla.<br>\r\n- isSorting (boolean) - Indica si se está ordenando por la columna.<br>\r\n- sortDirection (SortDirection) - Indica el sentido en que se hace la ordenación. Las opciones son: Ascendent = 0, Descendent = 1.<br>\r\n- buttons (DtActionColumnButton&lt;TRow, TCellValue&gt;[]) - Añade botones a la columna. Ver ejemplo debajo.<br>\r\n- buttonWrapperClass (string) - Clase que se asignará al div que contiene los botones en la columna.<br>\r\n- thTHeadClass (string) - Clase que se asignará al th de la columna<br><br>\r\n    \r\nOtros campos que puedes añadir son:\r\n- fieldExcelExportMiddleware (FieldDisplayMiddleware&lt;TRow, TCellValue&gt;) Nos permite formatear los datos de la celda de la forma deseada cuando son exportados a excel.<br>\r\n- fieldDisplay (string)<br>\r\n- isBooleanFalseIcon (ColumnItemIconDefinition)<br>\r\n- isBooleanBooleanIcon (ColumnItemIconDefinition)<br>\r\n- valueIcons (ColumnItemIconConfig&lt;TCellValue&gt;[])<br>\r\n- fieldCssClass (string)<br>\r\n</p>\r\n<h4>Ejemplo de DtColumns para una tabla</h4>\r\n<p> La primera columna de la tabla será el botón de detalles:</p>\r\n<pre>\r\n<code>\r\n        new DtColumnItem().setData(&#123;\r\n            thTHeadClass: 'cell-narrow',\r\n            buttons: [\r\n            new DtActionColumnButton&lt;Employee, string&gt;().setData(&#123;\r\n                url: '/empleados/employees/details/&#123;id&#125;',\r\n                urlTarget: '_self',\r\n                iconPreffix: 'fas',\r\n                iconName: 'eye',\r\n                btnClass: 'btn btn-outline-secondary btn-sm',\r\n            &#125;),\r\n            ],\r\n            &#125;),\r\n</code>\r\n</pre>\r\n<p>Para añadir una columna de un campo de texto añadiremos el siguiente código a dtColumns:</p>\r\n<pre>\r\n<code>\r\n        new DtColumnItem().setData(&#123;\r\n            columnName: 'Nombre',\r\n            field: 'name',\r\n            filter: true,\r\n            &#125;),\r\n</code>\r\n</pre>\r\n<p>columnName indica el nombre que se mostrará en el header de la columna field será el nombre del atributo del objeto que queremos mostrar en la columna filter indica si se podrá filtrar por esa columna\r\n\r\nPara los campos que se traten de una fecha añadiremos el siguiente código adicional:</p>\r\n<pre>\r\n<code>\r\n        fieldDisplayType: 'datetime',\r\n        fieldDisplayMiddleware: (data) => &#123;\r\n            if (data == null) &#123; return ''; &#125;\r\n            const transformed = this.dPipe.transform(data, this.translateSV.instant('FORMAT.DATETIME'));\r\n            return transformed;\r\n        &#125;\r\n</code>\r\n</pre>\r\n<p>\r\n    Primero se va a crear una variable BsFormSelectGetterFn para obtener las position. Para ello, crearemos el <br>\r\n    método que se encargará de traernos estos datos desde la api y mappearlos para poder ser usados.<br>\r\n    Inicializamos este metodo dentro del initDatatables().\r\n</p>\r\n<pre>\r\n    this.filtroPosition = async ()=>&#123;\r\n        const fromApi = await this.employeesSV.apiEmployeesPositionlistGet$Json(&#123;&#125;)\r\n        .pipe(first())\r\n        .toPromise();\r\n        return fromApi.map(dvalue => new LabelAndValueExtended&lt;number&gt;().setData( &#123;\r\n           label: dvalue.data,\r\n           value: dvalue.value\r\n           &#125;));\r\n        &#125;;\r\n</pre>\r\n<br>\r\n<p>\r\n   Una vez creamos el metodo, pasamos a añadirselo al dtColumns para que cree una columna que se pueda filtrar <br>\r\n   por los valores que le pasaremos. Para ello, cuando creamos un filterItem, le pasamos esta variable BsFormSelectGetterFn<br>\r\n   creada con anterioridad y ya inicializada al getterFn.\r\n</p>\r\n<pre>\r\n    new DtColumnItem().setData(&#123;\r\n        columnName: 'Posición',\r\n        field: 'position',\r\n        filter: true,\r\n        filterItem: new DtFilterItem().setData(&#123;\r\n          format:FilterFormatType.Int,\r\n          type:AxBsDatatableFilterType.autocomplete,\r\n          getterFn: this.filtroPosition\r\n          &#125;)\r\n        &#125;),\r\n</pre>\r\n\r\n</div>"],"sourceRoot":"webpack:///"}