{"version":3,"sources":["./src/app/shared/utils/utils.ts","./src/app/shared/guards/translate/translate.guard.ts","fs (ignored)","crypto (ignored)","stream (ignored)","./src/app/shared/interceptors/api-headers/api-header-kub/api-header-kub.interceptor.ts","./src/app/shared/services/seo/seo.service.ts","./src/environments/environment.ts","./src/app/shared/api/services/language.service.ts","./src/app/shared/services/dictionary/dictionary.service.ts","./src/app/shared/api/services/access.service.ts","./src/app/shared/api/api-configuration.ts","./src/app/shared/models/_basic/destroy-subscriptions.ts","./src/app/shared/interceptors/api-error/api-error.interceptor.ts","./src/app/shared/models/_basic/set-data.ts","./src/app/shared/api/services.ts","./src/app/shared/api/services/layout-menu.service.ts","./node_modules/moment/locale sync ^\\.\\/.*$","./src/app/app.component.ts","./src/app/app.component.html","./src/app/shared/api/services/imports.service.ts","./src/app/shared/_third-party/ep-components/components/ep-fullscreen-img/services/ep-fullscreen-img.service.ts","./src/app/app.module.ts","./src/app/shared/models/api-translations/api-translations.ts","./src/app/shared/api/services/users.service.ts","./src/app/shared/services/token/token.service.ts","./src/app/shared/_third-party/ep-components/directives/auto-blur/auto-blur.directive.ts","./src/app/shared/api/services/employees.service.ts","./src/app/shared/api/request-builder.ts","./src/app/shared/api/base-service.ts","./src/app/shared/interceptors/api-header-jwt/api-header-jwt.interceptor.ts","./src/app/shared/api/api.module.ts","./src/app/shared/_third-party/ep-components/components/ep-fullscreen-img/ep-fullscreen-img.module.ts","./src/app/shared/api/services/account.service.ts","./src/app/app-routing.module.ts","./src/app/shared/_third-party/ep-components/components/ep-fullscreen-img/ep-fullscreen-img.component.ts","./src/app/shared/_third-party/ep-components/components/ep-fullscreen-img/ep-fullscreen-img.component.html","./src/app/shared/guards/third-party-async-libraries/youtube/youtube.guard.ts","./src/app/shared/api/services/project.service.ts","./src/app/shared/interceptors/api-headers/api-header-lang/api-header-lang.interceptor.ts","./src/app/shared/_third-party/ep-components/directives/auto-blur/auto-blur.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["export function applyMixins(finalClass: any, classesToCombine: any[]) {\r\n    classesToCombine.forEach(baseCtor => {\r\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\r\n            if (name !== 'constructor') {\r\n                finalClass.prototype[name] = baseCtor.prototype[name];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * https://stackoverflow.com/a/38327540\r\n */\r\nexport function groupBy<ArrayItemType, KeyType>(list: ArrayItemType[], keyGetter: (item: ArrayItemType) => KeyType) {\r\n    const map = new Map<KeyType, ArrayItemType[]>();\r\n    list.forEach((item) => {\r\n        const key = keyGetter(item);\r\n        const collection = map.get(key);\r\n        if (!collection) {\r\n            map.set(key, [item]);\r\n        } else {\r\n            collection.push(item);\r\n        }\r\n    });\r\n    return map;\r\n}\r\nexport function removeHtml(input: string) {\r\n    const el = document.createElement('input');\r\n    el.innerHTML = input;\r\n    return el.innerText;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  CanActivate, CanActivateChild, ActivatedRouteSnapshot,\r\n  RouterStateSnapshot, UrlTree, CanLoad, Router, ParamMap,\r\n  UrlSegment, Route\r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n//#region Angular locales\r\nimport { registerLocaleData } from '@angular/common';\r\nimport localeEN from '@angular/common/locales/en-GB';\r\nimport localeES from '@angular/common/locales/es';\r\n//#endregion\r\n//#region Boostrap locales\r\nimport { defineLocale } from 'ngx-bootstrap/chronos';\r\nimport {\r\n  esLocale,\r\n  enGbLocale\r\n} from 'ngx-bootstrap/locale';\r\n//#endregion\r\n\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { LanguageService } from '../../api/services';\r\nimport { SeoService } from '../../services/seo/seo.service';\r\n\r\n\r\n//#region LANGUAGE DECLARATIONS - KEEP THIS UPDATED\r\n// Every key should be present at FRONTEND_LANG_CODES.\r\n// If missing, LANGUAGES[LANGUAGE_DEFAULT] will be used.\r\nexport const LANGUAGES: AppLangBsLang = {\r\n  es: { angular: localeES, bootstrap: esLocale },\r\n  en: { angular: localeEN, bootstrap: enGbLocale },\r\n};\r\nexport const LANGUAGE_CODES = Object.keys(LANGUAGES);\r\nexport const LANGUAGE_DEFAULT = LANGUAGE_CODES[0];\r\n// npm run translate will pick these values.\r\n// see https://github.com/biesbjerg/ngx-translate-extract for more info.\r\n// Dont't attempt to get the function inside a for loop: it won't work.\r\nimport { marker } from '@biesbjerg/ngx-translate-extract-marker';\r\nmarker('LANG.ES');\r\nmarker('LANG.EN');\r\nmarker('LANG.ES_SHORT');\r\nmarker('LANG.EN_SHORT');\r\n\r\nimport { markApiErrorStrings } from '../../models/api-translations/api-translations';\r\n// Keep this function's content updates\r\nmarkApiErrorStrings();\r\n//#endregion\r\n\r\n\r\nexport const LANG_ROUTE_MARKER = ':navLangCode';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TranslateGuard implements CanActivate, CanActivateChild, CanLoad {\r\n  private _isLangInitialized = false;\r\n  constructor(\r\n    public translateSV: TranslateService,\r\n    public langSV: LanguageService,\r\n    public seoSV: SeoService,\r\n    public router: Router,\r\n  ) {\r\n    this.registerLocales();\r\n  }\r\n  canLoad(\r\n    route: Route,\r\n    segments: UrlSegment[]): boolean | Observable<boolean> | Promise<boolean> {\r\n    let segment = segments.find((s) => s.parameterMap.has(LANG_ROUTE_MARKER));\r\n    if (segment == null) {\r\n      segment = new UrlSegment('', {});\r\n    }\r\n    return this.isLangParamMapInitialized(segment.parameterMap);\r\n  }\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    return this.isLangInitialized(next);\r\n  }\r\n  canActivateChild(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    return this.isLangInitialized(next);\r\n  }\r\n\r\n  private registerLocales() {\r\n    const defLang = LANGUAGES[LANGUAGE_DEFAULT];\r\n    if (!defLang.angular || !defLang.bootstrap) {\r\n      throw new Error('Default language is missing some definitions.');\r\n    }\r\n\r\n    for (const l of Object.keys(LANGUAGES)) {\r\n      const lang = LANGUAGES[l];\r\n      const ang = lang.angular || defLang.angular;\r\n      const bs = lang.bootstrap || defLang.bootstrap;\r\n\r\n      registerLocaleData(ang, l);\r\n      defineLocale(l, bs);\r\n    }\r\n  }\r\n\r\n\r\n  private isLangInitialized(next: ActivatedRouteSnapshot) {\r\n    return this.isLangParamMapInitialized(next.paramMap);\r\n  }\r\n  private isLangParamMapInitialized(paramMap: ParamMap) {\r\n    return new Promise<boolean>((resolve) => {\r\n      if (this._isLangInitialized) {\r\n        resolve(true);\r\n        return;\r\n      }\r\n\r\n      let langCode = paramMap.get(LANG_ROUTE_MARKER);\r\n      if (langCode == null) { langCode = LANGUAGE_DEFAULT; }\r\n\r\n      const s = this.translateSV.use(langCode)\r\n        .subscribe(() => {\r\n          this.translateSV.addLangs(LANGUAGE_CODES);\r\n          this._isLangInitialized = true;\r\n          this.seoSV.init().then(() => {\r\n            resolve(true);\r\n          });\r\n          setTimeout(() => {\r\n            s.unsubscribe();\r\n          }, 0);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport class AppLangBsLang {\r\n  [langCode: string]: {\r\n    angular?: any,\r\n    bootstrap?: any,\r\n    // bootstrap: any,\r\n  }\r\n}\r\n\r\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor, HttpResponse, HttpErrorResponse\r\n} from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class ApiHeaderKubInterceptor implements HttpInterceptor {\r\n  private kubHeaders: KubHeaders = {};\r\n\r\n  constructor(\r\n    public toastSV: ToastrService\r\n  ) {\r\n    this.kubHeaders = JSON.parse(localStorage.getItem('kubh')) || {};\r\n  }\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    const output = next.handle(request)\r\n      .pipe(\r\n        catchError((error) => {\r\n          if (error instanceof HttpErrorResponse) {\r\n            this.processResponse(error);\r\n          }\r\n          return throwError(error);\r\n        }),\r\n        map((r) => {\r\n          if (r instanceof HttpResponse) {\r\n            this.processResponse(r);\r\n          }\r\n          return r;\r\n        }));\r\n    return output;\r\n  }\r\n\r\n  private processResponse(response: HttpResponse<unknown> | HttpErrorResponse) {\r\n    const kubHeaders = response.headers.keys()\r\n      .filter((k) => k.toLowerCase().startsWith('kub'))\r\n      .map((k) => ({ key: k, value: response.headers.get(k) }));\r\n    this.checkKubHeaders(kubHeaders);\r\n  }\r\n\r\n  private checkKubHeaders(newHeaders: { key: string, value: string }[]) {\r\n    const changes: { [key: string]: { old: string, new: string } } = {};\r\n    let hasChanges = false;\r\n\r\n    for (const h of newHeaders) {\r\n      if (this.kubHeaders[h.key] !== h.value) {\r\n        changes[h.key] = {\r\n          old: this.kubHeaders[h.key],\r\n          new: h.value\r\n        };\r\n        this.kubHeaders[h.key] = h.value;\r\n        hasChanges = true;\r\n      }\r\n    }\r\n\r\n    if (hasChanges) {\r\n      const mapped = Object.keys(changes).map((k) => {\r\n        let msg = `${k} `;\r\n        if (changes[k].old) { msg += `-> ${changes[k].old} `; }\r\n        msg += `--new-> ${changes[k].new}`;\r\n        return msg;\r\n      });\r\n      this.toastSV.info(mapped.join('<hr>'), 'Kubernetes changed', { enableHtml: true });\r\n      localStorage.setItem('kubh', JSON.stringify(this.kubHeaders));\r\n    }\r\n  }\r\n}\r\nexport type KubHeaders = { [key: string]: string };\r\n","import { Injectable } from '@angular/core';\r\nimport { Title, Meta, MetaDefinition } from '@angular/platform-browser';\r\n// import { AppInfoService } from '../layout/app-info/app-info.service';\r\nimport { SetData } from '../../models/_basic/set-data';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { removeHtml } from '../../utils/utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SeoService {\r\n  private _isInitted = false;\r\n  public get isInitted() { return this._isInitted; }\r\n\r\n  private tagsInUse: string[] = [];\r\n  constructor(\r\n    // public appInfoSV: AppInfoService,\r\n    public metaSV: Meta,\r\n    public titleSV: Title,\r\n    public translate: TranslateService,\r\n  ) { }\r\n\r\n  /**\r\n   * Sets the initial metadata values.\r\n   */\r\n  init() {\r\n    // if (this.isInitted) { throw new Error('Metadata has already been initialized.'); }\r\n    if (this.isInitted) { return new Promise<void>((resolve) => { resolve(); }); }\r\n    this._isInitted = true;\r\n    return this.setMetadata({});\r\n  }\r\n\r\n  setMetadata(data: Partial<SeoMetadata>, robots: MetadataRobotConfiguration[] = []) {\r\n    return new Promise<void>((resolve) => {\r\n      this.translate.get('APP_NAME').toPromise().then((APP_NAME) => {\r\n        const phData = new SeoMetadata()\r\n          .setData(this.sanitizeMetadata(data))\r\n          .setData({ Author: data.Author || APP_NAME });\r\n        this.titleSV.setTitle(`${(phData.Title ? `${phData.Title} | ` : '')}${APP_NAME}`);\r\n\r\n        this.clearMetadata();\r\n\r\n        const asMetadataDefinitions = phData.toMetaDefinitions(robots);\r\n        this.tagsInUse = asMetadataDefinitions.map((t) => t.name);\r\n\r\n        this.metaSV.addTags(asMetadataDefinitions, true);\r\n\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n  clearMetadata() {\r\n    for (const t of this.tagsInUse) {\r\n      this.removeMetadataByName(t);\r\n    }\r\n  }\r\n\r\n  private removeMetadataByName(tagName: string) {\r\n    this.metaSV.removeTag(`name=${tagName}`);\r\n  }\r\n\r\n  private sanitizeMetadata(data: Partial<SeoMetadata>) {\r\n    if (data == null) { data = {}; }\r\n    if (data.Author) { data.Author = removeHtml(data.Author); }\r\n    if (data.Description) { data.Description = removeHtml(data.Description); }\r\n    if (data.Keywords) { data.Keywords = removeHtml(data.Keywords); }\r\n    if (data.ObjUrl) { data.ObjUrl = removeHtml(data.ObjUrl); }\r\n    if (data.ObjUrlFull) { data.ObjUrlFull = removeHtml(data.ObjUrlFull); }\r\n    if (data.Title) { data.Title = removeHtml(data.Title); }\r\n\r\n    return data;\r\n  }\r\n}\r\n\r\nexport class SeoMetadata extends SetData<SeoMetadata> {\r\n  Description: string;\r\n  Keywords: string;\r\n  ObjId: number;\r\n  ObjUrl: string;\r\n  ObjUrlFull: string;\r\n  Title: string;\r\n  Author: string;\r\n\r\n  toMetaDefinitions(robots: MetadataRobotConfiguration[]): MetaDefinition[] {\r\n    if (!robots || robots.length === 0) { robots = [MetadataRobotConfiguration.Index, MetadataRobotConfiguration.Follow]; }\r\n    return [\r\n      { name: 'keywords', content: this.Keywords || '' },\r\n      { name: 'description', content: this.Description || '' },\r\n      { name: 'author', content: this.Author || '' },\r\n      { name: 'robots', content: robots.join(', ') },\r\n    ];\r\n  }\r\n}\r\nexport enum MetadataRobotConfiguration {\r\n  All = 'all',\r\n  NoIndex = 'noindex',\r\n  NoFollow = 'nofollow',\r\n  None = 'none',\r\n  NoArchive = 'noarchive',\r\n  NoSnippet = 'nosnippet',\r\n  NoOdp = 'noodp',\r\n  NoTranslate = 'notranslate',\r\n  NoImageIndex = 'noimageindex',\r\n  Index = 'index',\r\n  Follow = 'follow',\r\n  Archive = 'archive',\r\n  Snippet = 'snippet',\r\n  Odp = 'odp',\r\n  Translate = 'translate',\r\n  ImageIndex = 'imageindex',\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { LanguageDto } from '../models/language-dto';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LanguageService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiLanguageGet\r\n   */\r\n  static readonly ApiLanguageGetPath = '/api/language';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiLanguageGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiLanguageGet$Plain$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<LanguageDto>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, LanguageService.ApiLanguageGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<LanguageDto>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiLanguageGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiLanguageGet$Plain(params?: {\r\n\r\n  }): Observable<Array<LanguageDto>> {\r\n\r\n    return this.apiLanguageGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<LanguageDto>>) => r.body as Array<LanguageDto>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiLanguageGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiLanguageGet$Json$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<LanguageDto>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, LanguageService.ApiLanguageGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<LanguageDto>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiLanguageGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiLanguageGet$Json(params?: {\r\n\r\n  }): Observable<Array<LanguageDto>> {\r\n\r\n    return this.apiLanguageGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<LanguageDto>>) => r.body as Array<LanguageDto>)\r\n    );\r\n  }\r\n\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { TranslateService, LangChangeEvent } from '@ngx-translate/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { LanguageService } from '../../api/services';\r\nimport { LanguageDto } from '../../api/models/language-dto';\r\nimport { StringUtilities } from 'ax-toolbox';\r\n\r\n/**\r\n * This service mantains an updated dictionary with all the translations available\r\n * from the TranslateService. Its static `dictionary` property is used for Interceptors,\r\n * so that there is no circular dependencies.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DictionaryService implements OnDestroy {\r\n  // static = avoid circular dependencies in Interceptors\r\n  static dictionary = {};\r\n  static currentLanguage: string;\r\n\r\n  serverSideLangs: LanguageDto[] = [];\r\n  isInitialized = false;\r\n\r\n  private subs: Subscription[] = [];\r\n\r\n\r\n  static getFromStatic(dictionaryKey: string): string {\r\n    return StringUtilities.formatFromObject(`{${dictionaryKey}}`, DictionaryService.dictionary)\r\n  }\r\n  constructor(\r\n    public translate: TranslateService,\r\n    public languageSV: LanguageService,\r\n  ) {\r\n    this.init();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subs.forEach(s => s.unsubscribe());\r\n  }\r\n\r\n  private init() {\r\n    const s = this.translate.onLangChange\r\n      .subscribe((data: LangChangeEvent) => {\r\n        DictionaryService.currentLanguage = data.lang;\r\n        DictionaryService.dictionary = data.translations;\r\n\r\n        document.getElementsByTagName('html').item(0).setAttribute('lang', data.lang);\r\n      });\r\n    const s2 = this.languageSV.apiLanguageGet$Json()\r\n      .subscribe((data) => {\r\n        this.serverSideLangs = data;\r\n        setTimeout(() => {\r\n          s2.unsubscribe();\r\n        }, 3000);\r\n      });\r\n\r\n    this.subs.push(s);\r\n  }\r\n\r\n}\r\n","/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AccessService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiAccessAccessGet\r\n   */\r\n  static readonly ApiAccessAccessGetPath = '/api/access/access';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiAccessAccessGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiAccessAccessGet$Plain$Response(params?: {\r\n    'p'?: null | string;\r\n\r\n  }): Observable<StrictHttpResponse<boolean>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, AccessService.ApiAccessAccessGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('p', params['p'], {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: String((r as HttpResponse<any>).body) === 'true' }) as StrictHttpResponse<boolean>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiAccessAccessGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiAccessAccessGet$Plain(params?: {\r\n    'p'?: null | string;\r\n\r\n  }): Observable<boolean> {\r\n\r\n    return this.apiAccessAccessGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<boolean>) => r.body as boolean)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiAccessAccessGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiAccessAccessGet$Json$Response(params?: {\r\n    'p'?: null | string;\r\n\r\n  }): Observable<StrictHttpResponse<boolean>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, AccessService.ApiAccessAccessGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('p', params['p'], {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: String((r as HttpResponse<any>).body) === 'true' }) as StrictHttpResponse<boolean>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiAccessAccessGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiAccessAccessGet$Json(params?: {\r\n    'p'?: null | string;\r\n\r\n  }): Observable<boolean> {\r\n\r\n    return this.apiAccessAccessGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<boolean>) => r.body as boolean)\r\n    );\r\n  }\r\n\r\n}\r\n","/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Global configuration\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ApiConfiguration {\r\n  rootUrl: string = '';\r\n}\r\n\r\n/**\r\n * Parameters for `ApiModule.forRoot()`\r\n */\r\nexport interface ApiConfigurationParams {\r\n  rootUrl?: string;\r\n}\r\n","import { Directive, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { DestroySubscriptions as OriginalDestroySubscriptions } from 'ax-toolbox';\r\n\r\n/**\r\n * @deprecated use `DestroySubscriptions` from `ax-toolbox` instead\r\n */\r\n@Directive()\r\nexport class DestroySubscriptionsDirective extends OriginalDestroySubscriptions implements OnDestroy {\r\n    ngOnDestroy() {\r\n        super.ngOnDestroy();\r\n        this.subs.forEach((s) => s.unsubscribe());\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { ToastrService, IndividualConfig } from 'ngx-toastr';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpErrorResponse\r\n} from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { SetData } from '../../models/_basic/set-data';\r\nimport { DictionaryService } from '../../services/dictionary/dictionary.service';\r\nimport { marker } from '@biesbjerg/ngx-translate-extract-marker';\r\n\r\n// STATUS CODE GENERIC ERRORS\r\nmarker('TOAST_ERR_HTTP_0_TITLE');\r\nmarker('TOAST_ERR_HTTP_0_BODY');\r\n\r\n@Injectable()\r\nexport class ApiErrorInterceptor implements HttpInterceptor {\r\n  private toastSV: ToastrService;\r\n  constructor(\r\n    private injector: Injector,\r\n  ) {\r\n    this.toastSV = this.injector.get(ToastrService);\r\n  }\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    return next.handle(request)\r\n      .pipe(catchError(error => {\r\n        if (error instanceof ErrorEvent) { }\r\n        else if (error instanceof HttpErrorResponse) {\r\n          let func: ServerSideErrorHandler = this['handleServerStatus' + error.status];\r\n          if (func) {\r\n            func = func.bind(this);\r\n            const errorMessage = func(error);\r\n\r\n            if (errorMessage && errorMessage.toastData && (errorMessage.toastData.title || errorMessage.toastData.message)) {\r\n              const config: Partial<IndividualConfig> = { extendedTimeOut: 4000 };\r\n              if (errorMessage.toastData.isHtml) { config.enableHtml = true; }\r\n              // if (errorMessage.iconCssClass) config = {icon};\r\n              this.toastSV.error(errorMessage.toastData.message, errorMessage.toastData.title, config);\r\n            }\r\n            if (errorMessage) {\r\n              return throwError(errorMessage);\r\n            }\r\n\r\n          }\r\n        }\r\n\r\n        return throwError(error);\r\n      }));\r\n  }\r\n\r\n\r\n  private handleServerStatus0(error: HttpErrorResponse) {\r\n    return new ServerSideError().setData({\r\n      toastData: new ErrorAsToast().setData({\r\n        iconCssClass: 'fas fa-plug',\r\n        title: DictionaryService.getFromStatic('TOAST_ERR_HTTP_0_TITLE'),\r\n        message: DictionaryService.getFromStatic('TOAST_ERR_HTTP_0_BODY'),\r\n      }),\r\n    });\r\n  }\r\n  private handleServerStatus400(error: HttpErrorResponse) {\r\n    const err = this.handleServerStatusGeneric(error);\r\n    return err;\r\n  }\r\n  private handleServerStatus404(error: HttpErrorResponse) {\r\n    const err = this.handleServerStatusGeneric(error);\r\n    return err;\r\n  }\r\n\r\n  private handleServerStatusGeneric(error: HttpErrorResponse) {\r\n    let parsed: ServerSideError = null;\r\n    // let toast: ErrorAsToast = null;\r\n    if (error.error) {\r\n      try {\r\n        let asObj: any = null;\r\n        if (typeof (error.error) === 'string') {\r\n          asObj = JSON.parse(error.error);\r\n        } else if (typeof (error.error) === 'object') {\r\n          asObj = error.error;\r\n        }\r\n        parsed = new ServerSideError();\r\n        parsed.errorData = asObj;\r\n        if (typeof (asObj) === 'string') { parsed.toastData.title = error.error; }\r\n        else {\r\n          if (asObj) {\r\n            if (asObj._title) {\r\n              if (asObj._title instanceof (Array)) {\r\n                parsed.toastData.isHtml = true;\r\n                parsed.toastData.title = (asObj._title as string[])\r\n                  .map((key) => DictionaryService.dictionary[key] || key)\r\n                  .join('<br>');\r\n              }\r\n              else if (typeof (asObj._title) === 'string') {\r\n                parsed.toastData.message = DictionaryService.dictionary[asObj._title];\r\n              }\r\n            }\r\n            if (asObj._message) {\r\n              if (asObj._message instanceof (Array)) {\r\n                parsed.toastData.message = (asObj._message as string[])\r\n                  .map((key) => DictionaryService.dictionary[key] || key)\r\n                  .join('<br>');\r\n                parsed.toastData.isHtml = true;\r\n              }\r\n              else if (typeof (asObj._message) === 'string') {\r\n                parsed.toastData.message = DictionaryService.dictionary[asObj._message];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      catch (e) {\r\n\r\n      }\r\n    }\r\n    return parsed;\r\n  }\r\n}\r\n\r\ntype ServerSideErrorHandler = (error: HttpErrorResponse) => ServerSideError;\r\nclass ErrorAsToast extends SetData<ErrorAsToast> {\r\n  title: string;\r\n  message: string;\r\n  iconCssClass = 'fa fa-warning';\r\n  isHtml = false;\r\n}\r\nexport class ServerSideError extends SetData<ServerSideError> {\r\n  toastData: ErrorAsToast = new ErrorAsToast();\r\n  errorData: { [key: string]: string[] }\r\n}\r\n","export class SetData<TExtendedClass = any> {\r\n    /**\r\n     * Sets the specified properties for this instance, using a partial object.\r\n     * Only set properties will be applied (you may use `null` value. `undefined` will may be ignored).\r\n     * \r\n     * When SetData is extended, if the class uses an instanced class as a property, this `setData` should be extended\r\n     * to call for the class' constructor. Otherwise, methods will not be initialized.\r\n     * \r\n     * @param newData The partial object to extend. A full instance may be used.\r\n     * \r\n     * @example\r\n     ```typescript\r\n     export class MySpecialClass extends SetData {\r\n        myPropertyString = 'some-data'\r\n        myPropertyClass = new MySubclass();\r\n\r\n        setData(newData: Partial<this>) {\r\n            // myPropertyString will be automatically set by the super method.\r\n            // myPropertyClass must be propertly instanced and properties assigned.\r\n            if (newData == null) { newData = {}; }\r\n            if (newData.myPropertyClass) {\r\n                // tip: MySubclass could extend SetData aswell to ease this work.\r\n                const mpcPlaceholder = new MySubclass()\r\n                    .setData(newData.myPropertyClass);\r\n                this.myPropertyClass = mpcPlaceholder;\r\n                \r\n                // Super important to call delete. Otherwise, super will assign the data again, without a class instance\r\n                delete newData.myPropertyClass;\r\n            }\r\n            return super.setData(newData);\r\n        }\r\n     }\r\n     ```\r\n     */\r\n    setData(newData: Partial<TExtendedClass>) {\r\n        if (newData == null) { newData = {}; }\r\n        if (typeof (newData) !== 'object') { throw Error(`[${typeof (newData)}] is not a valid SetData object.`); }\r\n\r\n        for (const k of Object.keys(newData)) {\r\n            try {\r\n                if (this[k] !== newData[k]) {\r\n                    this[k] = newData[k];\r\n                }\r\n            } catch (e) {\r\n                // Getters cannot be set. Skip.\r\n                if (e instanceof TypeError && e.message != null && e.message.endsWith('which has only a getter')) {\r\n                    return;\r\n                }\r\n                console.error(e);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n}\r\n","export { AccessService } from './services/access.service';\r\nexport { AccountService } from './services/account.service';\r\nexport { EmployeesService } from './services/employees.service';\r\nexport { ImportsService } from './services/imports.service';\r\nexport { LanguageService } from './services/language.service';\r\nexport { LayoutMenuService } from './services/layout-menu.service';\r\nexport { ProjectService } from './services/project.service';\r\nexport { UsersService } from './services/users.service';\r\n","/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { LayoutMenuItem } from '../models/layout-menu-item';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LayoutMenuService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiAdminLayoutmenuGet\r\n   */\r\n  static readonly ApiAdminLayoutmenuGetPath = '/api/admin/layoutmenu';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiAdminLayoutmenuGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiAdminLayoutmenuGet$Plain$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<LayoutMenuItem>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, LayoutMenuService.ApiAdminLayoutmenuGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<LayoutMenuItem>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiAdminLayoutmenuGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiAdminLayoutmenuGet$Plain(params?: {\r\n\r\n  }): Observable<Array<LayoutMenuItem>> {\r\n\r\n    return this.apiAdminLayoutmenuGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<LayoutMenuItem>>) => r.body as Array<LayoutMenuItem>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiAdminLayoutmenuGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiAdminLayoutmenuGet$Json$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<LayoutMenuItem>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, LayoutMenuService.ApiAdminLayoutmenuGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<LayoutMenuItem>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiAdminLayoutmenuGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiAdminLayoutmenuGet$Json(params?: {\r\n\r\n  }): Observable<Array<LayoutMenuItem>> {\r\n\r\n    return this.apiAdminLayoutmenuGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<LayoutMenuItem>>) => r.body as Array<LayoutMenuItem>)\r\n    );\r\n  }\r\n\r\n}\r\n","var map = {\n\t\"./af\": \"K/tc\",\n\t\"./af.js\": \"K/tc\",\n\t\"./ar\": \"jnO4\",\n\t\"./ar-dz\": \"o1bE\",\n\t\"./ar-dz.js\": \"o1bE\",\n\t\"./ar-kw\": \"Qj4J\",\n\t\"./ar-kw.js\": \"Qj4J\",\n\t\"./ar-ly\": \"HP3h\",\n\t\"./ar-ly.js\": \"HP3h\",\n\t\"./ar-ma\": \"CoRJ\",\n\t\"./ar-ma.js\": \"CoRJ\",\n\t\"./ar-sa\": \"gjCT\",\n\t\"./ar-sa.js\": \"gjCT\",\n\t\"./ar-tn\": \"bYM6\",\n\t\"./ar-tn.js\": \"bYM6\",\n\t\"./ar.js\": \"jnO4\",\n\t\"./az\": \"SFxW\",\n\t\"./az.js\": \"SFxW\",\n\t\"./be\": \"H8ED\",\n\t\"./be.js\": \"H8ED\",\n\t\"./bg\": \"hKrs\",\n\t\"./bg.js\": \"hKrs\",\n\t\"./bm\": \"p/rL\",\n\t\"./bm.js\": \"p/rL\",\n\t\"./bn\": \"kEOa\",\n\t\"./bn-bd\": \"loYQ\",\n\t\"./bn-bd.js\": \"loYQ\",\n\t\"./bn.js\": \"kEOa\",\n\t\"./bo\": \"0mo+\",\n\t\"./bo.js\": \"0mo+\",\n\t\"./br\": \"aIdf\",\n\t\"./br.js\": \"aIdf\",\n\t\"./bs\": \"JVSJ\",\n\t\"./bs.js\": \"JVSJ\",\n\t\"./ca\": \"1xZ4\",\n\t\"./ca.js\": \"1xZ4\",\n\t\"./cs\": \"PA2r\",\n\t\"./cs.js\": \"PA2r\",\n\t\"./cv\": \"A+xa\",\n\t\"./cv.js\": \"A+xa\",\n\t\"./cy\": \"l5ep\",\n\t\"./cy.js\": \"l5ep\",\n\t\"./da\": \"DxQv\",\n\t\"./da.js\": \"DxQv\",\n\t\"./de\": \"tGlX\",\n\t\"./de-at\": \"s+uk\",\n\t\"./de-at.js\": \"s+uk\",\n\t\"./de-ch\": \"u3GI\",\n\t\"./de-ch.js\": \"u3GI\",\n\t\"./de.js\": \"tGlX\",\n\t\"./dv\": \"WYrj\",\n\t\"./dv.js\": \"WYrj\",\n\t\"./el\": \"jUeY\",\n\t\"./el.js\": \"jUeY\",\n\t\"./en-au\": \"Dmvi\",\n\t\"./en-au.js\": \"Dmvi\",\n\t\"./en-ca\": \"OIYi\",\n\t\"./en-ca.js\": \"OIYi\",\n\t\"./en-gb\": \"Oaa7\",\n\t\"./en-gb.js\": \"Oaa7\",\n\t\"./en-ie\": \"4dOw\",\n\t\"./en-ie.js\": \"4dOw\",\n\t\"./en-il\": \"czMo\",\n\t\"./en-il.js\": \"czMo\",\n\t\"./en-in\": \"7C5Q\",\n\t\"./en-in.js\": \"7C5Q\",\n\t\"./en-nz\": \"b1Dy\",\n\t\"./en-nz.js\": \"b1Dy\",\n\t\"./en-sg\": \"t+mt\",\n\t\"./en-sg.js\": \"t+mt\",\n\t\"./eo\": \"Zduo\",\n\t\"./eo.js\": \"Zduo\",\n\t\"./es\": \"iYuL\",\n\t\"./es-do\": \"CjzT\",\n\t\"./es-do.js\": \"CjzT\",\n\t\"./es-mx\": \"tbfe\",\n\t\"./es-mx.js\": \"tbfe\",\n\t\"./es-us\": \"Vclq\",\n\t\"./es-us.js\": \"Vclq\",\n\t\"./es.js\": \"iYuL\",\n\t\"./et\": \"7BjC\",\n\t\"./et.js\": \"7BjC\",\n\t\"./eu\": \"D/JM\",\n\t\"./eu.js\": \"D/JM\",\n\t\"./fa\": \"jfSC\",\n\t\"./fa.js\": \"jfSC\",\n\t\"./fi\": \"gekB\",\n\t\"./fi.js\": \"gekB\",\n\t\"./fil\": \"1ppg\",\n\t\"./fil.js\": \"1ppg\",\n\t\"./fo\": \"ByF4\",\n\t\"./fo.js\": \"ByF4\",\n\t\"./fr\": \"nyYc\",\n\t\"./fr-ca\": \"2fjn\",\n\t\"./fr-ca.js\": \"2fjn\",\n\t\"./fr-ch\": \"Dkky\",\n\t\"./fr-ch.js\": \"Dkky\",\n\t\"./fr.js\": \"nyYc\",\n\t\"./fy\": \"cRix\",\n\t\"./fy.js\": \"cRix\",\n\t\"./ga\": \"USCx\",\n\t\"./ga.js\": \"USCx\",\n\t\"./gd\": \"9rRi\",\n\t\"./gd.js\": \"9rRi\",\n\t\"./gl\": \"iEDd\",\n\t\"./gl.js\": \"iEDd\",\n\t\"./gom-deva\": \"qvJo\",\n\t\"./gom-deva.js\": \"qvJo\",\n\t\"./gom-latn\": \"DKr+\",\n\t\"./gom-latn.js\": \"DKr+\",\n\t\"./gu\": \"4MV3\",\n\t\"./gu.js\": \"4MV3\",\n\t\"./he\": \"x6pH\",\n\t\"./he.js\": \"x6pH\",\n\t\"./hi\": \"3E1r\",\n\t\"./hi.js\": \"3E1r\",\n\t\"./hr\": \"S6ln\",\n\t\"./hr.js\": \"S6ln\",\n\t\"./hu\": \"WxRl\",\n\t\"./hu.js\": \"WxRl\",\n\t\"./hy-am\": \"1rYy\",\n\t\"./hy-am.js\": \"1rYy\",\n\t\"./id\": \"UDhR\",\n\t\"./id.js\": \"UDhR\",\n\t\"./is\": \"BVg3\",\n\t\"./is.js\": \"BVg3\",\n\t\"./it\": \"bpih\",\n\t\"./it-ch\": \"bxKX\",\n\t\"./it-ch.js\": \"bxKX\",\n\t\"./it.js\": \"bpih\",\n\t\"./ja\": \"B55N\",\n\t\"./ja.js\": \"B55N\",\n\t\"./jv\": \"tUCv\",\n\t\"./jv.js\": \"tUCv\",\n\t\"./ka\": \"IBtZ\",\n\t\"./ka.js\": \"IBtZ\",\n\t\"./kk\": \"bXm7\",\n\t\"./kk.js\": \"bXm7\",\n\t\"./km\": \"6B0Y\",\n\t\"./km.js\": \"6B0Y\",\n\t\"./kn\": \"PpIw\",\n\t\"./kn.js\": \"PpIw\",\n\t\"./ko\": \"Ivi+\",\n\t\"./ko.js\": \"Ivi+\",\n\t\"./ku\": \"JCF/\",\n\t\"./ku.js\": \"JCF/\",\n\t\"./ky\": \"lgnt\",\n\t\"./ky.js\": \"lgnt\",\n\t\"./lb\": \"RAwQ\",\n\t\"./lb.js\": \"RAwQ\",\n\t\"./lo\": \"sp3z\",\n\t\"./lo.js\": \"sp3z\",\n\t\"./lt\": \"JvlW\",\n\t\"./lt.js\": \"JvlW\",\n\t\"./lv\": \"uXwI\",\n\t\"./lv.js\": \"uXwI\",\n\t\"./me\": \"KTz0\",\n\t\"./me.js\": \"KTz0\",\n\t\"./mi\": \"aIsn\",\n\t\"./mi.js\": \"aIsn\",\n\t\"./mk\": \"aQkU\",\n\t\"./mk.js\": \"aQkU\",\n\t\"./ml\": \"AvvY\",\n\t\"./ml.js\": \"AvvY\",\n\t\"./mn\": \"lYtQ\",\n\t\"./mn.js\": \"lYtQ\",\n\t\"./mr\": \"Ob0Z\",\n\t\"./mr.js\": \"Ob0Z\",\n\t\"./ms\": \"6+QB\",\n\t\"./ms-my\": \"ZAMP\",\n\t\"./ms-my.js\": \"ZAMP\",\n\t\"./ms.js\": \"6+QB\",\n\t\"./mt\": \"G0Uy\",\n\t\"./mt.js\": \"G0Uy\",\n\t\"./my\": \"honF\",\n\t\"./my.js\": \"honF\",\n\t\"./nb\": \"bOMt\",\n\t\"./nb.js\": \"bOMt\",\n\t\"./ne\": \"OjkT\",\n\t\"./ne.js\": \"OjkT\",\n\t\"./nl\": \"+s0g\",\n\t\"./nl-be\": \"2ykv\",\n\t\"./nl-be.js\": \"2ykv\",\n\t\"./nl.js\": \"+s0g\",\n\t\"./nn\": \"uEye\",\n\t\"./nn.js\": \"uEye\",\n\t\"./oc-lnc\": \"Fnuy\",\n\t\"./oc-lnc.js\": \"Fnuy\",\n\t\"./pa-in\": \"8/+R\",\n\t\"./pa-in.js\": \"8/+R\",\n\t\"./pl\": \"jVdC\",\n\t\"./pl.js\": \"jVdC\",\n\t\"./pt\": \"8mBD\",\n\t\"./pt-br\": \"0tRk\",\n\t\"./pt-br.js\": \"0tRk\",\n\t\"./pt.js\": \"8mBD\",\n\t\"./ro\": \"lyxo\",\n\t\"./ro.js\": \"lyxo\",\n\t\"./ru\": \"lXzo\",\n\t\"./ru.js\": \"lXzo\",\n\t\"./sd\": \"Z4QM\",\n\t\"./sd.js\": \"Z4QM\",\n\t\"./se\": \"//9w\",\n\t\"./se.js\": \"//9w\",\n\t\"./si\": \"7aV9\",\n\t\"./si.js\": \"7aV9\",\n\t\"./sk\": \"e+ae\",\n\t\"./sk.js\": \"e+ae\",\n\t\"./sl\": \"gVVK\",\n\t\"./sl.js\": \"gVVK\",\n\t\"./sq\": \"yPMs\",\n\t\"./sq.js\": \"yPMs\",\n\t\"./sr\": \"zx6S\",\n\t\"./sr-cyrl\": \"E+lV\",\n\t\"./sr-cyrl.js\": \"E+lV\",\n\t\"./sr.js\": \"zx6S\",\n\t\"./ss\": \"Ur1D\",\n\t\"./ss.js\": \"Ur1D\",\n\t\"./sv\": \"X709\",\n\t\"./sv.js\": \"X709\",\n\t\"./sw\": \"dNwA\",\n\t\"./sw.js\": \"dNwA\",\n\t\"./ta\": \"PeUW\",\n\t\"./ta.js\": \"PeUW\",\n\t\"./te\": \"XLvN\",\n\t\"./te.js\": \"XLvN\",\n\t\"./tet\": \"V2x9\",\n\t\"./tet.js\": \"V2x9\",\n\t\"./tg\": \"Oxv6\",\n\t\"./tg.js\": \"Oxv6\",\n\t\"./th\": \"EOgW\",\n\t\"./th.js\": \"EOgW\",\n\t\"./tk\": \"Wv91\",\n\t\"./tk.js\": \"Wv91\",\n\t\"./tl-ph\": \"Dzi0\",\n\t\"./tl-ph.js\": \"Dzi0\",\n\t\"./tlh\": \"z3Vd\",\n\t\"./tlh.js\": \"z3Vd\",\n\t\"./tr\": \"DoHr\",\n\t\"./tr.js\": \"DoHr\",\n\t\"./tzl\": \"z1FC\",\n\t\"./tzl.js\": \"z1FC\",\n\t\"./tzm\": \"wQk9\",\n\t\"./tzm-latn\": \"tT3J\",\n\t\"./tzm-latn.js\": \"tT3J\",\n\t\"./tzm.js\": \"wQk9\",\n\t\"./ug-cn\": \"YRex\",\n\t\"./ug-cn.js\": \"YRex\",\n\t\"./uk\": \"raLr\",\n\t\"./uk.js\": \"raLr\",\n\t\"./ur\": \"UpQW\",\n\t\"./ur.js\": \"UpQW\",\n\t\"./uz\": \"Loxo\",\n\t\"./uz-latn\": \"AQ68\",\n\t\"./uz-latn.js\": \"AQ68\",\n\t\"./uz.js\": \"Loxo\",\n\t\"./vi\": \"KSF8\",\n\t\"./vi.js\": \"KSF8\",\n\t\"./x-pseudo\": \"/X5v\",\n\t\"./x-pseudo.js\": \"/X5v\",\n\t\"./yo\": \"fzPg\",\n\t\"./yo.js\": \"fzPg\",\n\t\"./zh-cn\": \"XDpg\",\n\t\"./zh-cn.js\": \"XDpg\",\n\t\"./zh-hk\": \"SatO\",\n\t\"./zh-hk.js\": \"SatO\",\n\t\"./zh-mo\": \"OmwH\",\n\t\"./zh-mo.js\": \"OmwH\",\n\t\"./zh-tw\": \"kOpN\",\n\t\"./zh-tw.js\": \"kOpN\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"RnhZ\";","import { Component, OnInit } from '@angular/core';\r\nimport { DictionaryService } from './shared/services/dictionary/dictionary.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  constructor(\r\n    public dictSV: DictionaryService,\r\n  ) {\r\n  }\r\n  ngOnInit() {\r\n  }\r\n}\r\n","<router-outlet></router-outlet>\r\n\r\n<app-ep-fullscreen-img [btnCloseLabel]=\"'GENERIC.BTN.CLOSE' | translate\"></app-ep-fullscreen-img>","/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { LogImportDto } from '../models/log-import-dto';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ImportsService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiImportsGetallGet\r\n   */\r\n  static readonly ApiImportsGetallGetPath = '/api/imports/getall';\r\n\r\n  /**\r\n   * Returns a list of logs.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiImportsGetallGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiImportsGetallGet$Plain$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<LogImportDto>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ImportsService.ApiImportsGetallGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<LogImportDto>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a list of logs.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiImportsGetallGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiImportsGetallGet$Plain(params?: {\r\n\r\n  }): Observable<Array<LogImportDto>> {\r\n\r\n    return this.apiImportsGetallGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<LogImportDto>>) => r.body as Array<LogImportDto>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a list of logs.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiImportsGetallGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiImportsGetallGet$Json$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<LogImportDto>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ImportsService.ApiImportsGetallGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<LogImportDto>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a list of logs.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiImportsGetallGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiImportsGetallGet$Json(params?: {\r\n\r\n  }): Observable<Array<LogImportDto>> {\r\n\r\n    return this.apiImportsGetallGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<LogImportDto>>) => r.body as Array<LogImportDto>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiImportsGetlogimportsGet\r\n   */\r\n  static readonly ApiImportsGetlogimportsGetPath = '/api/imports/getlogimports';\r\n\r\n  /**\r\n   * Returns a list of logs with filters.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiImportsGetlogimportsGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiImportsGetlogimportsGet$Plain$Response(params?: {\r\n    dateFrom?: null | string;\r\n    dateTo?: null | string;\r\n\r\n  }): Observable<StrictHttpResponse<Array<LogImportDto>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ImportsService.ApiImportsGetlogimportsGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('dateFrom', params.dateFrom, {});\r\n      rb.query('dateTo', params.dateTo, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<LogImportDto>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a list of logs with filters.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiImportsGetlogimportsGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiImportsGetlogimportsGet$Plain(params?: {\r\n    dateFrom?: null | string;\r\n    dateTo?: null | string;\r\n\r\n  }): Observable<Array<LogImportDto>> {\r\n\r\n    return this.apiImportsGetlogimportsGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<LogImportDto>>) => r.body as Array<LogImportDto>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a list of logs with filters.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiImportsGetlogimportsGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiImportsGetlogimportsGet$Json$Response(params?: {\r\n    dateFrom?: null | string;\r\n    dateTo?: null | string;\r\n\r\n  }): Observable<StrictHttpResponse<Array<LogImportDto>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ImportsService.ApiImportsGetlogimportsGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('dateFrom', params.dateFrom, {});\r\n      rb.query('dateTo', params.dateTo, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<LogImportDto>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a list of logs with filters.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiImportsGetlogimportsGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiImportsGetlogimportsGet$Json(params?: {\r\n    dateFrom?: null | string;\r\n    dateTo?: null | string;\r\n\r\n  }): Observable<Array<LogImportDto>> {\r\n\r\n    return this.apiImportsGetlogimportsGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<LogImportDto>>) => r.body as Array<LogImportDto>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiImportsGetlogimportbyidGet\r\n   */\r\n  static readonly ApiImportsGetlogimportbyidGetPath = '/api/imports/getlogimportbyid';\r\n\r\n  /**\r\n   * Returns LogImportDTO with the specified id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiImportsGetlogimportbyidGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiImportsGetlogimportbyidGet$Plain$Response(params?: {\r\n\r\n    /**\r\n     * Log ID to lookup\r\n     */\r\n    id?: number;\r\n\r\n  }): Observable<StrictHttpResponse<LogImportDto>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ImportsService.ApiImportsGetlogimportbyidGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('id', params.id, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<LogImportDto>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns LogImportDTO with the specified id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiImportsGetlogimportbyidGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiImportsGetlogimportbyidGet$Plain(params?: {\r\n\r\n    /**\r\n     * Log ID to lookup\r\n     */\r\n    id?: number;\r\n\r\n  }): Observable<LogImportDto> {\r\n\r\n    return this.apiImportsGetlogimportbyidGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<LogImportDto>) => r.body as LogImportDto)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns LogImportDTO with the specified id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiImportsGetlogimportbyidGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiImportsGetlogimportbyidGet$Json$Response(params?: {\r\n\r\n    /**\r\n     * Log ID to lookup\r\n     */\r\n    id?: number;\r\n\r\n  }): Observable<StrictHttpResponse<LogImportDto>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ImportsService.ApiImportsGetlogimportbyidGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('id', params.id, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<LogImportDto>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns LogImportDTO with the specified id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiImportsGetlogimportbyidGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiImportsGetlogimportbyidGet$Json(params?: {\r\n\r\n    /**\r\n     * Log ID to lookup\r\n     */\r\n    id?: number;\r\n\r\n  }): Observable<LogImportDto> {\r\n\r\n    return this.apiImportsGetlogimportbyidGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<LogImportDto>) => r.body as LogImportDto)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiImportsImportfilesGet\r\n   */\r\n  static readonly ApiImportsImportfilesGetPath = '/api/imports/importfiles';\r\n\r\n  /**\r\n   * Process to import files.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiImportsImportfilesGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiImportsImportfilesGet$Plain$Response(params?: {\r\n    path?: null | string;\r\n\r\n  }): Observable<StrictHttpResponse<boolean>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ImportsService.ApiImportsImportfilesGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('path', params.path, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: String((r as HttpResponse<any>).body) === 'true' }) as StrictHttpResponse<boolean>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Process to import files.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiImportsImportfilesGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiImportsImportfilesGet$Plain(params?: {\r\n    path?: null | string;\r\n\r\n  }): Observable<boolean> {\r\n\r\n    return this.apiImportsImportfilesGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<boolean>) => r.body as boolean)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Process to import files.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiImportsImportfilesGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiImportsImportfilesGet$Json$Response(params?: {\r\n    path?: null | string;\r\n\r\n  }): Observable<StrictHttpResponse<boolean>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ImportsService.ApiImportsImportfilesGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('path', params.path, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: String((r as HttpResponse<any>).body) === 'true' }) as StrictHttpResponse<boolean>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Process to import files.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiImportsImportfilesGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiImportsImportfilesGet$Json(params?: {\r\n    path?: null | string;\r\n\r\n  }): Observable<boolean> {\r\n\r\n    return this.apiImportsImportfilesGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<boolean>) => r.body as boolean)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiImportsSetPost\r\n   */\r\n  static readonly ApiImportsSetPostPath = '/api/imports/set';\r\n\r\n  /**\r\n   * Saves the log to DB. If the log already exist, update it.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiImportsSetPost$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiImportsSetPost$Plain$Response(params?: {\r\n  \r\n    /**\r\n     * Log to save\r\n     */\r\n    body?: LogImportDto\r\n  }): Observable<StrictHttpResponse<boolean>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ImportsService.ApiImportsSetPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: String((r as HttpResponse<any>).body) === 'true' }) as StrictHttpResponse<boolean>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Saves the log to DB. If the log already exist, update it.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiImportsSetPost$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiImportsSetPost$Plain(params?: {\r\n  \r\n    /**\r\n     * Log to save\r\n     */\r\n    body?: LogImportDto\r\n  }): Observable<boolean> {\r\n\r\n    return this.apiImportsSetPost$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<boolean>) => r.body as boolean)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Saves the log to DB. If the log already exist, update it.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiImportsSetPost$Json()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiImportsSetPost$Json$Response(params?: {\r\n  \r\n    /**\r\n     * Log to save\r\n     */\r\n    body?: LogImportDto\r\n  }): Observable<StrictHttpResponse<boolean>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ImportsService.ApiImportsSetPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: String((r as HttpResponse<any>).body) === 'true' }) as StrictHttpResponse<boolean>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Saves the log to DB. If the log already exist, update it.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiImportsSetPost$Json$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiImportsSetPost$Json(params?: {\r\n  \r\n    /**\r\n     * Log to save\r\n     */\r\n    body?: LogImportDto\r\n  }): Observable<boolean> {\r\n\r\n    return this.apiImportsSetPost$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<boolean>) => r.body as boolean)\r\n    );\r\n  }\r\n\r\n}\r\n","import { Injectable, EventEmitter } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EpFullscreenImgService {\r\n  _animationTime = 300;\r\n\r\n  _imgUrl = null;\r\n  _show = new EventEmitter<void>();\r\n  _hide = new EventEmitter<void>();\r\n  constructor(\r\n  ) { }\r\n\r\n  openImage(url: string) {\r\n    this._imgUrl = url;\r\n    this._show.next();\r\n  }\r\n  closeImage() {\r\n    this._hide.next();\r\n    setTimeout(() => {\r\n      this._imgUrl = null;\r\n    }, this._animationTime);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { ServiceWorkerModule } from '@angular/service-worker';\r\nimport { environment } from '../environments/environment';\r\nimport { ApiModule } from './shared/api/api.module';\r\nimport { ApiErrorInterceptor } from './shared/interceptors/api-error/api-error.interceptor';\r\nimport { FaIconLibrary, FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { fas } from '@fortawesome/free-solid-svg-icons';\r\nimport { fab } from '@fortawesome/free-brands-svg-icons';\r\nimport { faEnvelope, faClock } from '@fortawesome/free-regular-svg-icons';\r\n\r\n// CKEditor language load.\r\n// MUST BE INCLUDED ON COMPILATION TIME\r\nimport '@ckeditor/ckeditor5-build-classic/build/translations/es';\r\nimport '@ckeditor/ckeditor5-build-classic/build/translations/eu';\r\nimport { ApiHeaderLangInterceptor } from './shared/interceptors/api-headers/api-header-lang/api-header-lang.interceptor';\r\nimport { CarouselModule } from 'ngx-owl-carousel-o';\r\nimport { EpFullscreenImgModule } from './shared/_third-party/ep-components/components/ep-fullscreen-img/ep-fullscreen-img.module';\r\nimport { AccordionModule } from 'ngx-bootstrap/accordion';\r\nimport { AlertModule } from 'ngx-bootstrap/alert';\r\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\r\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\r\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\r\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\r\nimport { ModalModule } from 'ngx-bootstrap/modal';\r\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\r\nimport { PopoverModule } from 'ngx-bootstrap/popover';\r\nimport { ProgressbarModule } from 'ngx-bootstrap/progressbar';\r\nimport { RatingModule } from 'ngx-bootstrap/rating';\r\nimport { SortableModule } from 'ngx-bootstrap/sortable';\r\nimport { TabsModule } from 'ngx-bootstrap/tabs';\r\nimport { TimepickerModule } from 'ngx-bootstrap/timepicker';\r\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\r\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport {\r\n  APP_MODULE_TOASTR_ROOT_CONFIG,\r\n  APP_MODULE_TRANSLATE_ROOT_CONFIG,\r\n  TRANSL_MISSING_HANDLER_CONFIG,\r\n  MissingTranslationHandlerConfig,\r\n  BsMenuModule,\r\n  BsMenuConfig\r\n} from 'ax-toolbox';\r\nimport { ApiHeaderKubInterceptor } from './shared/interceptors/api-headers/api-header-kub/api-header-kub.interceptor';\r\nimport { ApiHeaderJwtInterceptor } from './shared/interceptors/api-header-jwt/api-header-jwt.interceptor';\r\n\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [\r\n    AppRoutingModule,\r\n\r\n    ServiceWorkerModule.register('ngsw-worker.js', {\r\n      enabled: environment.production,\r\n    }),\r\n\r\n    ApiModule.forRoot({ rootUrl: '' }),\r\n    CarouselModule,\r\n    EpFullscreenImgModule,\r\n    AccordionModule.forRoot(),\r\n    AlertModule.forRoot(),\r\n    ButtonsModule.forRoot(),\r\n    CollapseModule.forRoot(),\r\n    BsDatepickerModule.forRoot(),\r\n    BsDropdownModule.forRoot(),\r\n    ModalModule.forRoot(),\r\n    PaginationModule.forRoot(),\r\n    PopoverModule.forRoot(),\r\n    ProgressbarModule.forRoot(),\r\n    RatingModule.forRoot(),\r\n    SortableModule.forRoot(),\r\n    TabsModule.forRoot(),\r\n    TimepickerModule.forRoot(),\r\n    TooltipModule.forRoot(),\r\n    TypeaheadModule.forRoot(),\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule,\r\n    TranslateModule.forRoot(APP_MODULE_TRANSLATE_ROOT_CONFIG),\r\n    ToastrModule.forRoot(APP_MODULE_TOASTR_ROOT_CONFIG),\r\n    FontAwesomeModule,\r\n\r\n    BsMenuModule.forRoot(new BsMenuConfig().setData({\r\n      appLogoSrc: 'assets/img/logo/PryBase.png',\r\n      isAppNameLabelShown: true,\r\n    })),\r\n  ],\r\n  providers: [\r\n    { provide: TRANSL_MISSING_HANDLER_CONFIG, useValue: {} },\r\n    //#region INTERCEPTORS\r\n    //#region INTERCEPTORS - JWT HEADER\r\n    { provide: HTTP_INTERCEPTORS, useClass: ApiHeaderJwtInterceptor, multi: true },\r\n    //#endregion\r\n    //#region INTERCEPTORS - ERROR\r\n    { provide: HTTP_INTERCEPTORS, useClass: ApiErrorInterceptor, multi: true },\r\n    //#endregion\r\n    //#region INTERCEPTORS - HEADERS\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: ApiHeaderLangInterceptor,\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: ApiHeaderKubInterceptor,\r\n      multi: true,\r\n    },\r\n    //#endregion\r\n    //#endregion\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {\r\n  constructor(public library: FaIconLibrary) {\r\n    //#region FONTAWESOME ICONS\r\n    library.addIconPacks(fas);\r\n    library.addIconPacks(fab);\r\n    library.addIcons(faEnvelope, faClock);\r\n    //#endregion\r\n  }\r\n}\r\n","import { marker } from '@biesbjerg/ngx-translate-extract-marker';\r\n\r\n/**\r\n * This function does nothing by itself, it is only used\r\n * to keep track of the errors the API returns and make sure\r\n * translations files are updated.\r\n */\r\nexport function markApiStrings() {\r\n    markApiErrorStrings();\r\n    markApiResponseStrings();\r\n}\r\nexport function markApiErrorStrings() {\r\n    marker('API.ERROR.AUTH.PASS.FAIL');\r\n}\r\nexport function markApiResponseStrings() {\r\n    marker('MENU.PAGE.HOME');\r\n\r\n    marker('MENU.PAGE.INSURANCE.MAIN');\r\n    marker('MENU.PAGE.INSURANCE.LIST');\r\n    marker('MENU.PAGE.INSURANCE.DETAILS');\r\n    marker('MENU.PAGE.INSURANCE.NEW');\r\n\r\n    marker('MENU.PAGE.RCA.MAIN');\r\n\r\n    marker('MENU.PAGE.ZITYENTITY.LIST');\r\n\r\n    marker('MENU.PAGE.PROJECT.MAIN');\r\n    marker('MENU.PAGE.PROJECT.LIST');\r\n    marker('MENU.PAGE.PROJECT.DETAILS');\r\n    marker('MENU.PAGE.PROJECT.NEW');\r\n}\r\n","/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { DetailDto } from '../models/detail-dto';\r\nimport { FunctionalityDto } from '../models/functionality-dto';\r\nimport { MenuDto } from '../models/menu-dto';\r\nimport { ModuleDto } from '../models/module-dto';\r\nimport { PermissionDto } from '../models/permission-dto';\r\nimport { UserDto } from '../models/user-dto';\r\nimport { UserDepartmentDto } from '../models/user-department-dto';\r\nimport { UserLevelDto } from '../models/user-level-dto';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UsersService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersGetallusersGet\r\n   */\r\n  static readonly ApiUsersGetallusersGetPath = '/api/users/getallusers';\r\n\r\n  /**\r\n   * Returns a list of registered users.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetallusersGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetallusersGet$Plain$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<UserDto>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetallusersGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<UserDto>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a list of registered users.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetallusersGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetallusersGet$Plain(params?: {\r\n\r\n  }): Observable<Array<UserDto>> {\r\n\r\n    return this.apiUsersGetallusersGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<UserDto>>) => r.body as Array<UserDto>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a list of registered users.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetallusersGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetallusersGet$Json$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<UserDto>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetallusersGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<UserDto>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a list of registered users.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetallusersGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetallusersGet$Json(params?: {\r\n\r\n  }): Observable<Array<UserDto>> {\r\n\r\n    return this.apiUsersGetallusersGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<UserDto>>) => r.body as Array<UserDto>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersGetuserbynameGet\r\n   */\r\n  static readonly ApiUsersGetuserbynameGetPath = '/api/users/getuserbyname';\r\n\r\n  /**\r\n   * Returns userDTO for the username specified.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetuserbynameGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetuserbynameGet$Plain$Response(params?: {\r\n\r\n    /**\r\n     * Username to lookup\r\n     */\r\n    user?: null | string;\r\n\r\n  }): Observable<StrictHttpResponse<UserDto>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetuserbynameGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('user', params.user, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<UserDto>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns userDTO for the username specified.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetuserbynameGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetuserbynameGet$Plain(params?: {\r\n\r\n    /**\r\n     * Username to lookup\r\n     */\r\n    user?: null | string;\r\n\r\n  }): Observable<UserDto> {\r\n\r\n    return this.apiUsersGetuserbynameGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<UserDto>) => r.body as UserDto)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns userDTO for the username specified.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetuserbynameGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetuserbynameGet$Json$Response(params?: {\r\n\r\n    /**\r\n     * Username to lookup\r\n     */\r\n    user?: null | string;\r\n\r\n  }): Observable<StrictHttpResponse<UserDto>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetuserbynameGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('user', params.user, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<UserDto>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns userDTO for the username specified.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetuserbynameGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetuserbynameGet$Json(params?: {\r\n\r\n    /**\r\n     * Username to lookup\r\n     */\r\n    user?: null | string;\r\n\r\n  }): Observable<UserDto> {\r\n\r\n    return this.apiUsersGetuserbynameGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<UserDto>) => r.body as UserDto)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersGetuserbyidGet\r\n   */\r\n  static readonly ApiUsersGetuserbyidGetPath = '/api/users/getuserbyid';\r\n\r\n  /**\r\n   * Returns userDTO for the user with the specified id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetuserbyidGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetuserbyidGet$Plain$Response(params?: {\r\n\r\n    /**\r\n     * User ID to lookup\r\n     */\r\n    id?: string;\r\n\r\n  }): Observable<StrictHttpResponse<UserDto>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetuserbyidGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('id', params.id, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<UserDto>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns userDTO for the user with the specified id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetuserbyidGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetuserbyidGet$Plain(params?: {\r\n\r\n    /**\r\n     * User ID to lookup\r\n     */\r\n    id?: string;\r\n\r\n  }): Observable<UserDto> {\r\n\r\n    return this.apiUsersGetuserbyidGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<UserDto>) => r.body as UserDto)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns userDTO for the user with the specified id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetuserbyidGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetuserbyidGet$Json$Response(params?: {\r\n\r\n    /**\r\n     * User ID to lookup\r\n     */\r\n    id?: string;\r\n\r\n  }): Observable<StrictHttpResponse<UserDto>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetuserbyidGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('id', params.id, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<UserDto>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns userDTO for the user with the specified id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetuserbyidGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetuserbyidGet$Json(params?: {\r\n\r\n    /**\r\n     * User ID to lookup\r\n     */\r\n    id?: string;\r\n\r\n  }): Observable<UserDto> {\r\n\r\n    return this.apiUsersGetuserbyidGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<UserDto>) => r.body as UserDto)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersGetusersbydepartmentGet\r\n   */\r\n  static readonly ApiUsersGetusersbydepartmentGetPath = '/api/users/getusersbydepartment';\r\n\r\n  /**\r\n   * Returns a number of users by department Id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetusersbydepartmentGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetusersbydepartmentGet$Plain$Response(params?: {\r\n\r\n    /**\r\n     * Department Id\r\n     */\r\n    departmentId?: number;\r\n\r\n  }): Observable<StrictHttpResponse<number>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetusersbydepartmentGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('departmentId', params.departmentId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: parseFloat(String((r as HttpResponse<any>).body)) }) as StrictHttpResponse<number>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a number of users by department Id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetusersbydepartmentGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetusersbydepartmentGet$Plain(params?: {\r\n\r\n    /**\r\n     * Department Id\r\n     */\r\n    departmentId?: number;\r\n\r\n  }): Observable<number> {\r\n\r\n    return this.apiUsersGetusersbydepartmentGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<number>) => r.body as number)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a number of users by department Id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetusersbydepartmentGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetusersbydepartmentGet$Json$Response(params?: {\r\n\r\n    /**\r\n     * Department Id\r\n     */\r\n    departmentId?: number;\r\n\r\n  }): Observable<StrictHttpResponse<number>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetusersbydepartmentGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('departmentId', params.departmentId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: parseFloat(String((r as HttpResponse<any>).body)) }) as StrictHttpResponse<number>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a number of users by department Id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetusersbydepartmentGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetusersbydepartmentGet$Json(params?: {\r\n\r\n    /**\r\n     * Department Id\r\n     */\r\n    departmentId?: number;\r\n\r\n  }): Observable<number> {\r\n\r\n    return this.apiUsersGetusersbydepartmentGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<number>) => r.body as number)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersGetalladusersGet\r\n   */\r\n  static readonly ApiUsersGetalladusersGetPath = '/api/users/getalladusers';\r\n\r\n  /**\r\n   * Return list of all users of Active Directory.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetalladusersGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetalladusersGet$Plain$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<string>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetalladusersGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<string>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return list of all users of Active Directory.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetalladusersGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetalladusersGet$Plain(params?: {\r\n\r\n  }): Observable<Array<string>> {\r\n\r\n    return this.apiUsersGetalladusersGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<string>>) => r.body as Array<string>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return list of all users of Active Directory.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetalladusersGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetalladusersGet$Json$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<string>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetalladusersGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<string>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return list of all users of Active Directory.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetalladusersGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetalladusersGet$Json(params?: {\r\n\r\n  }): Observable<Array<string>> {\r\n\r\n    return this.apiUsersGetalladusersGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<string>>) => r.body as Array<string>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersGetmenubyuserGet\r\n   */\r\n  static readonly ApiUsersGetmenubyuserGetPath = '/api/users/getmenubyuser';\r\n\r\n  /**\r\n   * Returns the menu nodes for the user.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetmenubyuserGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetmenubyuserGet$Plain$Response(params?: {\r\n\r\n    /**\r\n     * Selected user\r\n     */\r\n    user?: null | string;\r\n\r\n  }): Observable<StrictHttpResponse<MenuDto>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetmenubyuserGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('user', params.user, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<MenuDto>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the menu nodes for the user.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetmenubyuserGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetmenubyuserGet$Plain(params?: {\r\n\r\n    /**\r\n     * Selected user\r\n     */\r\n    user?: null | string;\r\n\r\n  }): Observable<MenuDto> {\r\n\r\n    return this.apiUsersGetmenubyuserGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<MenuDto>) => r.body as MenuDto)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the menu nodes for the user.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetmenubyuserGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetmenubyuserGet$Json$Response(params?: {\r\n\r\n    /**\r\n     * Selected user\r\n     */\r\n    user?: null | string;\r\n\r\n  }): Observable<StrictHttpResponse<MenuDto>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetmenubyuserGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('user', params.user, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<MenuDto>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the menu nodes for the user.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetmenubyuserGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetmenubyuserGet$Json(params?: {\r\n\r\n    /**\r\n     * Selected user\r\n     */\r\n    user?: null | string;\r\n\r\n  }): Observable<MenuDto> {\r\n\r\n    return this.apiUsersGetmenubyuserGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<MenuDto>) => r.body as MenuDto)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersGetalldepartmentsGet\r\n   */\r\n  static readonly ApiUsersGetalldepartmentsGetPath = '/api/users/getalldepartments';\r\n\r\n  /**\r\n   * Returns all departments.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetalldepartmentsGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetalldepartmentsGet$Plain$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<UserDepartmentDto>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetalldepartmentsGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<UserDepartmentDto>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns all departments.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetalldepartmentsGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetalldepartmentsGet$Plain(params?: {\r\n\r\n  }): Observable<Array<UserDepartmentDto>> {\r\n\r\n    return this.apiUsersGetalldepartmentsGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<UserDepartmentDto>>) => r.body as Array<UserDepartmentDto>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns all departments.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetalldepartmentsGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetalldepartmentsGet$Json$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<UserDepartmentDto>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetalldepartmentsGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<UserDepartmentDto>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns all departments.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetalldepartmentsGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetalldepartmentsGet$Json(params?: {\r\n\r\n  }): Observable<Array<UserDepartmentDto>> {\r\n\r\n    return this.apiUsersGetalldepartmentsGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<UserDepartmentDto>>) => r.body as Array<UserDepartmentDto>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersGetalllevelsGet\r\n   */\r\n  static readonly ApiUsersGetalllevelsGetPath = '/api/users/getalllevels';\r\n\r\n  /**\r\n   * Returns all levels.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetalllevelsGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetalllevelsGet$Plain$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<UserLevelDto>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetalllevelsGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<UserLevelDto>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns all levels.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetalllevelsGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetalllevelsGet$Plain(params?: {\r\n\r\n  }): Observable<Array<UserLevelDto>> {\r\n\r\n    return this.apiUsersGetalllevelsGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<UserLevelDto>>) => r.body as Array<UserLevelDto>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns all levels.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetalllevelsGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetalllevelsGet$Json$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<UserLevelDto>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetalllevelsGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<UserLevelDto>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns all levels.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetalllevelsGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetalllevelsGet$Json(params?: {\r\n\r\n  }): Observable<Array<UserLevelDto>> {\r\n\r\n    return this.apiUsersGetalllevelsGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<UserLevelDto>>) => r.body as Array<UserLevelDto>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersGetdepartmentbyidGet\r\n   */\r\n  static readonly ApiUsersGetdepartmentbyidGetPath = '/api/users/getdepartmentbyid';\r\n\r\n  /**\r\n   * Returns UserDepartmentDTO for the department with the specified id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetdepartmentbyidGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetdepartmentbyidGet$Plain$Response(params?: {\r\n\r\n    /**\r\n     * Department ID to lookup\r\n     */\r\n    id?: number;\r\n\r\n  }): Observable<StrictHttpResponse<UserDepartmentDto>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetdepartmentbyidGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('id', params.id, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<UserDepartmentDto>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns UserDepartmentDTO for the department with the specified id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetdepartmentbyidGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetdepartmentbyidGet$Plain(params?: {\r\n\r\n    /**\r\n     * Department ID to lookup\r\n     */\r\n    id?: number;\r\n\r\n  }): Observable<UserDepartmentDto> {\r\n\r\n    return this.apiUsersGetdepartmentbyidGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<UserDepartmentDto>) => r.body as UserDepartmentDto)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns UserDepartmentDTO for the department with the specified id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetdepartmentbyidGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetdepartmentbyidGet$Json$Response(params?: {\r\n\r\n    /**\r\n     * Department ID to lookup\r\n     */\r\n    id?: number;\r\n\r\n  }): Observable<StrictHttpResponse<UserDepartmentDto>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetdepartmentbyidGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('id', params.id, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<UserDepartmentDto>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns UserDepartmentDTO for the department with the specified id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetdepartmentbyidGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetdepartmentbyidGet$Json(params?: {\r\n\r\n    /**\r\n     * Department ID to lookup\r\n     */\r\n    id?: number;\r\n\r\n  }): Observable<UserDepartmentDto> {\r\n\r\n    return this.apiUsersGetdepartmentbyidGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<UserDepartmentDto>) => r.body as UserDepartmentDto)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersGetlevelbyidGet\r\n   */\r\n  static readonly ApiUsersGetlevelbyidGetPath = '/api/users/getlevelbyid';\r\n\r\n  /**\r\n   * Returns UserLevelDTO for the level with the specified id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetlevelbyidGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetlevelbyidGet$Plain$Response(params?: {\r\n\r\n    /**\r\n     * Level ID to lookup\r\n     */\r\n    id?: number;\r\n\r\n  }): Observable<StrictHttpResponse<UserLevelDto>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetlevelbyidGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('id', params.id, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<UserLevelDto>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns UserLevelDTO for the level with the specified id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetlevelbyidGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetlevelbyidGet$Plain(params?: {\r\n\r\n    /**\r\n     * Level ID to lookup\r\n     */\r\n    id?: number;\r\n\r\n  }): Observable<UserLevelDto> {\r\n\r\n    return this.apiUsersGetlevelbyidGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<UserLevelDto>) => r.body as UserLevelDto)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns UserLevelDTO for the level with the specified id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetlevelbyidGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetlevelbyidGet$Json$Response(params?: {\r\n\r\n    /**\r\n     * Level ID to lookup\r\n     */\r\n    id?: number;\r\n\r\n  }): Observable<StrictHttpResponse<UserLevelDto>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetlevelbyidGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('id', params.id, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<UserLevelDto>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns UserLevelDTO for the level with the specified id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetlevelbyidGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetlevelbyidGet$Json(params?: {\r\n\r\n    /**\r\n     * Level ID to lookup\r\n     */\r\n    id?: number;\r\n\r\n  }): Observable<UserLevelDto> {\r\n\r\n    return this.apiUsersGetlevelbyidGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<UserLevelDto>) => r.body as UserLevelDto)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersGetallmodulesGet\r\n   */\r\n  static readonly ApiUsersGetallmodulesGetPath = '/api/users/getallmodules';\r\n\r\n  /**\r\n   * Returns all modules.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetallmodulesGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetallmodulesGet$Plain$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<ModuleDto>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetallmodulesGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<ModuleDto>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns all modules.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetallmodulesGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetallmodulesGet$Plain(params?: {\r\n\r\n  }): Observable<Array<ModuleDto>> {\r\n\r\n    return this.apiUsersGetallmodulesGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<ModuleDto>>) => r.body as Array<ModuleDto>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns all modules.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetallmodulesGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetallmodulesGet$Json$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<ModuleDto>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetallmodulesGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<ModuleDto>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns all modules.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetallmodulesGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetallmodulesGet$Json(params?: {\r\n\r\n  }): Observable<Array<ModuleDto>> {\r\n\r\n    return this.apiUsersGetallmodulesGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<ModuleDto>>) => r.body as Array<ModuleDto>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersGetallfunctionalitiesGet\r\n   */\r\n  static readonly ApiUsersGetallfunctionalitiesGetPath = '/api/users/getallfunctionalities';\r\n\r\n  /**\r\n   * Returns all functionalities.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetallfunctionalitiesGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetallfunctionalitiesGet$Plain$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<FunctionalityDto>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetallfunctionalitiesGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<FunctionalityDto>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns all functionalities.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetallfunctionalitiesGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetallfunctionalitiesGet$Plain(params?: {\r\n\r\n  }): Observable<Array<FunctionalityDto>> {\r\n\r\n    return this.apiUsersGetallfunctionalitiesGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<FunctionalityDto>>) => r.body as Array<FunctionalityDto>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns all functionalities.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetallfunctionalitiesGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetallfunctionalitiesGet$Json$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<FunctionalityDto>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetallfunctionalitiesGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<FunctionalityDto>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns all functionalities.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetallfunctionalitiesGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetallfunctionalitiesGet$Json(params?: {\r\n\r\n  }): Observable<Array<FunctionalityDto>> {\r\n\r\n    return this.apiUsersGetallfunctionalitiesGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<FunctionalityDto>>) => r.body as Array<FunctionalityDto>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersGetalldetailsGet\r\n   */\r\n  static readonly ApiUsersGetalldetailsGetPath = '/api/users/getalldetails';\r\n\r\n  /**\r\n   * Returns all details.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetalldetailsGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetalldetailsGet$Plain$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<DetailDto>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetalldetailsGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<DetailDto>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns all details.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetalldetailsGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetalldetailsGet$Plain(params?: {\r\n\r\n  }): Observable<Array<DetailDto>> {\r\n\r\n    return this.apiUsersGetalldetailsGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<DetailDto>>) => r.body as Array<DetailDto>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns all details.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetalldetailsGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetalldetailsGet$Json$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<DetailDto>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetalldetailsGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<DetailDto>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns all details.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetalldetailsGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetalldetailsGet$Json(params?: {\r\n\r\n  }): Observable<Array<DetailDto>> {\r\n\r\n    return this.apiUsersGetalldetailsGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<DetailDto>>) => r.body as Array<DetailDto>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersGetpermissionbyfilterGet\r\n   */\r\n  static readonly ApiUsersGetpermissionbyfilterGetPath = '/api/users/getpermissionbyfilter';\r\n\r\n  /**\r\n   * Returns the permission by filter.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetpermissionbyfilterGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetpermissionbyfilterGet$Plain$Response(params?: {\r\n\r\n    /**\r\n     * Department to search permissions\r\n     */\r\n    department?: number;\r\n\r\n    /**\r\n     * Level to search permissions\r\n     */\r\n    level?: number;\r\n\r\n    /**\r\n     * Functionality to search permissions\r\n     */\r\n    functionality?: number;\r\n\r\n    /**\r\n     * Detail to search permissions\r\n     */\r\n    detail?: number;\r\n\r\n  }): Observable<StrictHttpResponse<PermissionDto>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetpermissionbyfilterGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('department', params.department, {});\r\n      rb.query('level', params.level, {});\r\n      rb.query('functionality', params.functionality, {});\r\n      rb.query('detail', params.detail, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<PermissionDto>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the permission by filter.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetpermissionbyfilterGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetpermissionbyfilterGet$Plain(params?: {\r\n\r\n    /**\r\n     * Department to search permissions\r\n     */\r\n    department?: number;\r\n\r\n    /**\r\n     * Level to search permissions\r\n     */\r\n    level?: number;\r\n\r\n    /**\r\n     * Functionality to search permissions\r\n     */\r\n    functionality?: number;\r\n\r\n    /**\r\n     * Detail to search permissions\r\n     */\r\n    detail?: number;\r\n\r\n  }): Observable<PermissionDto> {\r\n\r\n    return this.apiUsersGetpermissionbyfilterGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<PermissionDto>) => r.body as PermissionDto)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the permission by filter.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetpermissionbyfilterGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetpermissionbyfilterGet$Json$Response(params?: {\r\n\r\n    /**\r\n     * Department to search permissions\r\n     */\r\n    department?: number;\r\n\r\n    /**\r\n     * Level to search permissions\r\n     */\r\n    level?: number;\r\n\r\n    /**\r\n     * Functionality to search permissions\r\n     */\r\n    functionality?: number;\r\n\r\n    /**\r\n     * Detail to search permissions\r\n     */\r\n    detail?: number;\r\n\r\n  }): Observable<StrictHttpResponse<PermissionDto>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetpermissionbyfilterGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('department', params.department, {});\r\n      rb.query('level', params.level, {});\r\n      rb.query('functionality', params.functionality, {});\r\n      rb.query('detail', params.detail, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<PermissionDto>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the permission by filter.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetpermissionbyfilterGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetpermissionbyfilterGet$Json(params?: {\r\n\r\n    /**\r\n     * Department to search permissions\r\n     */\r\n    department?: number;\r\n\r\n    /**\r\n     * Level to search permissions\r\n     */\r\n    level?: number;\r\n\r\n    /**\r\n     * Functionality to search permissions\r\n     */\r\n    functionality?: number;\r\n\r\n    /**\r\n     * Detail to search permissions\r\n     */\r\n    detail?: number;\r\n\r\n  }): Observable<PermissionDto> {\r\n\r\n    return this.apiUsersGetpermissionbyfilterGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<PermissionDto>) => r.body as PermissionDto)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersGetpermissionsbydepartmentGet\r\n   */\r\n  static readonly ApiUsersGetpermissionsbydepartmentGetPath = '/api/users/getpermissionsbydepartment';\r\n\r\n  /**\r\n   * Returns number of permissions by department Id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetpermissionsbydepartmentGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetpermissionsbydepartmentGet$Plain$Response(params?: {\r\n\r\n    /**\r\n     * Department Id\r\n     */\r\n    departmentId?: number;\r\n\r\n  }): Observable<StrictHttpResponse<number>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetpermissionsbydepartmentGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('departmentId', params.departmentId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: parseFloat(String((r as HttpResponse<any>).body)) }) as StrictHttpResponse<number>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns number of permissions by department Id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetpermissionsbydepartmentGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetpermissionsbydepartmentGet$Plain(params?: {\r\n\r\n    /**\r\n     * Department Id\r\n     */\r\n    departmentId?: number;\r\n\r\n  }): Observable<number> {\r\n\r\n    return this.apiUsersGetpermissionsbydepartmentGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<number>) => r.body as number)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns number of permissions by department Id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetpermissionsbydepartmentGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetpermissionsbydepartmentGet$Json$Response(params?: {\r\n\r\n    /**\r\n     * Department Id\r\n     */\r\n    departmentId?: number;\r\n\r\n  }): Observable<StrictHttpResponse<number>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetpermissionsbydepartmentGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('departmentId', params.departmentId, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: parseFloat(String((r as HttpResponse<any>).body)) }) as StrictHttpResponse<number>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns number of permissions by department Id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetpermissionsbydepartmentGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersGetpermissionsbydepartmentGet$Json(params?: {\r\n\r\n    /**\r\n     * Department Id\r\n     */\r\n    departmentId?: number;\r\n\r\n  }): Observable<number> {\r\n\r\n    return this.apiUsersGetpermissionsbydepartmentGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<number>) => r.body as number)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersSetuserPost\r\n   */\r\n  static readonly ApiUsersSetuserPostPath = '/api/users/setuser';\r\n\r\n  /**\r\n   * Saves the user to DB. If the user already exist, update it.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersSetuserPost$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiUsersSetuserPost$Plain$Response(params?: {\r\n  \r\n    /**\r\n     * User to save\r\n     */\r\n    body?: UserDto\r\n  }): Observable<StrictHttpResponse<boolean>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersSetuserPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: String((r as HttpResponse<any>).body) === 'true' }) as StrictHttpResponse<boolean>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Saves the user to DB. If the user already exist, update it.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersSetuserPost$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiUsersSetuserPost$Plain(params?: {\r\n  \r\n    /**\r\n     * User to save\r\n     */\r\n    body?: UserDto\r\n  }): Observable<boolean> {\r\n\r\n    return this.apiUsersSetuserPost$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<boolean>) => r.body as boolean)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Saves the user to DB. If the user already exist, update it.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersSetuserPost$Json()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiUsersSetuserPost$Json$Response(params?: {\r\n  \r\n    /**\r\n     * User to save\r\n     */\r\n    body?: UserDto\r\n  }): Observable<StrictHttpResponse<boolean>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersSetuserPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: String((r as HttpResponse<any>).body) === 'true' }) as StrictHttpResponse<boolean>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Saves the user to DB. If the user already exist, update it.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersSetuserPost$Json$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiUsersSetuserPost$Json(params?: {\r\n  \r\n    /**\r\n     * User to save\r\n     */\r\n    body?: UserDto\r\n  }): Observable<boolean> {\r\n\r\n    return this.apiUsersSetuserPost$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<boolean>) => r.body as boolean)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersSetdepartmentPost\r\n   */\r\n  static readonly ApiUsersSetdepartmentPostPath = '/api/users/setdepartment';\r\n\r\n  /**\r\n   * Saves the department to DB. If the department already exist, update it.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersSetdepartmentPost$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiUsersSetdepartmentPost$Plain$Response(params?: {\r\n  \r\n    /**\r\n     * Department to save\r\n     */\r\n    body?: UserDepartmentDto\r\n  }): Observable<StrictHttpResponse<boolean>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersSetdepartmentPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: String((r as HttpResponse<any>).body) === 'true' }) as StrictHttpResponse<boolean>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Saves the department to DB. If the department already exist, update it.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersSetdepartmentPost$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiUsersSetdepartmentPost$Plain(params?: {\r\n  \r\n    /**\r\n     * Department to save\r\n     */\r\n    body?: UserDepartmentDto\r\n  }): Observable<boolean> {\r\n\r\n    return this.apiUsersSetdepartmentPost$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<boolean>) => r.body as boolean)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Saves the department to DB. If the department already exist, update it.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersSetdepartmentPost$Json()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiUsersSetdepartmentPost$Json$Response(params?: {\r\n  \r\n    /**\r\n     * Department to save\r\n     */\r\n    body?: UserDepartmentDto\r\n  }): Observable<StrictHttpResponse<boolean>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersSetdepartmentPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: String((r as HttpResponse<any>).body) === 'true' }) as StrictHttpResponse<boolean>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Saves the department to DB. If the department already exist, update it.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersSetdepartmentPost$Json$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiUsersSetdepartmentPost$Json(params?: {\r\n  \r\n    /**\r\n     * Department to save\r\n     */\r\n    body?: UserDepartmentDto\r\n  }): Observable<boolean> {\r\n\r\n    return this.apiUsersSetdepartmentPost$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<boolean>) => r.body as boolean)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersGetpermissionsPost\r\n   */\r\n  static readonly ApiUsersGetpermissionsPostPath = '/api/users/getpermissions';\r\n\r\n  /**\r\n   * Returns all the permission for the specified user.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetpermissionsPost$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiUsersGetpermissionsPost$Plain$Response(params?: {\r\n\r\n    /**\r\n     * Level to search permissions\r\n     */\r\n    level?: number;\r\n  \r\n    /**\r\n     * Department\r\n     */\r\n    body?: null | Array<string>\r\n  }): Observable<StrictHttpResponse<Array<PermissionDto>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetpermissionsPostPath, 'post');\r\n    if (params) {\r\n\r\n      rb.query('level', params.level, {});\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<PermissionDto>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns all the permission for the specified user.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetpermissionsPost$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiUsersGetpermissionsPost$Plain(params?: {\r\n\r\n    /**\r\n     * Level to search permissions\r\n     */\r\n    level?: number;\r\n  \r\n    /**\r\n     * Department\r\n     */\r\n    body?: null | Array<string>\r\n  }): Observable<Array<PermissionDto>> {\r\n\r\n    return this.apiUsersGetpermissionsPost$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<PermissionDto>>) => r.body as Array<PermissionDto>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns all the permission for the specified user.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersGetpermissionsPost$Json()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiUsersGetpermissionsPost$Json$Response(params?: {\r\n\r\n    /**\r\n     * Level to search permissions\r\n     */\r\n    level?: number;\r\n  \r\n    /**\r\n     * Department\r\n     */\r\n    body?: null | Array<string>\r\n  }): Observable<StrictHttpResponse<Array<PermissionDto>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersGetpermissionsPostPath, 'post');\r\n    if (params) {\r\n\r\n      rb.query('level', params.level, {});\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<PermissionDto>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns all the permission for the specified user.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersGetpermissionsPost$Json$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiUsersGetpermissionsPost$Json(params?: {\r\n\r\n    /**\r\n     * Level to search permissions\r\n     */\r\n    level?: number;\r\n  \r\n    /**\r\n     * Department\r\n     */\r\n    body?: null | Array<string>\r\n  }): Observable<Array<PermissionDto>> {\r\n\r\n    return this.apiUsersGetpermissionsPost$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<PermissionDto>>) => r.body as Array<PermissionDto>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersSetpermissionsPost\r\n   */\r\n  static readonly ApiUsersSetpermissionsPostPath = '/api/users/setpermissions';\r\n\r\n  /**\r\n   * Saves the lines for a set of permissions to DB.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersSetpermissionsPost$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiUsersSetpermissionsPost$Plain$Response(params?: {\r\n  \r\n    /**\r\n     * Department to save\r\n     */\r\n    body?: null | Array<PermissionDto>\r\n  }): Observable<StrictHttpResponse<boolean>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersSetpermissionsPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: String((r as HttpResponse<any>).body) === 'true' }) as StrictHttpResponse<boolean>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Saves the lines for a set of permissions to DB.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersSetpermissionsPost$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiUsersSetpermissionsPost$Plain(params?: {\r\n  \r\n    /**\r\n     * Department to save\r\n     */\r\n    body?: null | Array<PermissionDto>\r\n  }): Observable<boolean> {\r\n\r\n    return this.apiUsersSetpermissionsPost$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<boolean>) => r.body as boolean)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Saves the lines for a set of permissions to DB.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersSetpermissionsPost$Json()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiUsersSetpermissionsPost$Json$Response(params?: {\r\n  \r\n    /**\r\n     * Department to save\r\n     */\r\n    body?: null | Array<PermissionDto>\r\n  }): Observable<StrictHttpResponse<boolean>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersSetpermissionsPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: String((r as HttpResponse<any>).body) === 'true' }) as StrictHttpResponse<boolean>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Saves the lines for a set of permissions to DB.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersSetpermissionsPost$Json$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiUsersSetpermissionsPost$Json(params?: {\r\n  \r\n    /**\r\n     * Department to save\r\n     */\r\n    body?: null | Array<PermissionDto>\r\n  }): Observable<boolean> {\r\n\r\n    return this.apiUsersSetpermissionsPost$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<boolean>) => r.body as boolean)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersDeleteuserDelete\r\n   */\r\n  static readonly ApiUsersDeleteuserDeletePath = '/api/users/deleteuser';\r\n\r\n  /**\r\n   * Logic delete the user from DB.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersDeleteuserDelete$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersDeleteuserDelete$Plain$Response(params?: {\r\n    id?: string;\r\n\r\n  }): Observable<StrictHttpResponse<boolean>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersDeleteuserDeletePath, 'delete');\r\n    if (params) {\r\n\r\n      rb.query('id', params.id, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: String((r as HttpResponse<any>).body) === 'true' }) as StrictHttpResponse<boolean>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Logic delete the user from DB.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersDeleteuserDelete$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersDeleteuserDelete$Plain(params?: {\r\n    id?: string;\r\n\r\n  }): Observable<boolean> {\r\n\r\n    return this.apiUsersDeleteuserDelete$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<boolean>) => r.body as boolean)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Logic delete the user from DB.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersDeleteuserDelete$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersDeleteuserDelete$Json$Response(params?: {\r\n    id?: string;\r\n\r\n  }): Observable<StrictHttpResponse<boolean>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersDeleteuserDeletePath, 'delete');\r\n    if (params) {\r\n\r\n      rb.query('id', params.id, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: String((r as HttpResponse<any>).body) === 'true' }) as StrictHttpResponse<boolean>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Logic delete the user from DB.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersDeleteuserDelete$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersDeleteuserDelete$Json(params?: {\r\n    id?: string;\r\n\r\n  }): Observable<boolean> {\r\n\r\n    return this.apiUsersDeleteuserDelete$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<boolean>) => r.body as boolean)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiUsersDeletedepartmentDelete\r\n   */\r\n  static readonly ApiUsersDeletedepartmentDeletePath = '/api/users/deletedepartment';\r\n\r\n  /**\r\n   * Logic delete the department from DB.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersDeletedepartmentDelete$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersDeletedepartmentDelete$Plain$Response(params?: {\r\n\r\n    /**\r\n     * Department ID to delete\r\n     */\r\n    id?: number;\r\n\r\n  }): Observable<StrictHttpResponse<boolean>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersDeletedepartmentDeletePath, 'delete');\r\n    if (params) {\r\n\r\n      rb.query('id', params.id, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: String((r as HttpResponse<any>).body) === 'true' }) as StrictHttpResponse<boolean>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Logic delete the department from DB.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersDeletedepartmentDelete$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersDeletedepartmentDelete$Plain(params?: {\r\n\r\n    /**\r\n     * Department ID to delete\r\n     */\r\n    id?: number;\r\n\r\n  }): Observable<boolean> {\r\n\r\n    return this.apiUsersDeletedepartmentDelete$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<boolean>) => r.body as boolean)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Logic delete the department from DB.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiUsersDeletedepartmentDelete$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersDeletedepartmentDelete$Json$Response(params?: {\r\n\r\n    /**\r\n     * Department ID to delete\r\n     */\r\n    id?: number;\r\n\r\n  }): Observable<StrictHttpResponse<boolean>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, UsersService.ApiUsersDeletedepartmentDeletePath, 'delete');\r\n    if (params) {\r\n\r\n      rb.query('id', params.id, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: String((r as HttpResponse<any>).body) === 'true' }) as StrictHttpResponse<boolean>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Logic delete the department from DB.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiUsersDeletedepartmentDelete$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiUsersDeletedepartmentDelete$Json(params?: {\r\n\r\n    /**\r\n     * Department ID to delete\r\n     */\r\n    id?: number;\r\n\r\n  }): Observable<boolean> {\r\n\r\n    return this.apiUsersDeletedepartmentDelete$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<boolean>) => r.body as boolean)\r\n    );\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { JsonWebTokenResponse } from '../../api/models';\r\nimport * as moment from 'moment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TokenService {\r\n  private token: JsonWebTokenResponse = null;\r\n\r\n  constructor(\r\n  ) {\r\n    this.getStoredToken();\r\n  }\r\n\r\n  getStoredToken() {\r\n    return new Promise<JsonWebTokenResponse>((resolve) => {\r\n      if (!this.token || moment().isSameOrAfter(this.token.validTo)) {\r\n        this.token = JSON.parse(localStorage.getItem('auth'));\r\n      }\r\n      resolve(this.token);\r\n    });\r\n  }\r\n  setStoredToken(newData: JsonWebTokenResponse) {\r\n    localStorage.setItem('auth', JSON.stringify(newData));\r\n    this.token = newData;\r\n  }\r\n}\r\n","import { Directive, HostListener, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[autoBlur]'\r\n})\r\nexport class AutoBlurDirective {\r\n  @HostListener('click', ['$event']) onHostClick(event) {\r\n    setTimeout(() => {\r\n      this.el.nativeElement.blur();\r\n    }, 0);\r\n  }\r\n\r\n  constructor(\r\n    public el: ElementRef<HTMLElement>\r\n  ) {\r\n  }\r\n\r\n}\r\n","/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { Employee } from '../models/employee';\r\nimport { EmployeeCollectionList } from '../models/employee-collection-list';\r\nimport { FilterCriteria } from '../models/filter-criteria';\r\nimport { Int32LabelAndValue } from '../models/int-32-label-and-value';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class EmployeesService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiEmployeesGetbyidGet\r\n   */\r\n  static readonly ApiEmployeesGetbyidGetPath = '/api/employees/getbyid';\r\n\r\n  /**\r\n   * Obtiene un empleado con la id seleccionada.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiEmployeesGetbyidGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesGetbyidGet$Plain$Response(params?: {\r\n\r\n    /**\r\n     * ID del empleado a buscar\r\n     */\r\n    id?: number;\r\n\r\n  }): Observable<StrictHttpResponse<Employee>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, EmployeesService.ApiEmployeesGetbyidGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('id', params.id, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Employee>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene un empleado con la id seleccionada.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiEmployeesGetbyidGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesGetbyidGet$Plain(params?: {\r\n\r\n    /**\r\n     * ID del empleado a buscar\r\n     */\r\n    id?: number;\r\n\r\n  }): Observable<Employee> {\r\n\r\n    return this.apiEmployeesGetbyidGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Employee>) => r.body as Employee)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene un empleado con la id seleccionada.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiEmployeesGetbyidGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesGetbyidGet$Json$Response(params?: {\r\n\r\n    /**\r\n     * ID del empleado a buscar\r\n     */\r\n    id?: number;\r\n\r\n  }): Observable<StrictHttpResponse<Employee>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, EmployeesService.ApiEmployeesGetbyidGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('id', params.id, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Employee>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene un empleado con la id seleccionada.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiEmployeesGetbyidGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesGetbyidGet$Json(params?: {\r\n\r\n    /**\r\n     * ID del empleado a buscar\r\n     */\r\n    id?: number;\r\n\r\n  }): Observable<Employee> {\r\n\r\n    return this.apiEmployeesGetbyidGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Employee>) => r.body as Employee)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiEmployeesGetlistPost\r\n   */\r\n  static readonly ApiEmployeesGetlistPostPath = '/api/employees/getlist';\r\n\r\n  /**\r\n   * Obtiene la lista de empleados.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiEmployeesGetlistPost$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesGetlistPost$Plain$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<EmployeeCollectionList>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, EmployeesService.ApiEmployeesGetlistPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<EmployeeCollectionList>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene la lista de empleados.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiEmployeesGetlistPost$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesGetlistPost$Plain(params?: {\r\n\r\n  }): Observable<EmployeeCollectionList> {\r\n\r\n    return this.apiEmployeesGetlistPost$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<EmployeeCollectionList>) => r.body as EmployeeCollectionList)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene la lista de empleados.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiEmployeesGetlistPost$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesGetlistPost$Json$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<EmployeeCollectionList>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, EmployeesService.ApiEmployeesGetlistPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<EmployeeCollectionList>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene la lista de empleados.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiEmployeesGetlistPost$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesGetlistPost$Json(params?: {\r\n\r\n  }): Observable<EmployeeCollectionList> {\r\n\r\n    return this.apiEmployeesGetlistPost$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<EmployeeCollectionList>) => r.body as EmployeeCollectionList)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiEmployeesGetlistcompletaPost\r\n   */\r\n  static readonly ApiEmployeesGetlistcompletaPostPath = '/api/employees/getlistcompleta';\r\n\r\n  /**\r\n   * Obtiene la lista de empleados.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiEmployeesGetlistcompletaPost$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesGetlistcompletaPost$Plain$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<EmployeeCollectionList>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, EmployeesService.ApiEmployeesGetlistcompletaPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<EmployeeCollectionList>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene la lista de empleados.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiEmployeesGetlistcompletaPost$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesGetlistcompletaPost$Plain(params?: {\r\n\r\n  }): Observable<EmployeeCollectionList> {\r\n\r\n    return this.apiEmployeesGetlistcompletaPost$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<EmployeeCollectionList>) => r.body as EmployeeCollectionList)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene la lista de empleados.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiEmployeesGetlistcompletaPost$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesGetlistcompletaPost$Json$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<EmployeeCollectionList>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, EmployeesService.ApiEmployeesGetlistcompletaPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<EmployeeCollectionList>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene la lista de empleados.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiEmployeesGetlistcompletaPost$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesGetlistcompletaPost$Json(params?: {\r\n\r\n  }): Observable<EmployeeCollectionList> {\r\n\r\n    return this.apiEmployeesGetlistcompletaPost$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<EmployeeCollectionList>) => r.body as EmployeeCollectionList)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiEmployeesPositionlistGet\r\n   */\r\n  static readonly ApiEmployeesPositionlistGetPath = '/api/employees/positionlist';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiEmployeesPositionlistGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesPositionlistGet$Plain$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<Int32LabelAndValue>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, EmployeesService.ApiEmployeesPositionlistGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<Int32LabelAndValue>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiEmployeesPositionlistGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesPositionlistGet$Plain(params?: {\r\n\r\n  }): Observable<Array<Int32LabelAndValue>> {\r\n\r\n    return this.apiEmployeesPositionlistGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<Int32LabelAndValue>>) => r.body as Array<Int32LabelAndValue>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiEmployeesPositionlistGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesPositionlistGet$Json$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<Int32LabelAndValue>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, EmployeesService.ApiEmployeesPositionlistGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<Int32LabelAndValue>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiEmployeesPositionlistGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesPositionlistGet$Json(params?: {\r\n\r\n  }): Observable<Array<Int32LabelAndValue>> {\r\n\r\n    return this.apiEmployeesPositionlistGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<Int32LabelAndValue>>) => r.body as Array<Int32LabelAndValue>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiEmployeesDatatablePost\r\n   */\r\n  static readonly ApiEmployeesDatatablePostPath = '/api/employees/datatable';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiEmployeesDatatablePost$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiEmployeesDatatablePost$Plain$Response(params?: {\r\n    pi?: number;\r\n    ps?: number;\r\n    sn?: null | string;\r\n    sd?: boolean;\r\n      body?: null | Array<FilterCriteria>\r\n  }): Observable<StrictHttpResponse<EmployeeCollectionList>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, EmployeesService.ApiEmployeesDatatablePostPath, 'post');\r\n    if (params) {\r\n\r\n      rb.query('pi', params.pi, {});\r\n      rb.query('ps', params.ps, {});\r\n      rb.query('sn', params.sn, {});\r\n      rb.query('sd', params.sd, {});\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<EmployeeCollectionList>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiEmployeesDatatablePost$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiEmployeesDatatablePost$Plain(params?: {\r\n    pi?: number;\r\n    ps?: number;\r\n    sn?: null | string;\r\n    sd?: boolean;\r\n      body?: null | Array<FilterCriteria>\r\n  }): Observable<EmployeeCollectionList> {\r\n\r\n    return this.apiEmployeesDatatablePost$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<EmployeeCollectionList>) => r.body as EmployeeCollectionList)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiEmployeesDatatablePost$Json()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiEmployeesDatatablePost$Json$Response(params?: {\r\n    pi?: number;\r\n    ps?: number;\r\n    sn?: null | string;\r\n    sd?: boolean;\r\n      body?: null | Array<FilterCriteria>\r\n  }): Observable<StrictHttpResponse<EmployeeCollectionList>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, EmployeesService.ApiEmployeesDatatablePostPath, 'post');\r\n    if (params) {\r\n\r\n      rb.query('pi', params.pi, {});\r\n      rb.query('ps', params.ps, {});\r\n      rb.query('sn', params.sn, {});\r\n      rb.query('sd', params.sd, {});\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<EmployeeCollectionList>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiEmployeesDatatablePost$Json$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiEmployeesDatatablePost$Json(params?: {\r\n    pi?: number;\r\n    ps?: number;\r\n    sn?: null | string;\r\n    sd?: boolean;\r\n      body?: null | Array<FilterCriteria>\r\n  }): Observable<EmployeeCollectionList> {\r\n\r\n    return this.apiEmployeesDatatablePost$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<EmployeeCollectionList>) => r.body as EmployeeCollectionList)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiEmployeesGetlistcombolistGet\r\n   */\r\n  static readonly ApiEmployeesGetlistcombolistGetPath = '/api/employees/getlistcombolist';\r\n\r\n  /**\r\n   * Obtiene la lista de empleados filtrada por name Contains.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiEmployeesGetlistcombolistGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesGetlistcombolistGet$Plain$Response(params?: {\r\n    filtro?: null | string;\r\n\r\n  }): Observable<StrictHttpResponse<Array<Employee>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, EmployeesService.ApiEmployeesGetlistcombolistGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('filtro', params.filtro, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<Employee>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene la lista de empleados filtrada por name Contains.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiEmployeesGetlistcombolistGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesGetlistcombolistGet$Plain(params?: {\r\n    filtro?: null | string;\r\n\r\n  }): Observable<Array<Employee>> {\r\n\r\n    return this.apiEmployeesGetlistcombolistGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<Employee>>) => r.body as Array<Employee>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene la lista de empleados filtrada por name Contains.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiEmployeesGetlistcombolistGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesGetlistcombolistGet$Json$Response(params?: {\r\n    filtro?: null | string;\r\n\r\n  }): Observable<StrictHttpResponse<Array<Employee>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, EmployeesService.ApiEmployeesGetlistcombolistGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('filtro', params.filtro, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<Employee>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtiene la lista de empleados filtrada por name Contains.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiEmployeesGetlistcombolistGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesGetlistcombolistGet$Json(params?: {\r\n    filtro?: null | string;\r\n\r\n  }): Observable<Array<Employee>> {\r\n\r\n    return this.apiEmployeesGetlistcombolistGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<Employee>>) => r.body as Array<Employee>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiEmployeesInsertPost\r\n   */\r\n  static readonly ApiEmployeesInsertPostPath = '/api/employees/insert';\r\n\r\n  /**\r\n   * Crea un nuevo empleado en la BD.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiEmployeesInsertPost$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiEmployeesInsertPost$Plain$Response(params?: {\r\n\r\n    /**\r\n     * Establece si se hara un commit en la BD\r\n     */\r\n    commit?: boolean;\r\n  \r\n    /**\r\n     * Datos del nuevo empleado\r\n     */\r\n    body?: Employee\r\n  }): Observable<StrictHttpResponse<Employee>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, EmployeesService.ApiEmployeesInsertPostPath, 'post');\r\n    if (params) {\r\n\r\n      rb.query('commit', params.commit, {});\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Employee>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Crea un nuevo empleado en la BD.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiEmployeesInsertPost$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiEmployeesInsertPost$Plain(params?: {\r\n\r\n    /**\r\n     * Establece si se hara un commit en la BD\r\n     */\r\n    commit?: boolean;\r\n  \r\n    /**\r\n     * Datos del nuevo empleado\r\n     */\r\n    body?: Employee\r\n  }): Observable<Employee> {\r\n\r\n    return this.apiEmployeesInsertPost$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Employee>) => r.body as Employee)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Crea un nuevo empleado en la BD.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiEmployeesInsertPost$Json()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiEmployeesInsertPost$Json$Response(params?: {\r\n\r\n    /**\r\n     * Establece si se hara un commit en la BD\r\n     */\r\n    commit?: boolean;\r\n  \r\n    /**\r\n     * Datos del nuevo empleado\r\n     */\r\n    body?: Employee\r\n  }): Observable<StrictHttpResponse<Employee>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, EmployeesService.ApiEmployeesInsertPostPath, 'post');\r\n    if (params) {\r\n\r\n      rb.query('commit', params.commit, {});\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Employee>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Crea un nuevo empleado en la BD.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiEmployeesInsertPost$Json$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiEmployeesInsertPost$Json(params?: {\r\n\r\n    /**\r\n     * Establece si se hara un commit en la BD\r\n     */\r\n    commit?: boolean;\r\n  \r\n    /**\r\n     * Datos del nuevo empleado\r\n     */\r\n    body?: Employee\r\n  }): Observable<Employee> {\r\n\r\n    return this.apiEmployeesInsertPost$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Employee>) => r.body as Employee)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiEmployeesUpdatePost\r\n   */\r\n  static readonly ApiEmployeesUpdatePostPath = '/api/employees/update';\r\n\r\n  /**\r\n   * Busca al antiguo empleado en la BD y actualiza sus datos.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiEmployeesUpdatePost$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiEmployeesUpdatePost$Plain$Response(params?: {\r\n\r\n    /**\r\n     * Establece si se hara un commit en la BD\r\n     */\r\n    commit?: boolean;\r\n  \r\n    /**\r\n     * Datos del nuevo empleado\r\n     */\r\n    body?: Employee\r\n  }): Observable<StrictHttpResponse<Employee>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, EmployeesService.ApiEmployeesUpdatePostPath, 'post');\r\n    if (params) {\r\n\r\n      rb.query('commit', params.commit, {});\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Employee>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Busca al antiguo empleado en la BD y actualiza sus datos.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiEmployeesUpdatePost$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiEmployeesUpdatePost$Plain(params?: {\r\n\r\n    /**\r\n     * Establece si se hara un commit en la BD\r\n     */\r\n    commit?: boolean;\r\n  \r\n    /**\r\n     * Datos del nuevo empleado\r\n     */\r\n    body?: Employee\r\n  }): Observable<Employee> {\r\n\r\n    return this.apiEmployeesUpdatePost$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Employee>) => r.body as Employee)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Busca al antiguo empleado en la BD y actualiza sus datos.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiEmployeesUpdatePost$Json()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiEmployeesUpdatePost$Json$Response(params?: {\r\n\r\n    /**\r\n     * Establece si se hara un commit en la BD\r\n     */\r\n    commit?: boolean;\r\n  \r\n    /**\r\n     * Datos del nuevo empleado\r\n     */\r\n    body?: Employee\r\n  }): Observable<StrictHttpResponse<Employee>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, EmployeesService.ApiEmployeesUpdatePostPath, 'post');\r\n    if (params) {\r\n\r\n      rb.query('commit', params.commit, {});\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Employee>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Busca al antiguo empleado en la BD y actualiza sus datos.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiEmployeesUpdatePost$Json$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiEmployeesUpdatePost$Json(params?: {\r\n\r\n    /**\r\n     * Establece si se hara un commit en la BD\r\n     */\r\n    commit?: boolean;\r\n  \r\n    /**\r\n     * Datos del nuevo empleado\r\n     */\r\n    body?: Employee\r\n  }): Observable<Employee> {\r\n\r\n    return this.apiEmployeesUpdatePost$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Employee>) => r.body as Employee)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiEmployeesDeleteDelete\r\n   */\r\n  static readonly ApiEmployeesDeleteDeletePath = '/api/employees/delete';\r\n\r\n  /**\r\n   * Borra un empleado de la BD.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiEmployeesDeleteDelete$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesDeleteDelete$Plain$Response(params?: {\r\n\r\n    /**\r\n     * ID del empleado a borrar\r\n     */\r\n    id?: number;\r\n\r\n    /**\r\n     * Establece si se hara un commit en la BD\r\n     */\r\n    commit?: boolean;\r\n\r\n  }): Observable<StrictHttpResponse<Employee>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, EmployeesService.ApiEmployeesDeleteDeletePath, 'delete');\r\n    if (params) {\r\n\r\n      rb.query('id', params.id, {});\r\n      rb.query('commit', params.commit, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Employee>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Borra un empleado de la BD.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiEmployeesDeleteDelete$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesDeleteDelete$Plain(params?: {\r\n\r\n    /**\r\n     * ID del empleado a borrar\r\n     */\r\n    id?: number;\r\n\r\n    /**\r\n     * Establece si se hara un commit en la BD\r\n     */\r\n    commit?: boolean;\r\n\r\n  }): Observable<Employee> {\r\n\r\n    return this.apiEmployeesDeleteDelete$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Employee>) => r.body as Employee)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Borra un empleado de la BD.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiEmployeesDeleteDelete$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesDeleteDelete$Json$Response(params?: {\r\n\r\n    /**\r\n     * ID del empleado a borrar\r\n     */\r\n    id?: number;\r\n\r\n    /**\r\n     * Establece si se hara un commit en la BD\r\n     */\r\n    commit?: boolean;\r\n\r\n  }): Observable<StrictHttpResponse<Employee>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, EmployeesService.ApiEmployeesDeleteDeletePath, 'delete');\r\n    if (params) {\r\n\r\n      rb.query('id', params.id, {});\r\n      rb.query('commit', params.commit, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Employee>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Borra un empleado de la BD.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiEmployeesDeleteDelete$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiEmployeesDeleteDelete$Json(params?: {\r\n\r\n    /**\r\n     * ID del empleado a borrar\r\n     */\r\n    id?: number;\r\n\r\n    /**\r\n     * Establece si se hara un commit en la BD\r\n     */\r\n    commit?: boolean;\r\n\r\n  }): Observable<Employee> {\r\n\r\n    return this.apiEmployeesDeleteDelete$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Employee>) => r.body as Employee)\r\n    );\r\n  }\r\n\r\n}\r\n","/* tslint:disable */\r\nimport { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\r\n\r\n/**\r\n * Custom parameter codec to correctly handle the plus sign in parameter\r\n * values. See https://github.com/angular/angular/issues/18261\r\n */\r\nclass ParameterCodec implements HttpParameterCodec {\r\n  encodeKey(key: string): string {\r\n    return encodeURIComponent(key);\r\n  }\r\n\r\n  encodeValue(value: string): string {\r\n    return encodeURIComponent(value);\r\n  }\r\n\r\n  decodeKey(key: string): string {\r\n    return decodeURIComponent(key);\r\n  }\r\n\r\n  decodeValue(value: string): string {\r\n    return decodeURIComponent(value);\r\n  }\r\n}\r\nconst ParameterCodecInstance = new ParameterCodec();\r\n\r\n/**\r\n * Defines the options for appending a parameter\r\n */\r\ninterface ParameterOptions {\r\n  style?: string;\r\n  explode?: boolean;\r\n}\r\n\r\n/**\r\n * Base class for a parameter\r\n */\r\nabstract class Parameter {\r\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\r\n    this.options = options || {};\r\n    if (this.options.style === null || this.options.style === undefined) {\r\n      this.options.style = defaultStyle;\r\n    }\r\n    if (this.options.explode === null || this.options.explode === undefined) {\r\n      this.options.explode = defaultExplode;\r\n    }\r\n  }\r\n\r\n  serializeValue(value: any, separator = ','): string {\r\n    if (value === null || value === undefined) {\r\n      return '';\r\n    } else if (value instanceof Array) {\r\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\r\n    } else if (typeof value === 'object') {\r\n      const array: string[] = [];\r\n      for (const key of Object.keys(value)) {\r\n        let propVal = value[key];\r\n        if (propVal !== null && propVal !== undefined) {\r\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\r\n          if (this.options.explode) {\r\n            array.push(`${key}=${propVal}`);\r\n          } else {\r\n            array.push(key);\r\n            array.push(propVal);\r\n          }\r\n        }\r\n      }\r\n      return array.join(separator);\r\n    } else {\r\n      return String(value);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * A parameter in the operation path\r\n */\r\nclass PathParameter extends Parameter {\r\n  constructor(name: string, value: any, options: ParameterOptions) {\r\n    super(name, value, options, 'simple', false);\r\n  }\r\n\r\n  append(path: string): string {\r\n    let value = this.value;\r\n    if (value === null || value === undefined) {\r\n      value = '';\r\n    }\r\n    let prefix = this.options.style === 'label' ? '.' : '';\r\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\r\n    if (this.options.style === 'matrix') {\r\n      // The parameter name is just used as prefix, except in some cases...\r\n      prefix = `;${this.name}=`;\r\n      if (this.options.explode && typeof value === 'object') {\r\n        prefix = ';';\r\n        if (value instanceof Array) {\r\n          // For arrays we have to repeat the name for each element\r\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\r\n          separator = ';';\r\n        } else {\r\n          // For objects we have to put each the key / value pairs\r\n          value = this.serializeValue(value, ';');\r\n        }\r\n      }\r\n    }\r\n    value = prefix + this.serializeValue(value, separator);\r\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\r\n    path = path.replace(`{${this.name}}`, value);\r\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\r\n    return path;\r\n  }\r\n}\r\n\r\n/**\r\n * A parameter in the query\r\n */\r\nclass QueryParameter extends Parameter {\r\n  constructor(name: string, value: any, options: ParameterOptions) {\r\n    super(name, value, options, 'form', true);\r\n  }\r\n\r\n  append(params: HttpParams): HttpParams {\r\n    if (this.value instanceof Array) {\r\n      // Array serialization\r\n      if (this.options.explode) {\r\n        for (const v of this.value) {\r\n          params = params.append(this.name, this.serializeValue(v));\r\n        }\r\n      } else {\r\n        const separator = this.options.style === 'spaceDelimited'\r\n          ? ' ' : this.options.style === 'pipeDelimited'\r\n            ? '|' : ',';\r\n        return params.append(this.name, this.serializeValue(this.value, separator));\r\n      }\r\n    } else if (this.value !== null && typeof this.value === 'object') {\r\n      // Object serialization\r\n      if (this.options.style === 'deepObject') {\r\n        // Append a parameter for each key, in the form `name[key]`\r\n        for (const key of Object.keys(this.value)) {\r\n          const propVal = this.value[key];\r\n          if (propVal !== null && propVal !== undefined) {\r\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\r\n          }\r\n        }\r\n      } else if (this.options.explode) {\r\n        // Append a parameter for each key without using the parameter name\r\n        for (const key of Object.keys(this.value)) {\r\n          const propVal = this.value[key];\r\n          if (propVal !== null && propVal !== undefined) {\r\n            params = params.append(key, this.serializeValue(propVal));\r\n          }\r\n        }\r\n      } else {\r\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\r\n        const array = [];\r\n        for (const key of Object.keys(this.value)) {\r\n          const propVal = this.value[key];\r\n          if (propVal !== null && propVal !== undefined) {\r\n            array.push(key);\r\n            array.push(propVal);\r\n          }\r\n        }\r\n        params = params.append(this.name, this.serializeValue(array));\r\n      }\r\n    } else if (this.value !== null && this.value !== undefined) {\r\n      // Plain value\r\n      params = params.append(this.name, this.serializeValue(this.value));\r\n    }\r\n    return params;\r\n  }\r\n}\r\n\r\n/**\r\n * A parameter in the HTTP request header\r\n */\r\nclass HeaderParameter extends Parameter {\r\n  constructor(name: string, value: any, options: ParameterOptions) {\r\n    super(name, value, options, 'simple', false);\r\n  }\r\n\r\n  append(headers: HttpHeaders): HttpHeaders {\r\n    if (this.value !== null && this.value !== undefined) {\r\n      if (this.value instanceof Array) {\r\n        for (const v of this.value) {\r\n          headers = headers.append(this.name, this.serializeValue(v));\r\n        }\r\n      } else {\r\n        headers = headers.append(this.name, this.serializeValue(this.value));\r\n      }\r\n    }\r\n    return headers;\r\n  }\r\n}\r\n\r\n/**\r\n * Helper to build http requests from parameters\r\n */\r\nexport class RequestBuilder {\r\n\r\n  private _path = new Map<string, PathParameter>();\r\n  private _query = new Map<string, QueryParameter>();\r\n  private _header = new Map<string, HeaderParameter>();\r\n  _bodyContent: any | null;\r\n  _bodyContentType?: string;\r\n\r\n  constructor(\r\n    public rootUrl: string,\r\n    public operationPath: string,\r\n    public method: string) {\r\n  }\r\n\r\n  /**\r\n   * Sets a path parameter\r\n   */\r\n  path(name: string, value: any, options?: ParameterOptions): void {\r\n    this._path.set(name, new PathParameter(name, value, options || {}));\r\n  }\r\n\r\n  /**\r\n   * Sets a query parameter\r\n   */\r\n  query(name: string, value: any, options?: ParameterOptions): void {\r\n    this._query.set(name, new QueryParameter(name, value, options || {}));\r\n  }\r\n\r\n  /**\r\n   * Sets a header parameter\r\n   */\r\n  header(name: string, value: any, options?: ParameterOptions): void {\r\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\r\n  }\r\n\r\n  /**\r\n   * Sets the body content, along with the content type\r\n   */\r\n  body(value: any, contentType = 'application/json'): void {\r\n    if (value instanceof Blob) {\r\n      this._bodyContentType = value.type;\r\n    } else {\r\n      this._bodyContentType = contentType;\r\n    }\r\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\r\n      // Handle URL-encoded data\r\n      const pairs: string[][] = [];\r\n      for (const key of Object.keys(value)) {\r\n        let val = value[key];\r\n        if (!(val instanceof Array)) {\r\n          val = [val];\r\n        }\r\n        for (const v of val) {\r\n          const formValue = this.formDataValue(v);\r\n          if (formValue !== null) {\r\n            pairs.push([key, formValue]);\r\n          }\r\n        }\r\n      }\r\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\r\n    } else if (this._bodyContentType === 'multipart/form-data') {\r\n      // Handle multipart form data\r\n      const formData = new FormData();\r\n      if (value !== null && value !== undefined) {\r\n        for (const key of Object.keys(value)) {\r\n          const val = value[key];\r\n          if (val instanceof Array) {\r\n            for (const v of val) {\r\n              const toAppend = this.formDataValue(v);\r\n              if (toAppend !== null) {\r\n                formData.append(key, toAppend);\r\n              }\r\n            }\r\n          } else {\r\n            const toAppend = this.formDataValue(val);\r\n            if (toAppend !== null) {\r\n              formData.set(key, toAppend);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this._bodyContent = formData;\r\n    } else {\r\n      // The body is the plain content\r\n      this._bodyContent = value;\r\n    }\r\n  }\r\n\r\n  private formDataValue(value: any): any {\r\n    if (value === null || value === undefined) {\r\n      return null;\r\n    }\r\n    if (value instanceof Blob) {\r\n      return value;\r\n    }\r\n    if (typeof value === 'object') {\r\n      return JSON.stringify(value);\r\n    }\r\n    return String(value);\r\n  }\r\n\r\n  /**\r\n   * Builds the request with the current set parameters\r\n   */\r\n  build<T = any>(options?: {\r\n    /** Which content types to accept */\r\n    accept?: string;\r\n\r\n    /** The expected response type */\r\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\r\n\r\n    /** Whether to report progress on uploads / downloads */\r\n    reportProgress?: boolean;\r\n  }): HttpRequest<T> {\r\n\r\n    options = options || {};\r\n\r\n    // Path parameters\r\n    let path = this.operationPath;\r\n    for (const pathParam of this._path.values()) {\r\n      path = pathParam.append(path);\r\n    }\r\n    const url = this.rootUrl + path;\r\n\r\n    // Query parameters\r\n    let httpParams = new HttpParams({\r\n      encoder: ParameterCodecInstance\r\n    });\r\n    for (const queryParam of this._query.values()) {\r\n      httpParams = queryParam.append(httpParams);\r\n    }\r\n\r\n    // Header parameters\r\n    let httpHeaders = new HttpHeaders();\r\n    if (options.accept) {\r\n      httpHeaders = httpHeaders.append('Accept', options.accept);\r\n    }\r\n    for (const headerParam of this._header.values()) {\r\n      httpHeaders = headerParam.append(httpHeaders);\r\n    }\r\n\r\n    // Request content headers\r\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\r\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\r\n    }\r\n\r\n    // Perform the request\r\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\r\n      params: httpParams,\r\n      headers: httpHeaders,\r\n      responseType: options.responseType,\r\n      reportProgress: options.reportProgress\r\n    });\r\n  }\r\n}\r\n\r\n","/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ApiConfiguration } from './api-configuration';\r\n\r\n/**\r\n * Base class for services\r\n */\r\n@Injectable()\r\nexport class BaseService {\r\n  constructor(\r\n    protected config: ApiConfiguration,\r\n    protected http: HttpClient\r\n  ) {\r\n  }\r\n\r\n  private _rootUrl: string = '';\r\n\r\n  /**\r\n   * Returns the root url for all operations in this service. If not set directly in this\r\n   * service, will fallback to `ApiConfiguration.rootUrl`.\r\n   */\r\n  get rootUrl(): string {\r\n    return this._rootUrl || this.config.rootUrl;\r\n  }\r\n\r\n  /**\r\n   * Sets the root URL for API operations in this service.\r\n   */\r\n  set rootUrl(rootUrl: string) {\r\n    this._rootUrl = rootUrl;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor\r\n} from '@angular/common/http';\r\nimport { from, Observable } from 'rxjs';\r\nimport { TokenService } from '../../services/token/token.service';\r\n\r\n@Injectable()\r\nexport class ApiHeaderJwtInterceptor implements HttpInterceptor {\r\n\r\n  constructor(\r\n    public tokenSV: TokenService,\r\n  ) {}\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    return from(this.handleRequest(request, next));\r\n  }\r\n\r\n\r\n  private async handleRequest(request: HttpRequest<unknown>, next: HttpHandler) {\r\n    const token = await this.tokenSV.getStoredToken();\r\n    if (token && token.accessToken && request.url.startsWith('/')) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${token.accessToken}`,\r\n        },\r\n        withCredentials: true,\r\n      });\r\n    }\r\n    return next.handle(request).toPromise();\r\n  }\r\n}\r\n","/* tslint:disable */\r\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ApiConfiguration, ApiConfigurationParams } from './api-configuration';\r\n\r\nimport { AccessService } from './services/access.service';\r\nimport { AccountService } from './services/account.service';\r\nimport { EmployeesService } from './services/employees.service';\r\nimport { ImportsService } from './services/imports.service';\r\nimport { LanguageService } from './services/language.service';\r\nimport { LayoutMenuService } from './services/layout-menu.service';\r\nimport { ProjectService } from './services/project.service';\r\nimport { UsersService } from './services/users.service';\r\n\r\n/**\r\n * Module that provides all services and configuration.\r\n */\r\n@NgModule({\r\n  imports: [],\r\n  exports: [],\r\n  declarations: [],\r\n  providers: [\r\n    AccessService,\r\n    AccountService,\r\n    EmployeesService,\r\n    ImportsService,\r\n    LanguageService,\r\n    LayoutMenuService,\r\n    ProjectService,\r\n    UsersService,\r\n    ApiConfiguration\r\n  ],\r\n})\r\nexport class ApiModule {\r\n  static forRoot(params: ApiConfigurationParams): ModuleWithProviders<ApiModule> {\r\n    return {\r\n      ngModule: ApiModule,\r\n      providers: [\r\n        {\r\n          provide: ApiConfiguration,\r\n          useValue: params\r\n        }\r\n      ]\r\n    }\r\n  }\r\n\r\n  constructor( \r\n    @Optional() @SkipSelf() parentModule: ApiModule,\r\n    @Optional() http: HttpClient\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\r\n    }\r\n    if (!http) {\r\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\r\n      'See also https://github.com/angular/angular/issues/20575');\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { EpFullscreenImgComponent } from './ep-fullscreen-img.component';\r\nimport { EpFullscreenImgDirective } from './directives/ep-fullscreen-img.directive';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { AutoBlurModule } from '../../directives/auto-blur/auto-blur.module';\r\nimport { HammerModule } from '@angular/platform-browser';\r\n\r\n@NgModule({\r\n  declarations: [EpFullscreenImgComponent],\r\n  exports: [EpFullscreenImgComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FontAwesomeModule,\r\n    AutoBlurModule,\r\n    HammerModule,\r\n  ]\r\n})\r\nexport class EpFullscreenImgModule {\r\n}\r\n","/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { AccountLoginRequest } from '../models/account-login-request';\r\nimport { AuthenticationState } from '../models/authentication-state';\r\nimport { JsonWebTokenResponse } from '../models/json-web-token-response';\r\nimport { PolicyMenu } from '../models/policy-menu';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AccountService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiAccountTokenPost\r\n   */\r\n  static readonly ApiAccountTokenPostPath = '/api/account/token';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiAccountTokenPost$Plain()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  apiAccountTokenPost$Plain$Response(params?: {\r\n      body?: AccountLoginRequest\r\n  }): Observable<StrictHttpResponse<JsonWebTokenResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, AccountService.ApiAccountTokenPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<JsonWebTokenResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiAccountTokenPost$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  apiAccountTokenPost$Plain(params?: {\r\n      body?: AccountLoginRequest\r\n  }): Observable<JsonWebTokenResponse> {\r\n\r\n    return this.apiAccountTokenPost$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<JsonWebTokenResponse>) => r.body as JsonWebTokenResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiAccountTokenPost$Json()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  apiAccountTokenPost$Json$Response(params?: {\r\n      body?: AccountLoginRequest\r\n  }): Observable<StrictHttpResponse<JsonWebTokenResponse>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, AccountService.ApiAccountTokenPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<JsonWebTokenResponse>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiAccountTokenPost$Json$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  apiAccountTokenPost$Json(params?: {\r\n      body?: AccountLoginRequest\r\n  }): Observable<JsonWebTokenResponse> {\r\n\r\n    return this.apiAccountTokenPost$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<JsonWebTokenResponse>) => r.body as JsonWebTokenResponse)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiAccountLoginPost\r\n   */\r\n  static readonly ApiAccountLoginPostPath = '/api/account/login';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiAccountLoginPost()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  apiAccountLoginPost$Response(params?: {\r\n      body?: AccountLoginRequest\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, AccountService.ApiAccountLoginPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n      rb.body(params.body, 'application/json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiAccountLoginPost$Response()` instead.\r\n   *\r\n   * This method sends `application/json` and handles request body of type `application/json`.\r\n   */\r\n  apiAccountLoginPost(params?: {\r\n      body?: AccountLoginRequest\r\n  }): Observable<void> {\r\n\r\n    return this.apiAccountLoginPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiAccountPoliciesGet\r\n   */\r\n  static readonly ApiAccountPoliciesGetPath = '/api/account/policies';\r\n\r\n  /**\r\n   * Only used to map Policies to OpenAPI (Swagger). Response will always be 200.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiAccountPoliciesGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiAccountPoliciesGet$Plain$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<PolicyMenu>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, AccountService.ApiAccountPoliciesGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<PolicyMenu>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Only used to map Policies to OpenAPI (Swagger). Response will always be 200.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiAccountPoliciesGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiAccountPoliciesGet$Plain(params?: {\r\n\r\n  }): Observable<Array<PolicyMenu>> {\r\n\r\n    return this.apiAccountPoliciesGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<PolicyMenu>>) => r.body as Array<PolicyMenu>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Only used to map Policies to OpenAPI (Swagger). Response will always be 200.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiAccountPoliciesGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiAccountPoliciesGet$Json$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<PolicyMenu>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, AccountService.ApiAccountPoliciesGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<PolicyMenu>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Only used to map Policies to OpenAPI (Swagger). Response will always be 200.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiAccountPoliciesGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiAccountPoliciesGet$Json(params?: {\r\n\r\n  }): Observable<Array<PolicyMenu>> {\r\n\r\n    return this.apiAccountPoliciesGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<PolicyMenu>>) => r.body as Array<PolicyMenu>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiAccountLogoutPost\r\n   */\r\n  static readonly ApiAccountLogoutPostPath = '/api/account/logout';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiAccountLogoutPost()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiAccountLogoutPost$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<void>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, AccountService.ApiAccountLogoutPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: '*/*'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiAccountLogoutPost$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiAccountLogoutPost(params?: {\r\n\r\n  }): Observable<void> {\r\n\r\n    return this.apiAccountLogoutPost$Response(params).pipe(\r\n      map((r: StrictHttpResponse<void>) => r.body as void)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiAccountProfileGet\r\n   */\r\n  static readonly ApiAccountProfileGetPath = '/api/account/profile';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiAccountProfileGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiAccountProfileGet$Plain$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<AuthenticationState>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, AccountService.ApiAccountProfileGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<AuthenticationState>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiAccountProfileGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiAccountProfileGet$Plain(params?: {\r\n\r\n  }): Observable<AuthenticationState> {\r\n\r\n    return this.apiAccountProfileGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<AuthenticationState>) => r.body as AuthenticationState)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiAccountProfileGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiAccountProfileGet$Json$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<AuthenticationState>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, AccountService.ApiAccountProfileGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<AuthenticationState>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiAccountProfileGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiAccountProfileGet$Json(params?: {\r\n\r\n  }): Observable<AuthenticationState> {\r\n\r\n    return this.apiAccountProfileGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<AuthenticationState>) => r.body as AuthenticationState)\r\n    );\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { TranslateGuard } from './shared/guards/translate/translate.guard';\r\nimport { YoutubeGuard } from './shared/guards/third-party-async-libraries/youtube/youtube.guard';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', loadChildren: () => import('./pages/pages.module').then(m => m.PagesModule),\r\n    canLoad: [TranslateGuard, YoutubeGuard]\r\n  },\r\n  { path: '**', redirectTo: '/' },\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forRoot(routes, {\r\n      // anchorScrolling: 'enabled',\r\n      // scrollPositionRestoration: 'enabled',\r\n    })\r\n  ],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n\r\n@NgModule({\r\n  imports: [],\r\n})\r\nexport class AppRoutingFirstRouteModule { }\r\n","import { Component, OnInit, Input, HostListener, ElementRef, ViewChild, OnDestroy, ChangeDetectorRef } from '@angular/core';\r\nimport * as Hammer from 'hammerjs';\r\n\r\nimport { EpFullscreenImgService } from './services/ep-fullscreen-img.service';\r\nimport { DestroySubscriptionsDirective } from 'src/app/shared/models/_basic/destroy-subscriptions';\r\n\r\n@Component({\r\n  selector: 'app-ep-fullscreen-img',\r\n  templateUrl: './ep-fullscreen-img.component.html',\r\n  styleUrls: ['./ep-fullscreen-img.component.scss']\r\n})\r\nexport class EpFullscreenImgComponent extends DestroySubscriptionsDirective implements OnInit, OnDestroy {\r\n  @ViewChild('img', { static: false }) set img(el: ElementRef<HTMLImageElement>) {\r\n    if ((this._img == null && (el == null ||\r\n      el.nativeElement == null)) ||\r\n      this._img === (el != null && el.nativeElement)) { return; }\r\n\r\n    if (el == null || el.nativeElement == null) {\r\n      this._img = null;\r\n      this.destroyHammerJS();\r\n    } else {\r\n      this._img = el.nativeElement;\r\n      this.initHammerJS();\r\n    }\r\n  }\r\n  constructor(\r\n    public cdref: ChangeDetectorRef,\r\n    public service: EpFullscreenImgService,\r\n    public el: ElementRef<HTMLElement>\r\n  ) {\r\n    super();\r\n    this.initListeners();\r\n  }\r\n  private _img: HTMLImageElement;\r\n\r\n  _isShown = false;\r\n\r\n  @Input() btnCloseLabel = '';\r\n\r\n\r\n  private bodyScrollState = null;\r\n  private hammer: HammerManager;\r\n  @HostListener('document:keydown.escape', ['$event']) onKeydownHandler(evt: KeyboardEvent) {\r\n    this.hide();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n  ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n    this.hammer.destroy();\r\n  }\r\n\r\n  initListeners() {\r\n    const s = this.service._show.subscribe(() => {\r\n      if (this._isShown) { return; }\r\n      this._isShown = true;\r\n\r\n      const body = document.getElementsByTagName('body').item(0);\r\n      const bodyStyles = window.getComputedStyle(body);\r\n      this.bodyScrollState = body.style.overflow;\r\n\r\n      body.style.overflow = 'hidden';\r\n\r\n      // this.cdref.detectChanges();\r\n    });\r\n    const s2 = this.service._hide.subscribe(() => {\r\n      if (!this._isShown) { return; }\r\n      this._isShown = false;\r\n\r\n      const body = document.getElementsByTagName('body').item(0);\r\n      body.style.overflow = this.bodyScrollState;\r\n    });\r\n    this.subs.push(s, s2);\r\n  }\r\n\r\n  hide() {\r\n    if (!this._isShown) { return; }\r\n    this.service.closeImage();\r\n  }\r\n\r\n  private destroyHammerJS() {\r\n    this.hammer.destroy();\r\n  }\r\n  private initHammerJS() {\r\n    const container =  this.el.nativeElement.firstElementChild as HTMLElement;\r\n    let posX = 0,\r\n      posY = 0,\r\n      scale = 1,\r\n      last_scale = 1,\r\n      last_posX = 0,\r\n      last_posY = 0,\r\n      max_pos_x = 0,\r\n      max_pos_y = 0,\r\n      transform = '',\r\n      el = this._img.parentElement;\r\n\r\n    this.hammer = new Hammer.Manager(container);\r\n    // this.hammer.add(new Hammer.Tap({ event: 'doubletap', taps: 2 }));\r\n    this.hammer.add(new Hammer.Tap({}));\r\n    this.hammer.add(new Hammer.Pan({}));\r\n    this.hammer.add(new Hammer.Pinch({}));\r\n\r\n    // doubletap is available aswell\r\n    this.hammer.on('tap pan panstart panend pinch pinchend', (ev) => {\r\n      // switch-case no nos vale en este caso, dado que hay ifs que deben ejecutarse\r\n      // después del escalado\r\n      if (ev.type == 'tap') {\r\n        transform =\r\n          'translate3d(0, 0, 0) ' +\r\n          'scale3d(2, 2, 1) ';\r\n        scale = 2;\r\n        last_scale = 2;\r\n        container.classList.add('scaled');\r\n        try {\r\n          if (window.getComputedStyle(el, null).getPropertyValue('-webkit-transform').toString() != 'matrix(1, 0, 0, 1, 0, 0)') {\r\n            transform =\r\n              'translate3d(0, 0, 0) ' +\r\n              'scale3d(1, 1, 1) ';\r\n            scale = 1;\r\n            last_scale = 1;\r\n            container.classList.remove('scaled');\r\n          }\r\n        } catch (err) { }\r\n        el.style.webkitTransform = transform;\r\n        transform = '';\r\n      }\r\n\r\n      // pan\r\n      if (scale != 1) {\r\n        posX = last_posX + ev.deltaX;\r\n        posY = last_posY + ev.deltaY;\r\n        max_pos_x = Math.ceil((scale - 1) * el.clientWidth / 2);\r\n        max_pos_y = Math.ceil((scale - 1) * el.clientHeight / 2);\r\n        if (posX > max_pos_x) {\r\n          posX = max_pos_x;\r\n        }\r\n        if (posX < -max_pos_x) {\r\n          posX = -max_pos_x;\r\n        }\r\n        if (posY > max_pos_y) {\r\n          posY = max_pos_y;\r\n        }\r\n        if (posY < -max_pos_y) {\r\n          posY = -max_pos_y;\r\n        }\r\n      }\r\n\r\n\r\n      // pinch\r\n      if (ev.type == 'pinch') {\r\n        scale = Math.max(.999, Math.min(last_scale * (ev.scale), 4));\r\n      }\r\n      if (ev.type == 'pinchend') {\r\n        last_scale = scale;\r\n      }\r\n\r\n      // panstart - panend\r\n      if (ev.type == 'panstart') {\r\n        container.classList.add('panning');\r\n      } else if (ev.type == 'panend') {\r\n        last_posX = posX < max_pos_x ? posX : max_pos_x;\r\n        last_posY = posY < max_pos_y ? posY : max_pos_y;\r\n        container.classList.remove('panning');\r\n      }\r\n\r\n      if (scale != 1) {\r\n        transform =\r\n          'translate3d(' + posX + 'px,' + posY + 'px, 0) ' +\r\n          'scale3d(' + scale + ', ' + scale + ', 1)';\r\n      }\r\n\r\n      if (transform) {\r\n        el.style.webkitTransform = transform;\r\n      }\r\n    });\r\n  }\r\n\r\n  private setImgScale(scale: number) {\r\n    const img = this.getImg();\r\n    img.style.transform = `scale(${scale})`;\r\n  }\r\n  private getImg() {\r\n    return this.el.nativeElement.querySelector('img');\r\n  }\r\n}\r\n","<!-- <div class=\"fullscreen-img-outer\"> -->\r\n<div class=\"fullscreen-img-wrapper\"\r\n    [ngClass]=\"{'shown': _isShown}\">\r\n    {{_isShown}}\r\n    <div *ngIf=\"service._imgUrl\" class=\"fullscreen-img-wrapper-zoom\">\r\n        <img #img [src]=\"service._imgUrl\">\r\n    </div>\r\n    <button type=\"button\"\r\n        class=\"btn rounded btn-danger btn-close\"\r\n        autoBlur\r\n        (click)=\"hide()\">\r\n        <fa-icon [icon]=\"['fas', 'times']\"></fa-icon>\r\n        {{btnCloseLabel}}\r\n</button>\r\n</div>\r\n\r\n\r\n<!-- </div> -->\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, CanLoad, Route, UrlSegment, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class YoutubeGuard implements CanLoad {\r\n  /** Wether the YouTube API should be called */\r\n  private isInitialized = false;\r\n  /** Wether the YouTube API has been initialized */\r\n  private isLoaded = false;\r\n\r\n  private isLoadedSubscriber = new BehaviorSubject<boolean>(this.isLoaded);\r\n\r\n  canLoad(\r\n    route: Route,\r\n    segments: UrlSegment[]): Observable<boolean> | Promise<boolean> | boolean {\r\n    this.initYouTubeApiScript();\r\n    return this.isLoadedSubscriber\r\n      .pipe(first(isLoaded => isLoaded === true));\r\n  }\r\n\r\n  private initYouTubeApiScript() {\r\n    if (this.isInitialized) { return; }\r\n    this.isInitialized = true;\r\n\r\n    // This code loads the IFrame Player API code asynchronously, according to the instructions at\r\n    // https://developers.google.com/youtube/iframe_api_reference#Getting_Started\r\n    const tag = document.createElement('script');\r\n    tag.src = \"https://www.youtube.com/iframe_api\";\r\n    document.body.appendChild(tag);\r\n\r\n    window.onYouTubeIframeAPIReady = () => {\r\n      this.isLoaded = true;\r\n      this.isLoadedSubscriber.next(this.isLoaded);\r\n      delete window.onYouTubeIframeAPIReady;\r\n    };\r\n  }\r\n}\r\n","/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { FilterCriteria } from '../models/filter-criteria';\r\nimport { Int32LabelAndValue } from '../models/int-32-label-and-value';\r\nimport { Project } from '../models/project';\r\nimport { ProjectCollectionList } from '../models/project-collection-list';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProjectService extends BaseService {\r\n  constructor(\r\n    config: ApiConfiguration,\r\n    http: HttpClient\r\n  ) {\r\n    super(config, http);\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiProjectInsertPost\r\n   */\r\n  static readonly ApiProjectInsertPostPath = '/api/project/insert';\r\n\r\n  /**\r\n   * Añade un nuevo proyecto.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiProjectInsertPost$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiProjectInsertPost$Plain$Response(params?: {\r\n    commit?: boolean;\r\n      body?: Project\r\n  }): Observable<StrictHttpResponse<Project>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ProjectService.ApiProjectInsertPostPath, 'post');\r\n    if (params) {\r\n\r\n      rb.query('commit', params.commit, {});\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Project>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Añade un nuevo proyecto.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiProjectInsertPost$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiProjectInsertPost$Plain(params?: {\r\n    commit?: boolean;\r\n      body?: Project\r\n  }): Observable<Project> {\r\n\r\n    return this.apiProjectInsertPost$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Project>) => r.body as Project)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Añade un nuevo proyecto.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiProjectInsertPost$Json()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiProjectInsertPost$Json$Response(params?: {\r\n    commit?: boolean;\r\n      body?: Project\r\n  }): Observable<StrictHttpResponse<Project>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ProjectService.ApiProjectInsertPostPath, 'post');\r\n    if (params) {\r\n\r\n      rb.query('commit', params.commit, {});\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Project>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Añade un nuevo proyecto.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiProjectInsertPost$Json$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiProjectInsertPost$Json(params?: {\r\n    commit?: boolean;\r\n      body?: Project\r\n  }): Observable<Project> {\r\n\r\n    return this.apiProjectInsertPost$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Project>) => r.body as Project)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiProjectUpdatePost\r\n   */\r\n  static readonly ApiProjectUpdatePostPath = '/api/project/update';\r\n\r\n  /**\r\n   * Edita un proyecto.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiProjectUpdatePost$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiProjectUpdatePost$Plain$Response(params?: {\r\n    commit?: boolean;\r\n      body?: Project\r\n  }): Observable<StrictHttpResponse<Project>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ProjectService.ApiProjectUpdatePostPath, 'post');\r\n    if (params) {\r\n\r\n      rb.query('commit', params.commit, {});\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Project>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Edita un proyecto.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiProjectUpdatePost$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiProjectUpdatePost$Plain(params?: {\r\n    commit?: boolean;\r\n      body?: Project\r\n  }): Observable<Project> {\r\n\r\n    return this.apiProjectUpdatePost$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Project>) => r.body as Project)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Edita un proyecto.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiProjectUpdatePost$Json()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiProjectUpdatePost$Json$Response(params?: {\r\n    commit?: boolean;\r\n      body?: Project\r\n  }): Observable<StrictHttpResponse<Project>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ProjectService.ApiProjectUpdatePostPath, 'post');\r\n    if (params) {\r\n\r\n      rb.query('commit', params.commit, {});\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Project>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Edita un proyecto.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiProjectUpdatePost$Json$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiProjectUpdatePost$Json(params?: {\r\n    commit?: boolean;\r\n      body?: Project\r\n  }): Observable<Project> {\r\n\r\n    return this.apiProjectUpdatePost$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Project>) => r.body as Project)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiProjectDeleteDelete\r\n   */\r\n  static readonly ApiProjectDeleteDeletePath = '/api/project/delete';\r\n\r\n  /**\r\n   * Borra proyecto.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiProjectDeleteDelete$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiProjectDeleteDelete$Plain$Response(params?: {\r\n    data?: number;\r\n    commit?: boolean;\r\n\r\n  }): Observable<StrictHttpResponse<Project>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ProjectService.ApiProjectDeleteDeletePath, 'delete');\r\n    if (params) {\r\n\r\n      rb.query('data', params.data, {});\r\n      rb.query('commit', params.commit, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Project>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Borra proyecto.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiProjectDeleteDelete$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiProjectDeleteDelete$Plain(params?: {\r\n    data?: number;\r\n    commit?: boolean;\r\n\r\n  }): Observable<Project> {\r\n\r\n    return this.apiProjectDeleteDelete$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Project>) => r.body as Project)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Borra proyecto.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiProjectDeleteDelete$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiProjectDeleteDelete$Json$Response(params?: {\r\n    data?: number;\r\n    commit?: boolean;\r\n\r\n  }): Observable<StrictHttpResponse<Project>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ProjectService.ApiProjectDeleteDeletePath, 'delete');\r\n    if (params) {\r\n\r\n      rb.query('data', params.data, {});\r\n      rb.query('commit', params.commit, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Project>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Borra proyecto.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiProjectDeleteDelete$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiProjectDeleteDelete$Json(params?: {\r\n    data?: number;\r\n    commit?: boolean;\r\n\r\n  }): Observable<Project> {\r\n\r\n    return this.apiProjectDeleteDelete$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Project>) => r.body as Project)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiProjectGetbyidGet\r\n   */\r\n  static readonly ApiProjectGetbyidGetPath = '/api/project/getbyid';\r\n\r\n  /**\r\n   * Get project by Id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiProjectGetbyidGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiProjectGetbyidGet$Plain$Response(params?: {\r\n    clave?: number;\r\n\r\n  }): Observable<StrictHttpResponse<Project>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ProjectService.ApiProjectGetbyidGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('clave', params.clave, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Project>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get project by Id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiProjectGetbyidGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiProjectGetbyidGet$Plain(params?: {\r\n    clave?: number;\r\n\r\n  }): Observable<Project> {\r\n\r\n    return this.apiProjectGetbyidGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Project>) => r.body as Project)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get project by Id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiProjectGetbyidGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiProjectGetbyidGet$Json$Response(params?: {\r\n    clave?: number;\r\n\r\n  }): Observable<StrictHttpResponse<Project>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ProjectService.ApiProjectGetbyidGetPath, 'get');\r\n    if (params) {\r\n\r\n      rb.query('clave', params.clave, {});\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Project>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get project by Id.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiProjectGetbyidGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiProjectGetbyidGet$Json(params?: {\r\n    clave?: number;\r\n\r\n  }): Observable<Project> {\r\n\r\n    return this.apiProjectGetbyidGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Project>) => r.body as Project)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiProjectGetlistPost\r\n   */\r\n  static readonly ApiProjectGetlistPostPath = '/api/project/getlist';\r\n\r\n  /**\r\n   * Get Project.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiProjectGetlistPost$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiProjectGetlistPost$Plain$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<ProjectCollectionList>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ProjectService.ApiProjectGetlistPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<ProjectCollectionList>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get Project.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiProjectGetlistPost$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiProjectGetlistPost$Plain(params?: {\r\n\r\n  }): Observable<ProjectCollectionList> {\r\n\r\n    return this.apiProjectGetlistPost$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<ProjectCollectionList>) => r.body as ProjectCollectionList)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get Project.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiProjectGetlistPost$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiProjectGetlistPost$Json$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<ProjectCollectionList>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ProjectService.ApiProjectGetlistPostPath, 'post');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<ProjectCollectionList>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get Project.\r\n   *\r\n   *\r\n   *\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiProjectGetlistPost$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiProjectGetlistPost$Json(params?: {\r\n\r\n  }): Observable<ProjectCollectionList> {\r\n\r\n    return this.apiProjectGetlistPost$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<ProjectCollectionList>) => r.body as ProjectCollectionList)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiProjectPrioritylistGet\r\n   */\r\n  static readonly ApiProjectPrioritylistGetPath = '/api/project/prioritylist';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiProjectPrioritylistGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiProjectPrioritylistGet$Plain$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<Int32LabelAndValue>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ProjectService.ApiProjectPrioritylistGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<Int32LabelAndValue>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiProjectPrioritylistGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiProjectPrioritylistGet$Plain(params?: {\r\n\r\n  }): Observable<Array<Int32LabelAndValue>> {\r\n\r\n    return this.apiProjectPrioritylistGet$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<Int32LabelAndValue>>) => r.body as Array<Int32LabelAndValue>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiProjectPrioritylistGet$Json()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiProjectPrioritylistGet$Json$Response(params?: {\r\n\r\n  }): Observable<StrictHttpResponse<Array<Int32LabelAndValue>>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ProjectService.ApiProjectPrioritylistGetPath, 'get');\r\n    if (params) {\r\n\r\n\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<Int32LabelAndValue>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiProjectPrioritylistGet$Json$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  apiProjectPrioritylistGet$Json(params?: {\r\n\r\n  }): Observable<Array<Int32LabelAndValue>> {\r\n\r\n    return this.apiProjectPrioritylistGet$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<Array<Int32LabelAndValue>>) => r.body as Array<Int32LabelAndValue>)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Path part for operation apiProjectDatatablePost\r\n   */\r\n  static readonly ApiProjectDatatablePostPath = '/api/project/datatable';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiProjectDatatablePost$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiProjectDatatablePost$Plain$Response(params?: {\r\n    pi?: number;\r\n    ps?: number;\r\n    sn?: null | string;\r\n    sd?: boolean;\r\n      body?: null | Array<FilterCriteria>\r\n  }): Observable<StrictHttpResponse<ProjectCollectionList>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ProjectService.ApiProjectDatatablePostPath, 'post');\r\n    if (params) {\r\n\r\n      rb.query('pi', params.pi, {});\r\n      rb.query('ps', params.ps, {});\r\n      rb.query('sn', params.sn, {});\r\n      rb.query('sd', params.sd, {});\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'text',\r\n      accept: 'text/plain'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<ProjectCollectionList>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiProjectDatatablePost$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiProjectDatatablePost$Plain(params?: {\r\n    pi?: number;\r\n    ps?: number;\r\n    sn?: null | string;\r\n    sd?: boolean;\r\n      body?: null | Array<FilterCriteria>\r\n  }): Observable<ProjectCollectionList> {\r\n\r\n    return this.apiProjectDatatablePost$Plain$Response(params).pipe(\r\n      map((r: StrictHttpResponse<ProjectCollectionList>) => r.body as ProjectCollectionList)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `apiProjectDatatablePost$Json()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiProjectDatatablePost$Json$Response(params?: {\r\n    pi?: number;\r\n    ps?: number;\r\n    sn?: null | string;\r\n    sd?: boolean;\r\n      body?: null | Array<FilterCriteria>\r\n  }): Observable<StrictHttpResponse<ProjectCollectionList>> {\r\n\r\n    const rb = new RequestBuilder(this.rootUrl, ProjectService.ApiProjectDatatablePostPath, 'post');\r\n    if (params) {\r\n\r\n      rb.query('pi', params.pi, {});\r\n      rb.query('ps', params.ps, {});\r\n      rb.query('sn', params.sn, {});\r\n      rb.query('sd', params.sd, {});\r\n\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n    return this.http.request(rb.build({\r\n      responseType: 'json',\r\n      accept: 'text/json'\r\n    })).pipe(\r\n      filter((r: any) => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<ProjectCollectionList>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to only to the response body.\r\n   * To access the full response (for headers, for example), `apiProjectDatatablePost$Json$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  apiProjectDatatablePost$Json(params?: {\r\n    pi?: number;\r\n    ps?: number;\r\n    sn?: null | string;\r\n    sd?: boolean;\r\n      body?: null | Array<FilterCriteria>\r\n  }): Observable<ProjectCollectionList> {\r\n\r\n    return this.apiProjectDatatablePost$Json$Response(params).pipe(\r\n      map((r: StrictHttpResponse<ProjectCollectionList>) => r.body as ProjectCollectionList)\r\n    );\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { DictionaryService } from 'src/app/shared/services/dictionary/dictionary.service';\r\n\r\n@Injectable()\r\nexport class ApiHeaderLangInterceptor implements HttpInterceptor {\r\n\r\n  constructor() {}\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    if (DictionaryService.currentLanguage) {\r\n      const clone = request.clone({\r\n        headers: request.headers\r\n          .set('lang', DictionaryService.currentLanguage),\r\n      });\r\n      return next.handle(clone);\r\n    } else {\r\n      return next.handle(request);\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AutoBlurDirective } from './auto-blur.directive';\r\n\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [AutoBlurDirective],\r\n  exports: [AutoBlurDirective],\r\n})\r\nexport class AutoBlurModule { }\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}