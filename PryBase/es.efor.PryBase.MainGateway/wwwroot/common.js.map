{"version":3,"sources":["./src/app/shared/api/models.ts","./src/app/shared/api/models/category-policies.ts","./src/app/shared/pipes/decimal-to-string/decimal-to-string.module.ts","./src/app/shared/api/models/filter-operator.ts","./src/app/shared/pipes/decimal-to-string/decimal-to-string.pipe.ts","./src/app/shared/api/models/user-management-policies.ts","./src/app/shared/api/models/position-enum.ts","./src/app/shared/api/models/zity-entity-policies.ts","./src/app/shared/api/models/post-policies.ts","./src/app/shared/pipes/replace/replace.pipe.ts","./src/app/shared/api/models/filter-db-type.ts","./src/app/shared/api/models/role-management-policies.ts","./src/app/shared/api/models/priority-enum.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["export { AccountLoginRequest } from './models/account-login-request';\r\nexport { JsonWebTokenResponse } from './models/json-web-token-response';\r\nexport { PolicyMenu } from './models/policy-menu';\r\nexport { CategoryPolicies } from './models/category-policies';\r\nexport { PostPolicies } from './models/post-policies';\r\nexport { RoleManagementPolicies } from './models/role-management-policies';\r\nexport { UserManagementPolicies } from './models/user-management-policies';\r\nexport { ZityEntityPolicies } from './models/zity-entity-policies';\r\nexport { AuthenticationState } from './models/authentication-state';\r\nexport { PriorityEnum } from './models/priority-enum';\r\nexport { Project } from './models/project';\r\nexport { PositionEnum } from './models/position-enum';\r\nexport { Employee } from './models/employee';\r\nexport { EmployeeCollectionList } from './models/employee-collection-list';\r\nexport { Int32LabelAndValue } from './models/int-32-label-and-value';\r\nexport { FilterOperator } from './models/filter-operator';\r\nexport { FilterDbType } from './models/filter-db-type';\r\nexport { FilterCriteria } from './models/filter-criteria';\r\nexport { ProblemDetails } from './models/problem-details';\r\nexport { ModuleDto } from './models/module-dto';\r\nexport { LogImportDto } from './models/log-import-dto';\r\nexport { LanguageDto } from './models/language-dto';\r\nexport { LayoutMenuItem } from './models/layout-menu-item';\r\nexport { ProjectCollectionList } from './models/project-collection-list';\r\nexport { UserDepartmentDto } from './models/user-department-dto';\r\nexport { UserLevelDto } from './models/user-level-dto';\r\nexport { UserDto } from './models/user-dto';\r\nexport { FunctionalityDto } from './models/functionality-dto';\r\nexport { MenuDto } from './models/menu-dto';\r\nexport { DetailDto } from './models/detail-dto';\r\nexport { PermissionDto } from './models/permission-dto';\r\n","/* tslint:disable */\r\nexport enum CategoryPolicies {\r\n  CategoryDetailView = 'CategoryDetailView',\r\n  CategoryListView = 'CategoryListView',\r\n  CategoryEdit = 'CategoryEdit',\r\n  CategoryDelete = 'CategoryDelete'\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DecimalToStringPipe } from './decimal-to-string.pipe';\r\nimport { ReplacePipe } from '../replace/replace.pipe';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [DecimalToStringPipe],\r\n  exports: [DecimalToStringPipe],\r\n  imports: [],\r\n  providers: [ReplacePipe]\r\n})\r\nexport class DecimalToStringModule { }\r\n","/* tslint:disable */\r\nexport enum FilterOperator {\r\n  Eq = 'Eq',\r\n  Ne = 'Ne',\r\n  EqualOrNotEqual = 'EqualOrNotEqual',\r\n  Lt = 'Lt',\r\n  Le = 'Le',\r\n  Gt = 'Gt',\r\n  Ge = 'Ge',\r\n  Bw = 'Bw',\r\n  Bn = 'Bn',\r\n  In = 'In',\r\n  Ni = 'Ni',\r\n  Ew = 'Ew',\r\n  En = 'En',\r\n  Cn = 'Cn',\r\n  Nc = 'Nc',\r\n  Nu = 'Nu',\r\n  Nn = 'Nn',\r\n  NullOperators = 'NullOperators',\r\n  NoTextOperators = 'NoTextOperators',\r\n  TextOperators = 'TextOperators'\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { ReplacePipe } from '../replace/replace.pipe';\r\n\r\n// const SEPARATOR_DECIMAL = ',';\r\n// const SEPARATOR_THOUSAND = '.';\r\n\r\n@Pipe({\r\n  name: 'decimalToString'\r\n})\r\nexport class DecimalToStringPipe implements PipeTransform {\r\n\r\n  constructor(\r\n    public replacePipe: ReplacePipe,\r\n  ) { }\r\n\r\n  transform(\r\n    originalText: string | number,\r\n    minDecimals?: number,\r\n    maxDecimals?: number,\r\n    textIfEmpty?: string,\r\n    divideThousands?: boolean,\r\n    separatorDecimal = ',',\r\n    separatorThousand = '.',\r\n  ): string {\r\n    if (textIfEmpty == null) { textIfEmpty = '-'; }\r\n    if (originalText == null) { originalText = ''; }\r\n    if (divideThousands == null) { divideThousands = false; }\r\n\r\n    this.checkForErrors(separatorDecimal, separatorThousand);\r\n\r\n    const isANumber = originalText != null && originalText.toString().length > 0 && !isNaN( originalText as any);\r\n\r\n    if (isANumber) {\r\n      let phStr: string =  originalText.toString() as any;\r\n      let totalDecimals = this.getDecimals(phStr);\r\n      if (maxDecimals == null) { maxDecimals = 5; }\r\n      if (minDecimals == null) { minDecimals = 0; }\r\n      if (minDecimals > maxDecimals) { maxDecimals = minDecimals; }\r\n\r\n      if (totalDecimals > maxDecimals) {\r\n        const phNum: number = parseFloat(phStr);\r\n        phStr = phNum.toFixed(maxDecimals);\r\n      }\r\n      phStr = parseFloat(phStr).toString(); // Por si se queda como 490.9400, para quitar esos últimos 00\r\n      totalDecimals = this.getDecimals(phStr);\r\n      if (totalDecimals < minDecimals) {\r\n        const phNum: number = parseFloat(phStr);\r\n        phStr = phNum.toFixed(minDecimals);\r\n      }\r\n\r\n      phStr = this.replacePipe.transform(phStr, '.', separatorDecimal);\r\n\r\n      if (divideThousands) { phStr = this.separateThousands(phStr, separatorDecimal, separatorThousand); }\r\n\r\n      return phStr;\r\n    } else {\r\n      return textIfEmpty || '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets how many decimal digits a stringified number has.\r\n   * @param inputText The number to analyze, passed as a string: \"13.12345\".\r\n   */\r\n  private getDecimals(inputText: string) {\r\n    let totalDecimals = 0;\r\n\r\n    let indexOfComma = inputText.indexOf(',');\r\n    if (indexOfComma < 0) { indexOfComma = inputText.indexOf('.'); }\r\n    if (indexOfComma >= 0) { totalDecimals = inputText.substr(indexOfComma).length - 1; }\r\n\r\n    return totalDecimals;\r\n  }\r\n\r\n  /**\r\n   * Splits a string every 3 characters from the right (before a decimal)\r\n   * with the given thousandSeparator.\r\n   * @param originalString The string to be transformed\r\n   */\r\n  private separateThousands(originalString: string, separatorDecimal: string, separatorThousand: string) {\r\n    const hasNegative = originalString.indexOf('-') >= 0;\r\n    const hasPositive = originalString.indexOf('+') >= 0;\r\n\r\n    if (hasNegative) { originalString = originalString.replace('-', ''); }\r\n    if (hasPositive) { originalString = originalString.replace('+', ''); }\r\n\r\n    let decimalPosition = originalString.lastIndexOf(separatorDecimal);\r\n    if (decimalPosition < 0) { decimalPosition = originalString.length; }\r\n    let phStr = originalString.substring(0, decimalPosition);\r\n    // Reverse string:\r\n    const reversed = phStr.split('').reverse().join('');\r\n    // Separate every 3 characters. If less, group them.\r\n    const regex = new RegExp(separatorThousand + '{1,3}', 'g')\r\n    const thousands = reversed.match(regex).map(r => r.split('').reverse().join(''));\r\n    // const thousands = reversed.match(/.{1,3}/g).map(r => r.split('').reverse().join(''));\r\n    // Reverse the string groups and build them into a single string.\r\n    phStr = thousands.reverse().join(separatorThousand);\r\n\r\n    // Concat decimals\r\n    if (decimalPosition < (originalString.length - 1)) {\r\n      phStr = phStr.concat(separatorDecimal, originalString.substr(decimalPosition + 1, originalString.length));\r\n    }\r\n\r\n    if (hasNegative) { phStr = `-${phStr}`; }\r\n    if (hasPositive) { phStr = `+${phStr}`; }\r\n\r\n    return phStr;\r\n  }\r\n\r\n  /**\r\n   * Validates the input string and checks for possible errors.\r\n   * Also checks for programming errors.\r\n   * @param originalString The string to be evaluated\r\n   */\r\n  private checkForErrors(separatorDecimal: string, separatorThousand: string) {\r\n    // tslint:disable-next-line: triple-equals\r\n    if (separatorDecimal == separatorThousand) {\r\n      throw new Error(`Thousand separator [ ${separatorThousand} ] cannot be the same as decimal separator [ ${separatorDecimal} ]`);\r\n    }\r\n  }\r\n}\r\n","/* tslint:disable */\r\nexport enum UserManagementPolicies {\r\n  UserManagementDetailView = 'UserManagementDetailView',\r\n  UserManagementRoleEdit = 'UserManagementRoleEdit'\r\n}\r\n","/* tslint:disable */\r\nexport enum PositionEnum {\r\n  Chief = 'Chief',\r\n  Manager = 'Manager',\r\n  Supervisor = 'Supervisor',\r\n  Developer = 'Developer',\r\n  Tester = 'Tester'\r\n}\r\n","/* tslint:disable */\r\nexport enum ZityEntityPolicies {\r\n  ZityEntityList = 'ZityEntityList',\r\n  ZityEntityDetail = 'ZityEntityDetail',\r\n  ZityEntityCreate = 'ZityEntityCreate',\r\n  ZityEntityEdit = 'ZityEntityEdit',\r\n  ZityEntityDelete = 'ZityEntityDelete',\r\n  ZityEntityDetailOwner = 'ZityEntityDetailOwner',\r\n  ZityEntityEditOwner = 'ZityEntityEditOwner'\r\n}\r\n","/* tslint:disable */\r\nexport enum PostPolicies {\r\n  PostList = 'PostList',\r\n  PostDetail = 'PostDetail',\r\n  PostCreate = 'PostCreate',\r\n  PostEdit = 'PostEdit',\r\n  PostDelete = 'PostDelete',\r\n  PostListOwner = 'PostListOwner',\r\n  PostDetailOwner = 'PostDetailOwner',\r\n  PostCreateOwner = 'PostCreateOwner',\r\n  PostEditOwner = 'PostEditOwner',\r\n  PostDeleteOwner = 'PostDeleteOwner'\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'replace'\r\n})\r\nexport class ReplacePipe implements PipeTransform {\r\n  public transform(originalText: any | number, find: string, replaceAs: string): any {\r\n    if (originalText == null) { return originalText; }\r\n\r\n    let asString: string = originalText.toString();\r\n    if (asString.length === 0 || asString.indexOf(find) < 0) { return originalText; }\r\n    asString = asString.replace(find, replaceAs);\r\n    return asString;\r\n  }\r\n\r\n}\r\n","/* tslint:disable */\r\nexport enum FilterDbType {\r\n  Literal = 'Literal',\r\n  String = 'String',\r\n  DateTime = 'DateTime',\r\n  Guid = 'Guid'\r\n}\r\n","/* tslint:disable */\r\nexport enum RoleManagementPolicies {\r\n  RoleManagementDetailView = 'RoleManagementDetailView',\r\n  RolManagementCreate = 'RolManagementCreate',\r\n  RolManagementEdit = 'RolManagementEdit',\r\n  RolManagementDelete = 'RolManagementDelete'\r\n}\r\n","/* tslint:disable */\r\nexport enum PriorityEnum {\r\n  Low = 'Low',\r\n  Medium = 'Medium',\r\n  High = 'High'\r\n}\r\n"],"sourceRoot":"webpack:///"}